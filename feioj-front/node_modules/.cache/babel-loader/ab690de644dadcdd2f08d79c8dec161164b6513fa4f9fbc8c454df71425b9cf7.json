{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { DisposableStore } from '../lifecycle.js';\nimport { BaseObservable, _setDerivedOpts, getDebugName, getFunctionName } from './base.js';\nimport { getLogger } from './logging.js';\nconst defaultEqualityComparer = (a, b) => a === b;\nexport function derived(computeFnOrOwner, computeFn) {\n  if (computeFn !== undefined) {\n    return new Derived(computeFnOrOwner, undefined, computeFn, undefined, undefined, undefined, defaultEqualityComparer);\n  }\n  return new Derived(undefined, undefined, computeFnOrOwner, undefined, undefined, undefined, defaultEqualityComparer);\n}\nexport function derivedOpts(options, computeFn) {\n  var _a;\n  return new Derived(options.owner, options.debugName, computeFn, undefined, undefined, options.onLastObserverRemoved, (_a = options.equalityComparer) !== null && _a !== void 0 ? _a : defaultEqualityComparer);\n}\n/**\n * Represents an observable that is derived from other observables.\n * The value is only recomputed when absolutely needed.\n *\n * {@link computeFn} should start with a JS Doc using `@description` to name the derived.\n *\n * Use `createEmptyChangeSummary` to create a \"change summary\" that can collect the changes.\n * Use `handleChange` to add a reported change to the change summary.\n * The compute function is given the last change summary.\n * The change summary is discarded after the compute function was called.\n *\n * @see derived\n */\nexport function derivedHandleChanges(options, computeFn) {\n  var _a;\n  return new Derived(options.owner, options.debugName, computeFn, options.createEmptyChangeSummary, options.handleChange, undefined, (_a = options.equalityComparer) !== null && _a !== void 0 ? _a : defaultEqualityComparer);\n}\nexport function derivedWithStore(computeFnOrOwner, computeFnOrUndefined) {\n  let computeFn;\n  let owner;\n  if (computeFnOrUndefined === undefined) {\n    computeFn = computeFnOrOwner;\n    owner = undefined;\n  } else {\n    owner = computeFnOrOwner;\n    computeFn = computeFnOrUndefined;\n  }\n  const store = new DisposableStore();\n  return new Derived(owner, () => {\n    var _a;\n    return (_a = getFunctionName(computeFn)) !== null && _a !== void 0 ? _a : '(anonymous)';\n  }, r => {\n    store.clear();\n    return computeFn(r, store);\n  }, undefined, undefined, () => store.dispose(), defaultEqualityComparer);\n}\nexport function derivedDisposable(computeFnOrOwner, computeFnOrUndefined) {\n  let computeFn;\n  let owner;\n  if (computeFnOrUndefined === undefined) {\n    computeFn = computeFnOrOwner;\n    owner = undefined;\n  } else {\n    owner = computeFnOrOwner;\n    computeFn = computeFnOrUndefined;\n  }\n  const store = new DisposableStore();\n  return new Derived(owner, () => {\n    var _a;\n    return (_a = getFunctionName(computeFn)) !== null && _a !== void 0 ? _a : '(anonymous)';\n  }, r => {\n    store.clear();\n    const result = computeFn(r);\n    if (result) {\n      store.add(result);\n    }\n    return result;\n  }, undefined, undefined, () => store.dispose(), defaultEqualityComparer);\n}\n_setDerivedOpts(derivedOpts);\nexport class Derived extends BaseObservable {\n  get debugName() {\n    var _a;\n    return (_a = getDebugName(this, this._debugName, this._computeFn, this._owner)) !== null && _a !== void 0 ? _a : '(anonymous)';\n  }\n  constructor(_owner, _debugName, _computeFn, createChangeSummary, _handleChange, _handleLastObserverRemoved = undefined, _equalityComparator) {\n    var _a, _b;\n    super();\n    this._owner = _owner;\n    this._debugName = _debugName;\n    this._computeFn = _computeFn;\n    this.createChangeSummary = createChangeSummary;\n    this._handleChange = _handleChange;\n    this._handleLastObserverRemoved = _handleLastObserverRemoved;\n    this._equalityComparator = _equalityComparator;\n    this.state = 0 /* DerivedState.initial */;\n    this.value = undefined;\n    this.updateCount = 0;\n    this.dependencies = new Set();\n    this.dependenciesToBeRemoved = new Set();\n    this.changeSummary = undefined;\n    this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n    (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedCreated(this);\n  }\n  onLastObserverRemoved() {\n    var _a;\n    /**\n     * We are not tracking changes anymore, thus we have to assume\n     * that our cache is invalid.\n     */\n    this.state = 0 /* DerivedState.initial */;\n    this.value = undefined;\n    for (const d of this.dependencies) {\n      d.removeObserver(this);\n    }\n    this.dependencies.clear();\n    (_a = this._handleLastObserverRemoved) === null || _a === void 0 ? void 0 : _a.call(this);\n  }\n  get() {\n    var _a;\n    if (this.observers.size === 0) {\n      // Without observers, we don't know when to clean up stuff.\n      // Thus, we don't cache anything to prevent memory leaks.\n      const result = this._computeFn(this, (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this));\n      // Clear new dependencies\n      this.onLastObserverRemoved();\n      return result;\n    } else {\n      do {\n        // We might not get a notification for a dependency that changed while it is updating,\n        // thus we also have to ask all our depedencies if they changed in this case.\n        if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n          for (const d of this.dependencies) {\n            /** might call {@link handleChange} indirectly, which could make us stale */\n            d.reportChanges();\n            if (this.state === 2 /* DerivedState.stale */) {\n              // The other dependencies will refresh on demand, so early break\n              break;\n            }\n          }\n        }\n        // We called report changes of all dependencies.\n        // If we are still not stale, we can assume to be up to date again.\n        if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n          this.state = 3 /* DerivedState.upToDate */;\n        }\n        this._recomputeIfNeeded();\n        // In case recomputation changed one of our dependencies, we need to recompute again.\n      } while (this.state !== 3 /* DerivedState.upToDate */);\n      return this.value;\n    }\n  }\n  _recomputeIfNeeded() {\n    var _a, _b;\n    if (this.state === 3 /* DerivedState.upToDate */) {\n      return;\n    }\n    const emptySet = this.dependenciesToBeRemoved;\n    this.dependenciesToBeRemoved = this.dependencies;\n    this.dependencies = emptySet;\n    const hadValue = this.state !== 0 /* DerivedState.initial */;\n    const oldValue = this.value;\n    this.state = 3 /* DerivedState.upToDate */;\n    const changeSummary = this.changeSummary;\n    this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n    try {\n      /** might call {@link handleChange} indirectly, which could invalidate us */\n      this.value = this._computeFn(this, changeSummary);\n    } finally {\n      // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n      // Thus, we only unsubscribe from observables that are definitely not read anymore.\n      for (const o of this.dependenciesToBeRemoved) {\n        o.removeObserver(this);\n      }\n      this.dependenciesToBeRemoved.clear();\n    }\n    const didChange = hadValue && !this._equalityComparator(oldValue, this.value);\n    (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedRecomputed(this, {\n      oldValue,\n      newValue: this.value,\n      change: undefined,\n      didChange,\n      hadValue\n    });\n    if (didChange) {\n      for (const r of this.observers) {\n        r.handleChange(this, undefined);\n      }\n    }\n  }\n  toString() {\n    return `LazyDerived<${this.debugName}>`;\n  }\n  // IObserver Implementation\n  beginUpdate(_observable) {\n    this.updateCount++;\n    const propagateBeginUpdate = this.updateCount === 1;\n    if (this.state === 3 /* DerivedState.upToDate */) {\n      this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n      // If we propagate begin update, that will already signal a possible change.\n      if (!propagateBeginUpdate) {\n        for (const r of this.observers) {\n          r.handlePossibleChange(this);\n        }\n      }\n    }\n    if (propagateBeginUpdate) {\n      for (const r of this.observers) {\n        r.beginUpdate(this); // This signals a possible change\n      }\n    }\n  }\n  endUpdate(_observable) {\n    this.updateCount--;\n    if (this.updateCount === 0) {\n      // End update could change the observer list.\n      const observers = [...this.observers];\n      for (const r of observers) {\n        r.endUpdate(this);\n      }\n    }\n    assertFn(() => this.updateCount >= 0);\n  }\n  handlePossibleChange(observable) {\n    // In all other states, observers already know that we might have changed.\n    if (this.state === 3 /* DerivedState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n      for (const r of this.observers) {\n        r.handlePossibleChange(this);\n      }\n    }\n  }\n  handleChange(observable, change) {\n    if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      const shouldReact = this._handleChange ? this._handleChange({\n        changedObservable: observable,\n        change,\n        didChange: o => o === observable\n      }, this.changeSummary) : true;\n      const wasUpToDate = this.state === 3 /* DerivedState.upToDate */;\n      if (shouldReact && (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ || wasUpToDate)) {\n        this.state = 2 /* DerivedState.stale */;\n        if (wasUpToDate) {\n          for (const r of this.observers) {\n            r.handlePossibleChange(this);\n          }\n        }\n      }\n    }\n  }\n  // IReader Implementation\n  readObservable(observable) {\n    // Subscribe before getting the value to enable caching\n    observable.addObserver(this);\n    /** This might call {@link handleChange} indirectly, which could invalidate us */\n    const value = observable.get();\n    // Which is why we only add the observable to the dependencies now.\n    this.dependencies.add(observable);\n    this.dependenciesToBeRemoved.delete(observable);\n    return value;\n  }\n  addObserver(observer) {\n    const shouldCallBeginUpdate = !this.observers.has(observer) && this.updateCount > 0;\n    super.addObserver(observer);\n    if (shouldCallBeginUpdate) {\n      observer.beginUpdate(this);\n    }\n  }\n  removeObserver(observer) {\n    const shouldCallEndUpdate = this.observers.has(observer) && this.updateCount > 0;\n    super.removeObserver(observer);\n    if (shouldCallEndUpdate) {\n      // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n      observer.endUpdate(this);\n    }\n  }\n}","map":{"version":3,"names":["assertFn","DisposableStore","BaseObservable","_setDerivedOpts","getDebugName","getFunctionName","getLogger","defaultEqualityComparer","a","b","derived","computeFnOrOwner","computeFn","undefined","Derived","derivedOpts","options","_a","owner","debugName","onLastObserverRemoved","equalityComparer","derivedHandleChanges","createEmptyChangeSummary","handleChange","derivedWithStore","computeFnOrUndefined","store","r","clear","dispose","derivedDisposable","result","add","_debugName","_computeFn","_owner","constructor","createChangeSummary","_handleChange","_handleLastObserverRemoved","_equalityComparator","_b","state","value","updateCount","dependencies","Set","dependenciesToBeRemoved","changeSummary","call","handleDerivedCreated","d","removeObserver","get","observers","size","reportChanges","_recomputeIfNeeded","emptySet","hadValue","oldValue","o","didChange","handleDerivedRecomputed","newValue","change","toString","beginUpdate","_observable","propagateBeginUpdate","handlePossibleChange","endUpdate","observable","has","shouldReact","changedObservable","wasUpToDate","readObservable","addObserver","delete","observer","shouldCallBeginUpdate","shouldCallEndUpdate"],"sources":["D:/PersonalFiles/yupi/OJSystem/OJSystem/feioj-front/node_modules/monaco-editor/esm/vs/base/common/observableInternal/derived.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { DisposableStore } from '../lifecycle.js';\nimport { BaseObservable, _setDerivedOpts, getDebugName, getFunctionName } from './base.js';\nimport { getLogger } from './logging.js';\nconst defaultEqualityComparer = (a, b) => a === b;\nexport function derived(computeFnOrOwner, computeFn) {\n    if (computeFn !== undefined) {\n        return new Derived(computeFnOrOwner, undefined, computeFn, undefined, undefined, undefined, defaultEqualityComparer);\n    }\n    return new Derived(undefined, undefined, computeFnOrOwner, undefined, undefined, undefined, defaultEqualityComparer);\n}\nexport function derivedOpts(options, computeFn) {\n    var _a;\n    return new Derived(options.owner, options.debugName, computeFn, undefined, undefined, options.onLastObserverRemoved, (_a = options.equalityComparer) !== null && _a !== void 0 ? _a : defaultEqualityComparer);\n}\n/**\n * Represents an observable that is derived from other observables.\n * The value is only recomputed when absolutely needed.\n *\n * {@link computeFn} should start with a JS Doc using `@description` to name the derived.\n *\n * Use `createEmptyChangeSummary` to create a \"change summary\" that can collect the changes.\n * Use `handleChange` to add a reported change to the change summary.\n * The compute function is given the last change summary.\n * The change summary is discarded after the compute function was called.\n *\n * @see derived\n */\nexport function derivedHandleChanges(options, computeFn) {\n    var _a;\n    return new Derived(options.owner, options.debugName, computeFn, options.createEmptyChangeSummary, options.handleChange, undefined, (_a = options.equalityComparer) !== null && _a !== void 0 ? _a : defaultEqualityComparer);\n}\nexport function derivedWithStore(computeFnOrOwner, computeFnOrUndefined) {\n    let computeFn;\n    let owner;\n    if (computeFnOrUndefined === undefined) {\n        computeFn = computeFnOrOwner;\n        owner = undefined;\n    }\n    else {\n        owner = computeFnOrOwner;\n        computeFn = computeFnOrUndefined;\n    }\n    const store = new DisposableStore();\n    return new Derived(owner, (() => { var _a; return (_a = getFunctionName(computeFn)) !== null && _a !== void 0 ? _a : '(anonymous)'; }), r => {\n        store.clear();\n        return computeFn(r, store);\n    }, undefined, undefined, () => store.dispose(), defaultEqualityComparer);\n}\nexport function derivedDisposable(computeFnOrOwner, computeFnOrUndefined) {\n    let computeFn;\n    let owner;\n    if (computeFnOrUndefined === undefined) {\n        computeFn = computeFnOrOwner;\n        owner = undefined;\n    }\n    else {\n        owner = computeFnOrOwner;\n        computeFn = computeFnOrUndefined;\n    }\n    const store = new DisposableStore();\n    return new Derived(owner, (() => { var _a; return (_a = getFunctionName(computeFn)) !== null && _a !== void 0 ? _a : '(anonymous)'; }), r => {\n        store.clear();\n        const result = computeFn(r);\n        if (result) {\n            store.add(result);\n        }\n        return result;\n    }, undefined, undefined, () => store.dispose(), defaultEqualityComparer);\n}\n_setDerivedOpts(derivedOpts);\nexport class Derived extends BaseObservable {\n    get debugName() {\n        var _a;\n        return (_a = getDebugName(this, this._debugName, this._computeFn, this._owner)) !== null && _a !== void 0 ? _a : '(anonymous)';\n    }\n    constructor(_owner, _debugName, _computeFn, createChangeSummary, _handleChange, _handleLastObserverRemoved = undefined, _equalityComparator) {\n        var _a, _b;\n        super();\n        this._owner = _owner;\n        this._debugName = _debugName;\n        this._computeFn = _computeFn;\n        this.createChangeSummary = createChangeSummary;\n        this._handleChange = _handleChange;\n        this._handleLastObserverRemoved = _handleLastObserverRemoved;\n        this._equalityComparator = _equalityComparator;\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        this.updateCount = 0;\n        this.dependencies = new Set();\n        this.dependenciesToBeRemoved = new Set();\n        this.changeSummary = undefined;\n        this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedCreated(this);\n    }\n    onLastObserverRemoved() {\n        var _a;\n        /**\n         * We are not tracking changes anymore, thus we have to assume\n         * that our cache is invalid.\n         */\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        for (const d of this.dependencies) {\n            d.removeObserver(this);\n        }\n        this.dependencies.clear();\n        (_a = this._handleLastObserverRemoved) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n    get() {\n        var _a;\n        if (this.observers.size === 0) {\n            // Without observers, we don't know when to clean up stuff.\n            // Thus, we don't cache anything to prevent memory leaks.\n            const result = this._computeFn(this, (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this));\n            // Clear new dependencies\n            this.onLastObserverRemoved();\n            return result;\n        }\n        else {\n            do {\n                // We might not get a notification for a dependency that changed while it is updating,\n                // thus we also have to ask all our depedencies if they changed in this case.\n                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n                    for (const d of this.dependencies) {\n                        /** might call {@link handleChange} indirectly, which could make us stale */\n                        d.reportChanges();\n                        if (this.state === 2 /* DerivedState.stale */) {\n                            // The other dependencies will refresh on demand, so early break\n                            break;\n                        }\n                    }\n                }\n                // We called report changes of all dependencies.\n                // If we are still not stale, we can assume to be up to date again.\n                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n                    this.state = 3 /* DerivedState.upToDate */;\n                }\n                this._recomputeIfNeeded();\n                // In case recomputation changed one of our dependencies, we need to recompute again.\n            } while (this.state !== 3 /* DerivedState.upToDate */);\n            return this.value;\n        }\n    }\n    _recomputeIfNeeded() {\n        var _a, _b;\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            return;\n        }\n        const emptySet = this.dependenciesToBeRemoved;\n        this.dependenciesToBeRemoved = this.dependencies;\n        this.dependencies = emptySet;\n        const hadValue = this.state !== 0 /* DerivedState.initial */;\n        const oldValue = this.value;\n        this.state = 3 /* DerivedState.upToDate */;\n        const changeSummary = this.changeSummary;\n        this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n        try {\n            /** might call {@link handleChange} indirectly, which could invalidate us */\n            this.value = this._computeFn(this, changeSummary);\n        }\n        finally {\n            // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n            // Thus, we only unsubscribe from observables that are definitely not read anymore.\n            for (const o of this.dependenciesToBeRemoved) {\n                o.removeObserver(this);\n            }\n            this.dependenciesToBeRemoved.clear();\n        }\n        const didChange = hadValue && !(this._equalityComparator(oldValue, this.value));\n        (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedRecomputed(this, {\n            oldValue,\n            newValue: this.value,\n            change: undefined,\n            didChange,\n            hadValue,\n        });\n        if (didChange) {\n            for (const r of this.observers) {\n                r.handleChange(this, undefined);\n            }\n        }\n    }\n    toString() {\n        return `LazyDerived<${this.debugName}>`;\n    }\n    // IObserver Implementation\n    beginUpdate(_observable) {\n        this.updateCount++;\n        const propagateBeginUpdate = this.updateCount === 1;\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            // If we propagate begin update, that will already signal a possible change.\n            if (!propagateBeginUpdate) {\n                for (const r of this.observers) {\n                    r.handlePossibleChange(this);\n                }\n            }\n        }\n        if (propagateBeginUpdate) {\n            for (const r of this.observers) {\n                r.beginUpdate(this); // This signals a possible change\n            }\n        }\n    }\n    endUpdate(_observable) {\n        this.updateCount--;\n        if (this.updateCount === 0) {\n            // End update could change the observer list.\n            const observers = [...this.observers];\n            for (const r of observers) {\n                r.endUpdate(this);\n            }\n        }\n        assertFn(() => this.updateCount >= 0);\n    }\n    handlePossibleChange(observable) {\n        // In all other states, observers already know that we might have changed.\n        if (this.state === 3 /* DerivedState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            for (const r of this.observers) {\n                r.handlePossibleChange(this);\n            }\n        }\n    }\n    handleChange(observable, change) {\n        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            const shouldReact = this._handleChange ? this._handleChange({\n                changedObservable: observable,\n                change,\n                didChange: o => o === observable,\n            }, this.changeSummary) : true;\n            const wasUpToDate = this.state === 3 /* DerivedState.upToDate */;\n            if (shouldReact && (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ || wasUpToDate)) {\n                this.state = 2 /* DerivedState.stale */;\n                if (wasUpToDate) {\n                    for (const r of this.observers) {\n                        r.handlePossibleChange(this);\n                    }\n                }\n            }\n        }\n    }\n    // IReader Implementation\n    readObservable(observable) {\n        // Subscribe before getting the value to enable caching\n        observable.addObserver(this);\n        /** This might call {@link handleChange} indirectly, which could invalidate us */\n        const value = observable.get();\n        // Which is why we only add the observable to the dependencies now.\n        this.dependencies.add(observable);\n        this.dependenciesToBeRemoved.delete(observable);\n        return value;\n    }\n    addObserver(observer) {\n        const shouldCallBeginUpdate = !this.observers.has(observer) && this.updateCount > 0;\n        super.addObserver(observer);\n        if (shouldCallBeginUpdate) {\n            observer.beginUpdate(this);\n        }\n    }\n    removeObserver(observer) {\n        const shouldCallEndUpdate = this.observers.has(observer) && this.updateCount > 0;\n        super.removeObserver(observer);\n        if (shouldCallEndUpdate) {\n            // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n            observer.endUpdate(this);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}