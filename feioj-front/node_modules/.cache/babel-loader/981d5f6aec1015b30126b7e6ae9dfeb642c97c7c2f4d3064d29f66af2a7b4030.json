{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nimport * as dompurify from './dompurify/dompurify.js';\nimport { DomEmitter } from './event.js';\nimport { createElement } from './formattedTextRenderer.js';\nimport { StandardKeyboardEvent } from './keyboardEvent.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { renderLabelWithIcons } from './ui/iconLabel/iconLabels.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { Event } from '../common/event.js';\nimport { escapeDoubleQuotes, parseHrefAndDimensions, removeMarkdownEscapes } from '../common/htmlContent.js';\nimport { markdownEscapeEscapedIcons } from '../common/iconLabels.js';\nimport { defaultGenerator } from '../common/idGenerator.js';\nimport { Lazy } from '../common/lazy.js';\nimport { DisposableStore } from '../common/lifecycle.js';\nimport { marked } from '../common/marked/marked.js';\nimport { parse } from '../common/marshalling.js';\nimport { FileAccess, Schemas } from '../common/network.js';\nimport { cloneAndChange } from '../common/objects.js';\nimport { dirname, resolvePath } from '../common/resources.js';\nimport { escape } from '../common/strings.js';\nimport { URI } from '../common/uri.js';\nconst defaultMarkedRenderers = Object.freeze({\n  image: (href, title, text) => {\n    let dimensions = [];\n    let attributes = [];\n    if (href) {\n      ({\n        href,\n        dimensions\n      } = parseHrefAndDimensions(href));\n      attributes.push(`src=\"${escapeDoubleQuotes(href)}\"`);\n    }\n    if (text) {\n      attributes.push(`alt=\"${escapeDoubleQuotes(text)}\"`);\n    }\n    if (title) {\n      attributes.push(`title=\"${escapeDoubleQuotes(title)}\"`);\n    }\n    if (dimensions.length) {\n      attributes = attributes.concat(dimensions);\n    }\n    return '<img ' + attributes.join(' ') + '>';\n  },\n  paragraph: text => {\n    return `<p>${text}</p>`;\n  },\n  link: (href, title, text) => {\n    if (typeof href !== 'string') {\n      return '';\n    }\n    // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829\n    if (href === text) {\n      // raw link case\n      text = removeMarkdownEscapes(text);\n    }\n    title = typeof title === 'string' ? escapeDoubleQuotes(removeMarkdownEscapes(title)) : '';\n    href = removeMarkdownEscapes(href);\n    // HTML Encode href\n    href = href.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\n    return `<a href=\"${href}\" title=\"${title || href}\" draggable=\"false\">${text}</a>`;\n  }\n});\n/**\n * Low-level way create a html element from a markdown string.\n *\n * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/contrib/markdownRenderer/browser/markdownRenderer.ts)\n * which comes with support for pretty code block rendering and which uses the default way of handling links.\n */\nexport function renderMarkdown(markdown, options = {}, markedOptions = {}) {\n  var _a, _b;\n  const disposables = new DisposableStore();\n  let isDisposed = false;\n  const element = createElement(options);\n  const _uriMassage = function (part) {\n    let data;\n    try {\n      data = parse(decodeURIComponent(part));\n    } catch (e) {\n      // ignore\n    }\n    if (!data) {\n      return part;\n    }\n    data = cloneAndChange(data, value => {\n      if (markdown.uris && markdown.uris[value]) {\n        return URI.revive(markdown.uris[value]);\n      } else {\n        return undefined;\n      }\n    });\n    return encodeURIComponent(JSON.stringify(data));\n  };\n  const _href = function (href, isDomUri) {\n    const data = markdown.uris && markdown.uris[href];\n    let uri = URI.revive(data);\n    if (isDomUri) {\n      if (href.startsWith(Schemas.data + ':')) {\n        return href;\n      }\n      if (!uri) {\n        uri = URI.parse(href);\n      }\n      // this URI will end up as \"src\"-attribute of a dom node\n      // and because of that special rewriting needs to be done\n      // so that the URI uses a protocol that's understood by\n      // browsers (like http or https)\n      return FileAccess.uriToBrowserUri(uri).toString(true);\n    }\n    if (!uri) {\n      return href;\n    }\n    if (URI.parse(href).toString() === uri.toString()) {\n      return href; // no transformation performed\n    }\n    if (uri.query) {\n      uri = uri.with({\n        query: _uriMassage(uri.query)\n      });\n    }\n    return uri.toString();\n  };\n  const renderer = new marked.Renderer();\n  renderer.image = defaultMarkedRenderers.image;\n  renderer.link = defaultMarkedRenderers.link;\n  renderer.paragraph = defaultMarkedRenderers.paragraph;\n  // Will collect [id, renderedElement] tuples\n  const codeBlocks = [];\n  const syncCodeBlocks = [];\n  if (options.codeBlockRendererSync) {\n    renderer.code = (code, lang) => {\n      const id = defaultGenerator.nextId();\n      const value = options.codeBlockRendererSync(postProcessCodeBlockLanguageId(lang), code);\n      syncCodeBlocks.push([id, value]);\n      return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n    };\n  } else if (options.codeBlockRenderer) {\n    renderer.code = (code, lang) => {\n      const id = defaultGenerator.nextId();\n      const value = options.codeBlockRenderer(postProcessCodeBlockLanguageId(lang), code);\n      codeBlocks.push(value.then(element => [id, element]));\n      return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n    };\n  }\n  if (options.actionHandler) {\n    const _activateLink = function (event) {\n      let target = event.target;\n      if (target.tagName !== 'A') {\n        target = target.parentElement;\n        if (!target || target.tagName !== 'A') {\n          return;\n        }\n      }\n      try {\n        let href = target.dataset['href'];\n        if (href) {\n          if (markdown.baseUri) {\n            href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n          }\n          options.actionHandler.callback(href, event);\n        }\n      } catch (err) {\n        onUnexpectedError(err);\n      } finally {\n        event.preventDefault();\n      }\n    };\n    const onClick = options.actionHandler.disposables.add(new DomEmitter(element, 'click'));\n    const onAuxClick = options.actionHandler.disposables.add(new DomEmitter(element, 'auxclick'));\n    options.actionHandler.disposables.add(Event.any(onClick.event, onAuxClick.event)(e => {\n      const mouseEvent = new StandardMouseEvent(DOM.getWindow(element), e);\n      if (!mouseEvent.leftButton && !mouseEvent.middleButton) {\n        return;\n      }\n      _activateLink(mouseEvent);\n    }));\n    options.actionHandler.disposables.add(DOM.addDisposableListener(element, 'keydown', e => {\n      const keyboardEvent = new StandardKeyboardEvent(e);\n      if (!keyboardEvent.equals(10 /* KeyCode.Space */) && !keyboardEvent.equals(3 /* KeyCode.Enter */)) {\n        return;\n      }\n      _activateLink(keyboardEvent);\n    }));\n  }\n  if (!markdown.supportHtml) {\n    // TODO: Can we deprecated this in favor of 'supportHtml'?\n    // Use our own sanitizer so that we can let through only spans.\n    // Otherwise, we'd be letting all html be rendered.\n    // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.\n    // We always pass the output through dompurify after this so that we don't rely on\n    // marked for sanitization.\n    markedOptions.sanitizer = html => {\n      const match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\\/\\s*span>)$/) : undefined;\n      return match ? html : '';\n    };\n    markedOptions.sanitize = true;\n    markedOptions.silent = true;\n  }\n  markedOptions.renderer = renderer;\n  // values that are too long will freeze the UI\n  let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n  if (value.length > 100000) {\n    value = `${value.substr(0, 100000)}â€¦`;\n  }\n  // escape theme icons\n  if (markdown.supportThemeIcons) {\n    value = markdownEscapeEscapedIcons(value);\n  }\n  let renderedMarkdown;\n  if (options.fillInIncompleteTokens) {\n    // The defaults are applied by parse but not lexer()/parser(), and they need to be present\n    const opts = {\n      ...marked.defaults,\n      ...markedOptions\n    };\n    const tokens = marked.lexer(value, opts);\n    const newTokens = fillInIncompleteTokens(tokens);\n    renderedMarkdown = marked.parser(newTokens, opts);\n  } else {\n    renderedMarkdown = marked.parse(value, markedOptions);\n  }\n  // Rewrite theme icons\n  if (markdown.supportThemeIcons) {\n    const elements = renderLabelWithIcons(renderedMarkdown);\n    renderedMarkdown = elements.map(e => typeof e === 'string' ? e : e.outerHTML).join('');\n  }\n  const htmlParser = new DOMParser();\n  const markdownHtmlDoc = htmlParser.parseFromString(sanitizeRenderedMarkdown(markdown, renderedMarkdown), 'text/html');\n  markdownHtmlDoc.body.querySelectorAll('img').forEach(img => {\n    const src = img.getAttribute('src'); // Get the raw 'src' attribute value as text, not the resolved 'src'\n    if (src) {\n      let href = src;\n      try {\n        if (markdown.baseUri) {\n          // absolute or relative local path, or file: uri\n          href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n        }\n      } catch (err) {}\n      img.src = _href(href, true);\n    }\n  });\n  markdownHtmlDoc.body.querySelectorAll('a').forEach(a => {\n    const href = a.getAttribute('href'); // Get the raw 'href' attribute value as text, not the resolved 'href'\n    a.setAttribute('href', ''); // Clear out href. We use the `data-href` for handling clicks instead\n    if (!href || /^data:|javascript:/i.test(href) || /^command:/i.test(href) && !markdown.isTrusted || /^command:(\\/\\/\\/)?_workbench\\.downloadResource/i.test(href)) {\n      // drop the link\n      a.replaceWith(...a.childNodes);\n    } else {\n      let resolvedHref = _href(href, false);\n      if (markdown.baseUri) {\n        resolvedHref = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n      }\n      a.dataset.href = resolvedHref;\n    }\n  });\n  element.innerHTML = sanitizeRenderedMarkdown(markdown, markdownHtmlDoc.body.innerHTML);\n  if (codeBlocks.length > 0) {\n    Promise.all(codeBlocks).then(tuples => {\n      var _a, _b;\n      if (isDisposed) {\n        return;\n      }\n      const renderedElements = new Map(tuples);\n      const placeholderElements = element.querySelectorAll(`div[data-code]`);\n      for (const placeholderElement of placeholderElements) {\n        const renderedElement = renderedElements.get((_a = placeholderElement.dataset['code']) !== null && _a !== void 0 ? _a : '');\n        if (renderedElement) {\n          DOM.reset(placeholderElement, renderedElement);\n        }\n      }\n      (_b = options.asyncRenderCallback) === null || _b === void 0 ? void 0 : _b.call(options);\n    });\n  } else if (syncCodeBlocks.length > 0) {\n    const renderedElements = new Map(syncCodeBlocks);\n    const placeholderElements = element.querySelectorAll(`div[data-code]`);\n    for (const placeholderElement of placeholderElements) {\n      const renderedElement = renderedElements.get((_b = placeholderElement.dataset['code']) !== null && _b !== void 0 ? _b : '');\n      if (renderedElement) {\n        DOM.reset(placeholderElement, renderedElement);\n      }\n    }\n  }\n  // signal size changes for image tags\n  if (options.asyncRenderCallback) {\n    for (const img of element.getElementsByTagName('img')) {\n      const listener = disposables.add(DOM.addDisposableListener(img, 'load', () => {\n        listener.dispose();\n        options.asyncRenderCallback();\n      }));\n    }\n  }\n  return {\n    element,\n    dispose: () => {\n      isDisposed = true;\n      disposables.dispose();\n    }\n  };\n}\nfunction postProcessCodeBlockLanguageId(lang) {\n  if (!lang) {\n    return '';\n  }\n  const parts = lang.split(/[\\s+|:|,|\\{|\\?]/, 1);\n  if (parts.length) {\n    return parts[0];\n  }\n  return lang;\n}\nfunction resolveWithBaseUri(baseUri, href) {\n  const hasScheme = /^\\w[\\w\\d+.-]*:/.test(href);\n  if (hasScheme) {\n    return href;\n  }\n  if (baseUri.path.endsWith('/')) {\n    return resolvePath(baseUri, href).toString();\n  } else {\n    return resolvePath(dirname(baseUri), href).toString();\n  }\n}\nfunction sanitizeRenderedMarkdown(options, renderedMarkdown) {\n  const {\n    config,\n    allowedSchemes\n  } = getSanitizerOptions(options);\n  dompurify.addHook('uponSanitizeAttribute', (element, e) => {\n    var _a;\n    if (e.attrName === 'style' || e.attrName === 'class') {\n      if (element.tagName === 'SPAN') {\n        if (e.attrName === 'style') {\n          e.keepAttr = /^(color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?(background-color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?$/.test(e.attrValue);\n          return;\n        } else if (e.attrName === 'class') {\n          e.keepAttr = /^codicon codicon-[a-z\\-]+( codicon-modifier-[a-z\\-]+)?$/.test(e.attrValue);\n          return;\n        }\n      }\n      e.keepAttr = false;\n      return;\n    } else if (element.tagName === 'INPUT' && ((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n      if (e.attrName === 'type' && e.attrValue === 'checkbox' || e.attrName === 'disabled' || e.attrName === 'checked') {\n        e.keepAttr = true;\n        return;\n      }\n      e.keepAttr = false;\n    }\n  });\n  dompurify.addHook('uponSanitizeElement', (element, e) => {\n    var _a, _b;\n    if (e.tagName === 'input') {\n      if (((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n        element.setAttribute('disabled', '');\n      } else {\n        (_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(element);\n      }\n    }\n  });\n  const hook = DOM.hookDomPurifyHrefAndSrcSanitizer(allowedSchemes);\n  try {\n    return dompurify.sanitize(renderedMarkdown, {\n      ...config,\n      RETURN_TRUSTED_TYPE: true\n    });\n  } finally {\n    dompurify.removeHook('uponSanitizeAttribute');\n    hook.dispose();\n  }\n}\nexport const allowedMarkdownAttr = ['align', 'autoplay', 'alt', 'checked', 'class', 'controls', 'data-code', 'data-href', 'disabled', 'draggable', 'height', 'href', 'loop', 'muted', 'playsinline', 'poster', 'src', 'style', 'target', 'title', 'type', 'width', 'start'];\nfunction getSanitizerOptions(options) {\n  const allowedSchemes = [Schemas.http, Schemas.https, Schemas.mailto, Schemas.data, Schemas.file, Schemas.vscodeFileResource, Schemas.vscodeRemote, Schemas.vscodeRemoteResource];\n  if (options.isTrusted) {\n    allowedSchemes.push(Schemas.command);\n  }\n  return {\n    config: {\n      // allowedTags should included everything that markdown renders to.\n      // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.\n      // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/\n      // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-\n      ALLOWED_TAGS: [...DOM.basicMarkupHtmlTags],\n      ALLOWED_ATTR: allowedMarkdownAttr,\n      ALLOW_UNKNOWN_PROTOCOLS: true\n    },\n    allowedSchemes\n  };\n}\n/**\n * Strips all markdown from `string`, if it's an IMarkdownString. For example\n * `# Header` would be output as `Header`. If it's not, the string is returned.\n */\nexport function renderStringAsPlaintext(string) {\n  return typeof string === 'string' ? string : renderMarkdownAsPlaintext(string);\n}\n/**\n * Strips all markdown from `markdown`. For example `# Header` would be output as `Header`.\n */\nexport function renderMarkdownAsPlaintext(markdown) {\n  var _a;\n  // values that are too long will freeze the UI\n  let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n  if (value.length > 100000) {\n    value = `${value.substr(0, 100000)}â€¦`;\n  }\n  const html = marked.parse(value, {\n    renderer: plainTextRenderer.value\n  }).replace(/&(#\\d+|[a-zA-Z]+);/g, m => {\n    var _a;\n    return (_a = unescapeInfo.get(m)) !== null && _a !== void 0 ? _a : m;\n  });\n  return sanitizeRenderedMarkdown({\n    isTrusted: false\n  }, html).toString();\n}\nconst unescapeInfo = new Map([['&quot;', '\"'], ['&nbsp;', ' '], ['&amp;', '&'], ['&#39;', '\\''], ['&lt;', '<'], ['&gt;', '>']]);\nconst plainTextRenderer = new Lazy(() => {\n  const renderer = new marked.Renderer();\n  renderer.code = code => {\n    return code;\n  };\n  renderer.blockquote = quote => {\n    return quote;\n  };\n  renderer.html = _html => {\n    return '';\n  };\n  renderer.heading = (text, _level, _raw) => {\n    return text + '\\n';\n  };\n  renderer.hr = () => {\n    return '';\n  };\n  renderer.list = (body, _ordered) => {\n    return body;\n  };\n  renderer.listitem = text => {\n    return text + '\\n';\n  };\n  renderer.paragraph = text => {\n    return text + '\\n';\n  };\n  renderer.table = (header, body) => {\n    return header + body + '\\n';\n  };\n  renderer.tablerow = content => {\n    return content;\n  };\n  renderer.tablecell = (content, _flags) => {\n    return content + ' ';\n  };\n  renderer.strong = text => {\n    return text;\n  };\n  renderer.em = text => {\n    return text;\n  };\n  renderer.codespan = code => {\n    return code;\n  };\n  renderer.br = () => {\n    return '\\n';\n  };\n  renderer.del = text => {\n    return text;\n  };\n  renderer.image = (_href, _title, _text) => {\n    return '';\n  };\n  renderer.text = text => {\n    return text;\n  };\n  renderer.link = (_href, _title, text) => {\n    return text;\n  };\n  return renderer;\n});\nfunction mergeRawTokenText(tokens) {\n  let mergedTokenText = '';\n  tokens.forEach(token => {\n    mergedTokenText += token.raw;\n  });\n  return mergedTokenText;\n}\nfunction completeSingleLinePattern(token) {\n  var _a, _b;\n  for (let i = 0; i < token.tokens.length; i++) {\n    const subtoken = token.tokens[i];\n    if (subtoken.type === 'text') {\n      const lines = subtoken.raw.split('\\n');\n      const lastLine = lines[lines.length - 1];\n      if (lastLine.includes('`')) {\n        return completeCodespan(token);\n      } else if (lastLine.includes('**')) {\n        return completeDoublestar(token);\n      } else if (lastLine.match(/\\*\\w/)) {\n        return completeStar(token);\n      } else if (lastLine.match(/(^|\\s)__\\w/)) {\n        return completeDoubleUnderscore(token);\n      } else if (lastLine.match(/(^|\\s)_\\w/)) {\n        return completeUnderscore(token);\n      } else if (lastLine.match(/(^|\\s)\\[.*\\]\\(\\w*/)) {\n        const nextTwoSubTokens = token.tokens.slice(i + 1);\n        if (((_a = nextTwoSubTokens[0]) === null || _a === void 0 ? void 0 : _a.type) === 'link' && ((_b = nextTwoSubTokens[1]) === null || _b === void 0 ? void 0 : _b.type) === 'text' && nextTwoSubTokens[1].raw.match(/^ *\"[^\"]*$/)) {\n          // A markdown link can look like\n          // [link text](https://microsoft.com \"more text\")\n          // Where \"more text\" is a title for the link or an argument to a vscode command link\n          return completeLinkTargetArg(token);\n        }\n        return completeLinkTarget(token);\n      } else if (lastLine.match(/(^|\\s)\\[\\w/)) {\n        return completeLinkText(token);\n      }\n    }\n  }\n  return undefined;\n}\n// function completeListItemPattern(token: marked.Tokens.List): marked.Tokens.List | undefined {\n// \t// Patch up this one list item\n// \tconst lastItem = token.items[token.items.length - 1];\n// \tconst newList = completeSingleLinePattern(lastItem);\n// \tif (!newList || newList.type !== 'list') {\n// \t\t// Nothing to fix, or not a pattern we were expecting\n// \t\treturn;\n// \t}\n// \t// Re-parse the whole list with the last item replaced\n// \tconst completeList = marked.lexer(mergeRawTokenText(token.items.slice(0, token.items.length - 1)) + newList.items[0].raw);\n// \tif (completeList.length === 1 && completeList[0].type === 'list') {\n// \t\treturn completeList[0];\n// \t}\n// \t// Not a pattern we were expecting\n// \treturn undefined;\n// }\nexport function fillInIncompleteTokens(tokens) {\n  let i;\n  let newTokens;\n  for (i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.type === 'paragraph' && token.raw.match(/(\\n|^)```/)) {\n      // If the code block was complete, it would be in a type='code'\n      newTokens = completeCodeBlock(tokens.slice(i));\n      break;\n    }\n    if (token.type === 'paragraph' && token.raw.match(/(\\n|^)\\|/)) {\n      newTokens = completeTable(tokens.slice(i));\n      break;\n    }\n    // if (i === tokens.length - 1 && token.type === 'list') {\n    // \tconst newListToken = completeListItemPattern(token);\n    // \tif (newListToken) {\n    // \t\tnewTokens = [newListToken];\n    // \t\tbreak;\n    // \t}\n    // }\n    if (i === tokens.length - 1 && token.type === 'paragraph') {\n      // Only operates on a single token, because any newline that follows this should break these patterns\n      const newToken = completeSingleLinePattern(token);\n      if (newToken) {\n        newTokens = [newToken];\n        break;\n      }\n    }\n  }\n  if (newTokens) {\n    const newTokensList = [...tokens.slice(0, i), ...newTokens];\n    newTokensList.links = tokens.links;\n    return newTokensList;\n  }\n  return tokens;\n}\nfunction completeCodeBlock(tokens) {\n  const mergedRawText = mergeRawTokenText(tokens);\n  return marked.lexer(mergedRawText + '\\n```');\n}\nfunction completeCodespan(token) {\n  return completeWithString(token, '`');\n}\nfunction completeStar(tokens) {\n  return completeWithString(tokens, '*');\n}\nfunction completeUnderscore(tokens) {\n  return completeWithString(tokens, '_');\n}\nfunction completeLinkTarget(tokens) {\n  return completeWithString(tokens, ')');\n}\nfunction completeLinkTargetArg(tokens) {\n  return completeWithString(tokens, '\")');\n}\nfunction completeLinkText(tokens) {\n  return completeWithString(tokens, '](about:blank)');\n}\nfunction completeDoublestar(tokens) {\n  return completeWithString(tokens, '**');\n}\nfunction completeDoubleUnderscore(tokens) {\n  return completeWithString(tokens, '__');\n}\nfunction completeWithString(tokens, closingString) {\n  const mergedRawText = mergeRawTokenText(Array.isArray(tokens) ? tokens : [tokens]);\n  // If it was completed correctly, this should be a single token.\n  // Expecting either a Paragraph or a List\n  return marked.lexer(mergedRawText + closingString)[0];\n}\nfunction completeTable(tokens) {\n  const mergedRawText = mergeRawTokenText(tokens);\n  const lines = mergedRawText.split('\\n');\n  let numCols; // The number of line1 col headers\n  let hasSeparatorRow = false;\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (typeof numCols === 'undefined' && line.match(/^\\s*\\|/)) {\n      const line1Matches = line.match(/(\\|[^\\|]+)(?=\\||$)/g);\n      if (line1Matches) {\n        numCols = line1Matches.length;\n      }\n    } else if (typeof numCols === 'number') {\n      if (line.match(/^\\s*\\|/)) {\n        if (i !== lines.length - 1) {\n          // We got the line1 header row, and the line2 separator row, but there are more lines, and it wasn't parsed as a table!\n          // That's strange and means that the table is probably malformed in the source, so I won't try to patch it up.\n          return undefined;\n        }\n        // Got a line2 separator row- partial or complete, doesn't matter, we'll replace it with a correct one\n        hasSeparatorRow = true;\n      } else {\n        // The line after the header row isn't a valid separator row, so the table is malformed, don't fix it up\n        return undefined;\n      }\n    }\n  }\n  if (typeof numCols === 'number' && numCols > 0) {\n    const prefixText = hasSeparatorRow ? lines.slice(0, -1).join('\\n') : mergedRawText;\n    const line1EndsInPipe = !!prefixText.match(/\\|\\s*$/);\n    const newRawText = prefixText + (line1EndsInPipe ? '' : '|') + `\\n|${' --- |'.repeat(numCols)}`;\n    return marked.lexer(newRawText);\n  }\n  return undefined;\n}","map":{"version":3,"names":["DOM","dompurify","DomEmitter","createElement","StandardKeyboardEvent","StandardMouseEvent","renderLabelWithIcons","onUnexpectedError","Event","escapeDoubleQuotes","parseHrefAndDimensions","removeMarkdownEscapes","markdownEscapeEscapedIcons","defaultGenerator","Lazy","DisposableStore","marked","parse","FileAccess","Schemas","cloneAndChange","dirname","resolvePath","escape","URI","defaultMarkedRenderers","Object","freeze","image","href","title","text","dimensions","attributes","push","length","concat","join","paragraph","link","replace","renderMarkdown","markdown","options","markedOptions","_a","_b","disposables","isDisposed","element","_uriMassage","part","data","decodeURIComponent","e","value","uris","revive","undefined","encodeURIComponent","JSON","stringify","_href","isDomUri","uri","startsWith","uriToBrowserUri","toString","query","with","renderer","Renderer","codeBlocks","syncCodeBlocks","codeBlockRendererSync","code","lang","id","nextId","postProcessCodeBlockLanguageId","codeBlockRenderer","then","actionHandler","_activateLink","event","target","tagName","parentElement","dataset","baseUri","resolveWithBaseUri","from","callback","err","preventDefault","onClick","add","onAuxClick","any","mouseEvent","getWindow","leftButton","middleButton","addDisposableListener","keyboardEvent","equals","supportHtml","sanitizer","html","match","isTrusted","sanitize","silent","substr","supportThemeIcons","renderedMarkdown","fillInIncompleteTokens","opts","defaults","tokens","lexer","newTokens","parser","elements","map","outerHTML","htmlParser","DOMParser","markdownHtmlDoc","parseFromString","sanitizeRenderedMarkdown","body","querySelectorAll","forEach","img","src","getAttribute","a","setAttribute","test","replaceWith","childNodes","resolvedHref","innerHTML","Promise","all","tuples","renderedElements","Map","placeholderElements","placeholderElement","renderedElement","get","reset","asyncRenderCallback","call","getElementsByTagName","listener","dispose","parts","split","hasScheme","path","endsWith","config","allowedSchemes","getSanitizerOptions","addHook","attrName","keepAttr","attrValue","getNamedItem","removeChild","hook","hookDomPurifyHrefAndSrcSanitizer","RETURN_TRUSTED_TYPE","removeHook","allowedMarkdownAttr","http","https","mailto","file","vscodeFileResource","vscodeRemote","vscodeRemoteResource","command","ALLOWED_TAGS","basicMarkupHtmlTags","ALLOWED_ATTR","ALLOW_UNKNOWN_PROTOCOLS","renderStringAsPlaintext","string","renderMarkdownAsPlaintext","plainTextRenderer","m","unescapeInfo","blockquote","quote","_html","heading","_level","_raw","hr","list","_ordered","listitem","table","header","tablerow","content","tablecell","_flags","strong","em","codespan","br","del","_title","_text","mergeRawTokenText","mergedTokenText","token","raw","completeSingleLinePattern","i","subtoken","type","lines","lastLine","includes","completeCodespan","completeDoublestar","completeStar","completeDoubleUnderscore","completeUnderscore","nextTwoSubTokens","slice","completeLinkTargetArg","completeLinkTarget","completeLinkText","completeCodeBlock","completeTable","newToken","newTokensList","links","mergedRawText","completeWithString","closingString","Array","isArray","numCols","hasSeparatorRow","line","trim","line1Matches","prefixText","line1EndsInPipe","newRawText","repeat"],"sources":["D:/PersonalFiles/yupi/OJSystem/OJSystem/feioj-front/node_modules/monaco-editor/esm/vs/base/browser/markdownRenderer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nimport * as dompurify from './dompurify/dompurify.js';\nimport { DomEmitter } from './event.js';\nimport { createElement } from './formattedTextRenderer.js';\nimport { StandardKeyboardEvent } from './keyboardEvent.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { renderLabelWithIcons } from './ui/iconLabel/iconLabels.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { Event } from '../common/event.js';\nimport { escapeDoubleQuotes, parseHrefAndDimensions, removeMarkdownEscapes } from '../common/htmlContent.js';\nimport { markdownEscapeEscapedIcons } from '../common/iconLabels.js';\nimport { defaultGenerator } from '../common/idGenerator.js';\nimport { Lazy } from '../common/lazy.js';\nimport { DisposableStore } from '../common/lifecycle.js';\nimport { marked } from '../common/marked/marked.js';\nimport { parse } from '../common/marshalling.js';\nimport { FileAccess, Schemas } from '../common/network.js';\nimport { cloneAndChange } from '../common/objects.js';\nimport { dirname, resolvePath } from '../common/resources.js';\nimport { escape } from '../common/strings.js';\nimport { URI } from '../common/uri.js';\nconst defaultMarkedRenderers = Object.freeze({\n    image: (href, title, text) => {\n        let dimensions = [];\n        let attributes = [];\n        if (href) {\n            ({ href, dimensions } = parseHrefAndDimensions(href));\n            attributes.push(`src=\"${escapeDoubleQuotes(href)}\"`);\n        }\n        if (text) {\n            attributes.push(`alt=\"${escapeDoubleQuotes(text)}\"`);\n        }\n        if (title) {\n            attributes.push(`title=\"${escapeDoubleQuotes(title)}\"`);\n        }\n        if (dimensions.length) {\n            attributes = attributes.concat(dimensions);\n        }\n        return '<img ' + attributes.join(' ') + '>';\n    },\n    paragraph: (text) => {\n        return `<p>${text}</p>`;\n    },\n    link: (href, title, text) => {\n        if (typeof href !== 'string') {\n            return '';\n        }\n        // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829\n        if (href === text) { // raw link case\n            text = removeMarkdownEscapes(text);\n        }\n        title = typeof title === 'string' ? escapeDoubleQuotes(removeMarkdownEscapes(title)) : '';\n        href = removeMarkdownEscapes(href);\n        // HTML Encode href\n        href = href.replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n        return `<a href=\"${href}\" title=\"${title || href}\" draggable=\"false\">${text}</a>`;\n    },\n});\n/**\n * Low-level way create a html element from a markdown string.\n *\n * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/contrib/markdownRenderer/browser/markdownRenderer.ts)\n * which comes with support for pretty code block rendering and which uses the default way of handling links.\n */\nexport function renderMarkdown(markdown, options = {}, markedOptions = {}) {\n    var _a, _b;\n    const disposables = new DisposableStore();\n    let isDisposed = false;\n    const element = createElement(options);\n    const _uriMassage = function (part) {\n        let data;\n        try {\n            data = parse(decodeURIComponent(part));\n        }\n        catch (e) {\n            // ignore\n        }\n        if (!data) {\n            return part;\n        }\n        data = cloneAndChange(data, value => {\n            if (markdown.uris && markdown.uris[value]) {\n                return URI.revive(markdown.uris[value]);\n            }\n            else {\n                return undefined;\n            }\n        });\n        return encodeURIComponent(JSON.stringify(data));\n    };\n    const _href = function (href, isDomUri) {\n        const data = markdown.uris && markdown.uris[href];\n        let uri = URI.revive(data);\n        if (isDomUri) {\n            if (href.startsWith(Schemas.data + ':')) {\n                return href;\n            }\n            if (!uri) {\n                uri = URI.parse(href);\n            }\n            // this URI will end up as \"src\"-attribute of a dom node\n            // and because of that special rewriting needs to be done\n            // so that the URI uses a protocol that's understood by\n            // browsers (like http or https)\n            return FileAccess.uriToBrowserUri(uri).toString(true);\n        }\n        if (!uri) {\n            return href;\n        }\n        if (URI.parse(href).toString() === uri.toString()) {\n            return href; // no transformation performed\n        }\n        if (uri.query) {\n            uri = uri.with({ query: _uriMassage(uri.query) });\n        }\n        return uri.toString();\n    };\n    const renderer = new marked.Renderer();\n    renderer.image = defaultMarkedRenderers.image;\n    renderer.link = defaultMarkedRenderers.link;\n    renderer.paragraph = defaultMarkedRenderers.paragraph;\n    // Will collect [id, renderedElement] tuples\n    const codeBlocks = [];\n    const syncCodeBlocks = [];\n    if (options.codeBlockRendererSync) {\n        renderer.code = (code, lang) => {\n            const id = defaultGenerator.nextId();\n            const value = options.codeBlockRendererSync(postProcessCodeBlockLanguageId(lang), code);\n            syncCodeBlocks.push([id, value]);\n            return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n        };\n    }\n    else if (options.codeBlockRenderer) {\n        renderer.code = (code, lang) => {\n            const id = defaultGenerator.nextId();\n            const value = options.codeBlockRenderer(postProcessCodeBlockLanguageId(lang), code);\n            codeBlocks.push(value.then(element => [id, element]));\n            return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n        };\n    }\n    if (options.actionHandler) {\n        const _activateLink = function (event) {\n            let target = event.target;\n            if (target.tagName !== 'A') {\n                target = target.parentElement;\n                if (!target || target.tagName !== 'A') {\n                    return;\n                }\n            }\n            try {\n                let href = target.dataset['href'];\n                if (href) {\n                    if (markdown.baseUri) {\n                        href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n                    }\n                    options.actionHandler.callback(href, event);\n                }\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n            finally {\n                event.preventDefault();\n            }\n        };\n        const onClick = options.actionHandler.disposables.add(new DomEmitter(element, 'click'));\n        const onAuxClick = options.actionHandler.disposables.add(new DomEmitter(element, 'auxclick'));\n        options.actionHandler.disposables.add(Event.any(onClick.event, onAuxClick.event)(e => {\n            const mouseEvent = new StandardMouseEvent(DOM.getWindow(element), e);\n            if (!mouseEvent.leftButton && !mouseEvent.middleButton) {\n                return;\n            }\n            _activateLink(mouseEvent);\n        }));\n        options.actionHandler.disposables.add(DOM.addDisposableListener(element, 'keydown', (e) => {\n            const keyboardEvent = new StandardKeyboardEvent(e);\n            if (!keyboardEvent.equals(10 /* KeyCode.Space */) && !keyboardEvent.equals(3 /* KeyCode.Enter */)) {\n                return;\n            }\n            _activateLink(keyboardEvent);\n        }));\n    }\n    if (!markdown.supportHtml) {\n        // TODO: Can we deprecated this in favor of 'supportHtml'?\n        // Use our own sanitizer so that we can let through only spans.\n        // Otherwise, we'd be letting all html be rendered.\n        // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.\n        // We always pass the output through dompurify after this so that we don't rely on\n        // marked for sanitization.\n        markedOptions.sanitizer = (html) => {\n            const match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\\/\\s*span>)$/) : undefined;\n            return match ? html : '';\n        };\n        markedOptions.sanitize = true;\n        markedOptions.silent = true;\n    }\n    markedOptions.renderer = renderer;\n    // values that are too long will freeze the UI\n    let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n    if (value.length > 100000) {\n        value = `${value.substr(0, 100000)}â€¦`;\n    }\n    // escape theme icons\n    if (markdown.supportThemeIcons) {\n        value = markdownEscapeEscapedIcons(value);\n    }\n    let renderedMarkdown;\n    if (options.fillInIncompleteTokens) {\n        // The defaults are applied by parse but not lexer()/parser(), and they need to be present\n        const opts = {\n            ...marked.defaults,\n            ...markedOptions\n        };\n        const tokens = marked.lexer(value, opts);\n        const newTokens = fillInIncompleteTokens(tokens);\n        renderedMarkdown = marked.parser(newTokens, opts);\n    }\n    else {\n        renderedMarkdown = marked.parse(value, markedOptions);\n    }\n    // Rewrite theme icons\n    if (markdown.supportThemeIcons) {\n        const elements = renderLabelWithIcons(renderedMarkdown);\n        renderedMarkdown = elements.map(e => typeof e === 'string' ? e : e.outerHTML).join('');\n    }\n    const htmlParser = new DOMParser();\n    const markdownHtmlDoc = htmlParser.parseFromString(sanitizeRenderedMarkdown(markdown, renderedMarkdown), 'text/html');\n    markdownHtmlDoc.body.querySelectorAll('img')\n        .forEach(img => {\n        const src = img.getAttribute('src'); // Get the raw 'src' attribute value as text, not the resolved 'src'\n        if (src) {\n            let href = src;\n            try {\n                if (markdown.baseUri) { // absolute or relative local path, or file: uri\n                    href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n                }\n            }\n            catch (err) { }\n            img.src = _href(href, true);\n        }\n    });\n    markdownHtmlDoc.body.querySelectorAll('a')\n        .forEach(a => {\n        const href = a.getAttribute('href'); // Get the raw 'href' attribute value as text, not the resolved 'href'\n        a.setAttribute('href', ''); // Clear out href. We use the `data-href` for handling clicks instead\n        if (!href\n            || /^data:|javascript:/i.test(href)\n            || (/^command:/i.test(href) && !markdown.isTrusted)\n            || /^command:(\\/\\/\\/)?_workbench\\.downloadResource/i.test(href)) {\n            // drop the link\n            a.replaceWith(...a.childNodes);\n        }\n        else {\n            let resolvedHref = _href(href, false);\n            if (markdown.baseUri) {\n                resolvedHref = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n            }\n            a.dataset.href = resolvedHref;\n        }\n    });\n    element.innerHTML = sanitizeRenderedMarkdown(markdown, markdownHtmlDoc.body.innerHTML);\n    if (codeBlocks.length > 0) {\n        Promise.all(codeBlocks).then((tuples) => {\n            var _a, _b;\n            if (isDisposed) {\n                return;\n            }\n            const renderedElements = new Map(tuples);\n            const placeholderElements = element.querySelectorAll(`div[data-code]`);\n            for (const placeholderElement of placeholderElements) {\n                const renderedElement = renderedElements.get((_a = placeholderElement.dataset['code']) !== null && _a !== void 0 ? _a : '');\n                if (renderedElement) {\n                    DOM.reset(placeholderElement, renderedElement);\n                }\n            }\n            (_b = options.asyncRenderCallback) === null || _b === void 0 ? void 0 : _b.call(options);\n        });\n    }\n    else if (syncCodeBlocks.length > 0) {\n        const renderedElements = new Map(syncCodeBlocks);\n        const placeholderElements = element.querySelectorAll(`div[data-code]`);\n        for (const placeholderElement of placeholderElements) {\n            const renderedElement = renderedElements.get((_b = placeholderElement.dataset['code']) !== null && _b !== void 0 ? _b : '');\n            if (renderedElement) {\n                DOM.reset(placeholderElement, renderedElement);\n            }\n        }\n    }\n    // signal size changes for image tags\n    if (options.asyncRenderCallback) {\n        for (const img of element.getElementsByTagName('img')) {\n            const listener = disposables.add(DOM.addDisposableListener(img, 'load', () => {\n                listener.dispose();\n                options.asyncRenderCallback();\n            }));\n        }\n    }\n    return {\n        element,\n        dispose: () => {\n            isDisposed = true;\n            disposables.dispose();\n        }\n    };\n}\nfunction postProcessCodeBlockLanguageId(lang) {\n    if (!lang) {\n        return '';\n    }\n    const parts = lang.split(/[\\s+|:|,|\\{|\\?]/, 1);\n    if (parts.length) {\n        return parts[0];\n    }\n    return lang;\n}\nfunction resolveWithBaseUri(baseUri, href) {\n    const hasScheme = /^\\w[\\w\\d+.-]*:/.test(href);\n    if (hasScheme) {\n        return href;\n    }\n    if (baseUri.path.endsWith('/')) {\n        return resolvePath(baseUri, href).toString();\n    }\n    else {\n        return resolvePath(dirname(baseUri), href).toString();\n    }\n}\nfunction sanitizeRenderedMarkdown(options, renderedMarkdown) {\n    const { config, allowedSchemes } = getSanitizerOptions(options);\n    dompurify.addHook('uponSanitizeAttribute', (element, e) => {\n        var _a;\n        if (e.attrName === 'style' || e.attrName === 'class') {\n            if (element.tagName === 'SPAN') {\n                if (e.attrName === 'style') {\n                    e.keepAttr = /^(color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?(background-color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?$/.test(e.attrValue);\n                    return;\n                }\n                else if (e.attrName === 'class') {\n                    e.keepAttr = /^codicon codicon-[a-z\\-]+( codicon-modifier-[a-z\\-]+)?$/.test(e.attrValue);\n                    return;\n                }\n            }\n            e.keepAttr = false;\n            return;\n        }\n        else if (element.tagName === 'INPUT' && ((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n            if ((e.attrName === 'type' && e.attrValue === 'checkbox') || e.attrName === 'disabled' || e.attrName === 'checked') {\n                e.keepAttr = true;\n                return;\n            }\n            e.keepAttr = false;\n        }\n    });\n    dompurify.addHook('uponSanitizeElement', (element, e) => {\n        var _a, _b;\n        if (e.tagName === 'input') {\n            if (((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n                element.setAttribute('disabled', '');\n            }\n            else {\n                (_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(element);\n            }\n        }\n    });\n    const hook = DOM.hookDomPurifyHrefAndSrcSanitizer(allowedSchemes);\n    try {\n        return dompurify.sanitize(renderedMarkdown, { ...config, RETURN_TRUSTED_TYPE: true });\n    }\n    finally {\n        dompurify.removeHook('uponSanitizeAttribute');\n        hook.dispose();\n    }\n}\nexport const allowedMarkdownAttr = [\n    'align',\n    'autoplay',\n    'alt',\n    'checked',\n    'class',\n    'controls',\n    'data-code',\n    'data-href',\n    'disabled',\n    'draggable',\n    'height',\n    'href',\n    'loop',\n    'muted',\n    'playsinline',\n    'poster',\n    'src',\n    'style',\n    'target',\n    'title',\n    'type',\n    'width',\n    'start',\n];\nfunction getSanitizerOptions(options) {\n    const allowedSchemes = [\n        Schemas.http,\n        Schemas.https,\n        Schemas.mailto,\n        Schemas.data,\n        Schemas.file,\n        Schemas.vscodeFileResource,\n        Schemas.vscodeRemote,\n        Schemas.vscodeRemoteResource,\n    ];\n    if (options.isTrusted) {\n        allowedSchemes.push(Schemas.command);\n    }\n    return {\n        config: {\n            // allowedTags should included everything that markdown renders to.\n            // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.\n            // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/\n            // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-\n            ALLOWED_TAGS: [...DOM.basicMarkupHtmlTags],\n            ALLOWED_ATTR: allowedMarkdownAttr,\n            ALLOW_UNKNOWN_PROTOCOLS: true,\n        },\n        allowedSchemes\n    };\n}\n/**\n * Strips all markdown from `string`, if it's an IMarkdownString. For example\n * `# Header` would be output as `Header`. If it's not, the string is returned.\n */\nexport function renderStringAsPlaintext(string) {\n    return typeof string === 'string' ? string : renderMarkdownAsPlaintext(string);\n}\n/**\n * Strips all markdown from `markdown`. For example `# Header` would be output as `Header`.\n */\nexport function renderMarkdownAsPlaintext(markdown) {\n    var _a;\n    // values that are too long will freeze the UI\n    let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n    if (value.length > 100000) {\n        value = `${value.substr(0, 100000)}â€¦`;\n    }\n    const html = marked.parse(value, { renderer: plainTextRenderer.value }).replace(/&(#\\d+|[a-zA-Z]+);/g, m => { var _a; return (_a = unescapeInfo.get(m)) !== null && _a !== void 0 ? _a : m; });\n    return sanitizeRenderedMarkdown({ isTrusted: false }, html).toString();\n}\nconst unescapeInfo = new Map([\n    ['&quot;', '\"'],\n    ['&nbsp;', ' '],\n    ['&amp;', '&'],\n    ['&#39;', '\\''],\n    ['&lt;', '<'],\n    ['&gt;', '>'],\n]);\nconst plainTextRenderer = new Lazy(() => {\n    const renderer = new marked.Renderer();\n    renderer.code = (code) => {\n        return code;\n    };\n    renderer.blockquote = (quote) => {\n        return quote;\n    };\n    renderer.html = (_html) => {\n        return '';\n    };\n    renderer.heading = (text, _level, _raw) => {\n        return text + '\\n';\n    };\n    renderer.hr = () => {\n        return '';\n    };\n    renderer.list = (body, _ordered) => {\n        return body;\n    };\n    renderer.listitem = (text) => {\n        return text + '\\n';\n    };\n    renderer.paragraph = (text) => {\n        return text + '\\n';\n    };\n    renderer.table = (header, body) => {\n        return header + body + '\\n';\n    };\n    renderer.tablerow = (content) => {\n        return content;\n    };\n    renderer.tablecell = (content, _flags) => {\n        return content + ' ';\n    };\n    renderer.strong = (text) => {\n        return text;\n    };\n    renderer.em = (text) => {\n        return text;\n    };\n    renderer.codespan = (code) => {\n        return code;\n    };\n    renderer.br = () => {\n        return '\\n';\n    };\n    renderer.del = (text) => {\n        return text;\n    };\n    renderer.image = (_href, _title, _text) => {\n        return '';\n    };\n    renderer.text = (text) => {\n        return text;\n    };\n    renderer.link = (_href, _title, text) => {\n        return text;\n    };\n    return renderer;\n});\nfunction mergeRawTokenText(tokens) {\n    let mergedTokenText = '';\n    tokens.forEach(token => {\n        mergedTokenText += token.raw;\n    });\n    return mergedTokenText;\n}\nfunction completeSingleLinePattern(token) {\n    var _a, _b;\n    for (let i = 0; i < token.tokens.length; i++) {\n        const subtoken = token.tokens[i];\n        if (subtoken.type === 'text') {\n            const lines = subtoken.raw.split('\\n');\n            const lastLine = lines[lines.length - 1];\n            if (lastLine.includes('`')) {\n                return completeCodespan(token);\n            }\n            else if (lastLine.includes('**')) {\n                return completeDoublestar(token);\n            }\n            else if (lastLine.match(/\\*\\w/)) {\n                return completeStar(token);\n            }\n            else if (lastLine.match(/(^|\\s)__\\w/)) {\n                return completeDoubleUnderscore(token);\n            }\n            else if (lastLine.match(/(^|\\s)_\\w/)) {\n                return completeUnderscore(token);\n            }\n            else if (lastLine.match(/(^|\\s)\\[.*\\]\\(\\w*/)) {\n                const nextTwoSubTokens = token.tokens.slice(i + 1);\n                if (((_a = nextTwoSubTokens[0]) === null || _a === void 0 ? void 0 : _a.type) === 'link' && ((_b = nextTwoSubTokens[1]) === null || _b === void 0 ? void 0 : _b.type) === 'text' && nextTwoSubTokens[1].raw.match(/^ *\"[^\"]*$/)) {\n                    // A markdown link can look like\n                    // [link text](https://microsoft.com \"more text\")\n                    // Where \"more text\" is a title for the link or an argument to a vscode command link\n                    return completeLinkTargetArg(token);\n                }\n                return completeLinkTarget(token);\n            }\n            else if (lastLine.match(/(^|\\s)\\[\\w/)) {\n                return completeLinkText(token);\n            }\n        }\n    }\n    return undefined;\n}\n// function completeListItemPattern(token: marked.Tokens.List): marked.Tokens.List | undefined {\n// \t// Patch up this one list item\n// \tconst lastItem = token.items[token.items.length - 1];\n// \tconst newList = completeSingleLinePattern(lastItem);\n// \tif (!newList || newList.type !== 'list') {\n// \t\t// Nothing to fix, or not a pattern we were expecting\n// \t\treturn;\n// \t}\n// \t// Re-parse the whole list with the last item replaced\n// \tconst completeList = marked.lexer(mergeRawTokenText(token.items.slice(0, token.items.length - 1)) + newList.items[0].raw);\n// \tif (completeList.length === 1 && completeList[0].type === 'list') {\n// \t\treturn completeList[0];\n// \t}\n// \t// Not a pattern we were expecting\n// \treturn undefined;\n// }\nexport function fillInIncompleteTokens(tokens) {\n    let i;\n    let newTokens;\n    for (i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        if (token.type === 'paragraph' && token.raw.match(/(\\n|^)```/)) {\n            // If the code block was complete, it would be in a type='code'\n            newTokens = completeCodeBlock(tokens.slice(i));\n            break;\n        }\n        if (token.type === 'paragraph' && token.raw.match(/(\\n|^)\\|/)) {\n            newTokens = completeTable(tokens.slice(i));\n            break;\n        }\n        // if (i === tokens.length - 1 && token.type === 'list') {\n        // \tconst newListToken = completeListItemPattern(token);\n        // \tif (newListToken) {\n        // \t\tnewTokens = [newListToken];\n        // \t\tbreak;\n        // \t}\n        // }\n        if (i === tokens.length - 1 && token.type === 'paragraph') {\n            // Only operates on a single token, because any newline that follows this should break these patterns\n            const newToken = completeSingleLinePattern(token);\n            if (newToken) {\n                newTokens = [newToken];\n                break;\n            }\n        }\n    }\n    if (newTokens) {\n        const newTokensList = [\n            ...tokens.slice(0, i),\n            ...newTokens\n        ];\n        newTokensList.links = tokens.links;\n        return newTokensList;\n    }\n    return tokens;\n}\nfunction completeCodeBlock(tokens) {\n    const mergedRawText = mergeRawTokenText(tokens);\n    return marked.lexer(mergedRawText + '\\n```');\n}\nfunction completeCodespan(token) {\n    return completeWithString(token, '`');\n}\nfunction completeStar(tokens) {\n    return completeWithString(tokens, '*');\n}\nfunction completeUnderscore(tokens) {\n    return completeWithString(tokens, '_');\n}\nfunction completeLinkTarget(tokens) {\n    return completeWithString(tokens, ')');\n}\nfunction completeLinkTargetArg(tokens) {\n    return completeWithString(tokens, '\")');\n}\nfunction completeLinkText(tokens) {\n    return completeWithString(tokens, '](about:blank)');\n}\nfunction completeDoublestar(tokens) {\n    return completeWithString(tokens, '**');\n}\nfunction completeDoubleUnderscore(tokens) {\n    return completeWithString(tokens, '__');\n}\nfunction completeWithString(tokens, closingString) {\n    const mergedRawText = mergeRawTokenText(Array.isArray(tokens) ? tokens : [tokens]);\n    // If it was completed correctly, this should be a single token.\n    // Expecting either a Paragraph or a List\n    return marked.lexer(mergedRawText + closingString)[0];\n}\nfunction completeTable(tokens) {\n    const mergedRawText = mergeRawTokenText(tokens);\n    const lines = mergedRawText.split('\\n');\n    let numCols; // The number of line1 col headers\n    let hasSeparatorRow = false;\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (typeof numCols === 'undefined' && line.match(/^\\s*\\|/)) {\n            const line1Matches = line.match(/(\\|[^\\|]+)(?=\\||$)/g);\n            if (line1Matches) {\n                numCols = line1Matches.length;\n            }\n        }\n        else if (typeof numCols === 'number') {\n            if (line.match(/^\\s*\\|/)) {\n                if (i !== lines.length - 1) {\n                    // We got the line1 header row, and the line2 separator row, but there are more lines, and it wasn't parsed as a table!\n                    // That's strange and means that the table is probably malformed in the source, so I won't try to patch it up.\n                    return undefined;\n                }\n                // Got a line2 separator row- partial or complete, doesn't matter, we'll replace it with a correct one\n                hasSeparatorRow = true;\n            }\n            else {\n                // The line after the header row isn't a valid separator row, so the table is malformed, don't fix it up\n                return undefined;\n            }\n        }\n    }\n    if (typeof numCols === 'number' && numCols > 0) {\n        const prefixText = hasSeparatorRow ? lines.slice(0, -1).join('\\n') : mergedRawText;\n        const line1EndsInPipe = !!prefixText.match(/\\|\\s*$/);\n        const newRawText = prefixText + (line1EndsInPipe ? '' : '|') + `\\n|${' --- |'.repeat(numCols)}`;\n        return marked.lexer(newRawText);\n    }\n    return undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}