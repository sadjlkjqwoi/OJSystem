{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { Position } from '../../../common/core/position.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n    this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n    this._renderLineHighlight = options.get(95 /* EditorOption.renderLineHighlight */);\n    this._renderLineHighlightOnlyWhenFocus = options.get(96 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n    this._wordWrap = layoutInfo.isViewportWrapping;\n    this._contentLeft = layoutInfo.contentLeft;\n    this._contentWidth = layoutInfo.contentWidth;\n    this._selectionIsEmpty = true;\n    this._focused = false;\n    this._cursorLineNumbers = [1];\n    this._selections = [new Selection(1, 1, 1, 1)];\n    this._renderData = null;\n    this._context.addEventHandler(this);\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    super.dispose();\n  }\n  _readFromSelections() {\n    let hasChanged = false;\n    const lineNumbers = new Set();\n    for (const selection of this._selections) {\n      lineNumbers.add(selection.positionLineNumber);\n    }\n    const cursorsLineNumbers = Array.from(lineNumbers);\n    cursorsLineNumbers.sort((a, b) => a - b);\n    if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n      this._cursorLineNumbers = cursorsLineNumbers;\n      hasChanged = true;\n    }\n    const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n    if (this._selectionIsEmpty !== selectionIsEmpty) {\n      this._selectionIsEmpty = selectionIsEmpty;\n      hasChanged = true;\n    }\n    return hasChanged;\n  }\n  // --- begin event handlers\n  onThemeChanged(e) {\n    return this._readFromSelections();\n  }\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n    this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n    this._renderLineHighlight = options.get(95 /* EditorOption.renderLineHighlight */);\n    this._renderLineHighlightOnlyWhenFocus = options.get(96 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n    this._wordWrap = layoutInfo.isViewportWrapping;\n    this._contentLeft = layoutInfo.contentLeft;\n    this._contentWidth = layoutInfo.contentWidth;\n    return true;\n  }\n  onCursorStateChanged(e) {\n    this._selections = e.selections;\n    return this._readFromSelections();\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollWidthChanged || e.scrollTopChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  onFocusChanged(e) {\n    if (!this._renderLineHighlightOnlyWhenFocus) {\n      return false;\n    }\n    this._focused = e.isFocused;\n    return true;\n  }\n  // --- end event handlers\n  prepareRender(ctx) {\n    if (!this._shouldRenderThis()) {\n      this._renderData = null;\n      return;\n    }\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    // initialize renderData\n    const renderData = [];\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      renderData[lineIndex] = '';\n    }\n    if (this._wordWrap) {\n      // do a first pass to render wrapped lines\n      const renderedLineWrapped = this._renderOne(ctx, false);\n      for (const cursorLineNumber of this._cursorLineNumbers) {\n        const coordinatesConverter = this._context.viewModel.coordinatesConverter;\n        const modelLineNumber = coordinatesConverter.convertViewPositionToModelPosition(new Position(cursorLineNumber, 1)).lineNumber;\n        const firstViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, 1)).lineNumber;\n        const lastViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, this._context.viewModel.model.getLineMaxColumn(modelLineNumber))).lineNumber;\n        const firstLine = Math.max(firstViewLineNumber, visibleStartLineNumber);\n        const lastLine = Math.min(lastViewLineNumber, visibleEndLineNumber);\n        for (let lineNumber = firstLine; lineNumber <= lastLine; lineNumber++) {\n          const lineIndex = lineNumber - visibleStartLineNumber;\n          renderData[lineIndex] = renderedLineWrapped;\n        }\n      }\n    }\n    // do a second pass to render exact lines\n    const renderedLineExact = this._renderOne(ctx, true);\n    for (const cursorLineNumber of this._cursorLineNumbers) {\n      if (cursorLineNumber < visibleStartLineNumber || cursorLineNumber > visibleEndLineNumber) {\n        continue;\n      }\n      const lineIndex = cursorLineNumber - visibleStartLineNumber;\n      renderData[lineIndex] = renderedLineExact;\n    }\n    this._renderData = renderData;\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderData) {\n      return '';\n    }\n    const lineIndex = lineNumber - startLineNumber;\n    if (lineIndex >= this._renderData.length) {\n      return '';\n    }\n    return this._renderData[lineIndex];\n  }\n  _shouldRenderInMargin() {\n    return (this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all') && (!this._renderLineHighlightOnlyWhenFocus || this._focused);\n  }\n  _shouldRenderInContent() {\n    return (this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all') && this._selectionIsEmpty && (!this._renderLineHighlightOnlyWhenFocus || this._focused);\n  }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n  _renderOne(ctx, exact) {\n    const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-both' : '') + (exact ? ' current-line-exact' : '');\n    return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n  }\n  _shouldRenderThis() {\n    return this._shouldRenderInContent();\n  }\n  _shouldRenderOther() {\n    return this._shouldRenderInMargin();\n  }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n  _renderOne(ctx, exact) {\n    const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '') + (this._shouldRenderInMargin() && exact ? ' current-line-exact-margin' : '');\n    return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n  }\n  _shouldRenderThis() {\n    return true;\n  }\n  _shouldRenderOther() {\n    return this._shouldRenderInContent();\n  }\n}\nregisterThemingParticipant((theme, collector) => {\n  const lineHighlight = theme.getColor(editorLineHighlight);\n  if (lineHighlight) {\n    collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n    collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n  }\n  if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n    const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n    if (lineHighlightBorder) {\n      collector.addRule(`.monaco-editor .view-overlays .current-line-exact { border: 2px solid ${lineHighlightBorder}; }`);\n      collector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border: 2px solid ${lineHighlightBorder}; }`);\n      if (isHighContrast(theme.type)) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line-exact { border-width: 1px; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border-width: 1px; }`);\n      }\n    }\n  }\n});","map":{"version":3,"names":["DynamicViewOverlay","editorLineHighlight","editorLineHighlightBorder","arrays","registerThemingParticipant","Selection","isHighContrast","Position","AbstractLineHighlightOverlay","constructor","context","_context","options","configuration","layoutInfo","get","_lineHeight","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_wordWrap","isViewportWrapping","_contentLeft","contentLeft","_contentWidth","contentWidth","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","_renderData","addEventHandler","dispose","removeEventHandler","_readFromSelections","hasChanged","lineNumbers","Set","selection","add","positionLineNumber","cursorsLineNumbers","Array","from","sort","a","b","equals","selectionIsEmpty","every","s","isEmpty","onThemeChanged","e","onConfigurationChanged","onCursorStateChanged","selections","onFlushed","onLinesDeleted","onLinesInserted","onScrollChanged","scrollWidthChanged","scrollTopChanged","onZonesChanged","onFocusChanged","isFocused","prepareRender","ctx","_shouldRenderThis","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","renderData","lineNumber","lineIndex","renderedLineWrapped","_renderOne","cursorLineNumber","coordinatesConverter","viewModel","modelLineNumber","convertViewPositionToModelPosition","firstViewLineNumber","convertModelPositionToViewPosition","lastViewLineNumber","model","getLineMaxColumn","firstLine","Math","max","lastLine","min","renderedLineExact","render","length","_shouldRenderInMargin","_shouldRenderInContent","CurrentLineHighlightOverlay","exact","className","scrollWidth","_shouldRenderOther","CurrentLineMarginHighlightOverlay","theme","collector","lineHighlight","getColor","addRule","isTransparent","defines","lineHighlightBorder","type"],"sources":["D:/yupi/OJ System/OJ System/feioj-front/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { Position } from '../../../common/core/position.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(95 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(96 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._wordWrap = layoutInfo.isViewportWrapping;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const lineNumbers = new Set();\n        for (const selection of this._selections) {\n            lineNumbers.add(selection.positionLineNumber);\n        }\n        const cursorsLineNumbers = Array.from(lineNumbers);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(95 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(96 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._wordWrap = layoutInfo.isViewportWrapping;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        // initialize renderData\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            renderData[lineIndex] = '';\n        }\n        if (this._wordWrap) {\n            // do a first pass to render wrapped lines\n            const renderedLineWrapped = this._renderOne(ctx, false);\n            for (const cursorLineNumber of this._cursorLineNumbers) {\n                const coordinatesConverter = this._context.viewModel.coordinatesConverter;\n                const modelLineNumber = coordinatesConverter.convertViewPositionToModelPosition(new Position(cursorLineNumber, 1)).lineNumber;\n                const firstViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, 1)).lineNumber;\n                const lastViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, this._context.viewModel.model.getLineMaxColumn(modelLineNumber))).lineNumber;\n                const firstLine = Math.max(firstViewLineNumber, visibleStartLineNumber);\n                const lastLine = Math.min(lastViewLineNumber, visibleEndLineNumber);\n                for (let lineNumber = firstLine; lineNumber <= lastLine; lineNumber++) {\n                    const lineIndex = lineNumber - visibleStartLineNumber;\n                    renderData[lineIndex] = renderedLineWrapped;\n                }\n            }\n        }\n        // do a second pass to render exact lines\n        const renderedLineExact = this._renderOne(ctx, true);\n        for (const cursorLineNumber of this._cursorLineNumbers) {\n            if (cursorLineNumber < visibleStartLineNumber || cursorLineNumber > visibleEndLineNumber) {\n                continue;\n            }\n            const lineIndex = cursorLineNumber - visibleStartLineNumber;\n            renderData[lineIndex] = renderedLineExact;\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx, exact) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-both' : '') + (exact ? ' current-line-exact' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx, exact) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '') + (this._shouldRenderInMargin() && exact ? ' current-line-exact-margin' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line-exact { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (isHighContrast(theme.type)) {\n                collector.addRule(`.monaco-editor .view-overlays .current-line-exact { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}