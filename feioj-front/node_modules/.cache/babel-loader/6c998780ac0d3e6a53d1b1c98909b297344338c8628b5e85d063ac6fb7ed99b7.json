{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nvar _a;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport const LANGUAGE_DEFAULT = 'en';\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isElectron = false;\nlet _isIOS = false;\nlet _isCI = false;\nlet _isMobile = false;\nlet _locale = undefined;\nlet _language = LANGUAGE_DEFAULT;\nlet _platformLocale = LANGUAGE_DEFAULT;\nlet _translationsConfigFile = undefined;\nlet _userAgent = undefined;\nconst $globalThis = globalThis;\nlet nodeProcess = undefined;\nif (typeof $globalThis.vscode !== 'undefined' && typeof $globalThis.vscode.process !== 'undefined') {\n  // Native environment (sandboxed)\n  nodeProcess = $globalThis.vscode.process;\n} else if (typeof process !== 'undefined') {\n  // Native environment (non-sandboxed)\n  nodeProcess = process;\n}\nconst isElectronProcess = typeof ((_a = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _a === void 0 ? void 0 : _a.electron) === 'string';\nconst isElectronRenderer = isElectronProcess && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.type) === 'renderer';\n// Native environment\nif (typeof nodeProcess === 'object') {\n  _isWindows = nodeProcess.platform === 'win32';\n  _isMacintosh = nodeProcess.platform === 'darwin';\n  _isLinux = nodeProcess.platform === 'linux';\n  _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n  _isElectron = isElectronProcess;\n  _isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];\n  _locale = LANGUAGE_DEFAULT;\n  _language = LANGUAGE_DEFAULT;\n  const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n  if (rawNlsConfig) {\n    try {\n      const nlsConfig = JSON.parse(rawNlsConfig);\n      const resolved = nlsConfig.availableLanguages['*'];\n      _locale = nlsConfig.locale;\n      _platformLocale = nlsConfig.osLocale;\n      // VSCode's default language is 'en'\n      _language = resolved ? resolved : LANGUAGE_DEFAULT;\n      _translationsConfigFile = nlsConfig._translationsConfigFile;\n    } catch (e) {}\n  }\n  _isNative = true;\n}\n// Web environment\nelse if (typeof navigator === 'object' && !isElectronRenderer) {\n  _userAgent = navigator.userAgent;\n  _isWindows = _userAgent.indexOf('Windows') >= 0;\n  _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n  _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n  _isLinux = _userAgent.indexOf('Linux') >= 0;\n  _isMobile = (_userAgent === null || _userAgent === void 0 ? void 0 : _userAgent.indexOf('Mobi')) >= 0;\n  _isWeb = true;\n  const configuredLocale = nls.getConfiguredDefaultLocale(\n  // This call _must_ be done in the file that calls `nls.getConfiguredDefaultLocale`\n  // to ensure that the NLS AMD Loader plugin has been loaded and configured.\n  // This is because the loader plugin decides what the default locale is based on\n  // how it's able to resolve the strings.\n  nls.localize({\n    key: 'ensureLoaderPluginIsLoaded',\n    comment: ['{Locked}']\n  }, '_'));\n  _locale = configuredLocale || LANGUAGE_DEFAULT;\n  _language = _locale;\n  _platformLocale = navigator.language;\n}\n// Unknown environment\nelse {\n  console.error('Unable to resolve platform.');\n}\nlet _platform = 0 /* Platform.Web */;\nif (_isMacintosh) {\n  _platform = 1 /* Platform.Mac */;\n} else if (_isWindows) {\n  _platform = 3 /* Platform.Windows */;\n} else if (_isLinux) {\n  _platform = 2 /* Platform.Linux */;\n}\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isNative = _isNative;\nexport const isWeb = _isWeb;\nexport const isWebWorker = _isWeb && typeof $globalThis.importScripts === 'function';\nexport const webWorkerOrigin = isWebWorker ? $globalThis.origin : undefined;\nexport const isIOS = _isIOS;\nexport const isMobile = _isMobile;\nexport const userAgent = _userAgent;\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\nexport const language = _language;\nexport const setTimeout0IsFaster = typeof $globalThis.postMessage === 'function' && !$globalThis.importScripts;\n/**\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\n *\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\n * that browsers set when the nesting level is > 5.\n */\nexport const setTimeout0 = (() => {\n  if (setTimeout0IsFaster) {\n    const pending = [];\n    $globalThis.addEventListener('message', e => {\n      if (e.data && e.data.vscodeScheduleAsyncWork) {\n        for (let i = 0, len = pending.length; i < len; i++) {\n          const candidate = pending[i];\n          if (candidate.id === e.data.vscodeScheduleAsyncWork) {\n            pending.splice(i, 1);\n            candidate.callback();\n            return;\n          }\n        }\n      }\n    });\n    let lastId = 0;\n    return callback => {\n      const myId = ++lastId;\n      pending.push({\n        id: myId,\n        callback: callback\n      });\n      $globalThis.postMessage({\n        vscodeScheduleAsyncWork: myId\n      }, '*');\n    };\n  }\n  return callback => setTimeout(callback);\n})();\nexport const OS = _isMacintosh || _isIOS ? 2 /* OperatingSystem.Macintosh */ : _isWindows ? 1 /* OperatingSystem.Windows */ : 3 /* OperatingSystem.Linux */;\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nexport function isLittleEndian() {\n  if (!_isLittleEndianComputed) {\n    _isLittleEndianComputed = true;\n    const test = new Uint8Array(2);\n    test[0] = 1;\n    test[1] = 2;\n    const view = new Uint16Array(test.buffer);\n    _isLittleEndian = view[0] === (2 << 8) + 1;\n  }\n  return _isLittleEndian;\n}\nexport const isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\nexport const isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\nexport const isSafari = !!(!isChrome && userAgent && userAgent.indexOf('Safari') >= 0);\nexport const isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\nexport const isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);","map":{"version":3,"names":["_a","nls","LANGUAGE_DEFAULT","_isWindows","_isMacintosh","_isLinux","_isLinuxSnap","_isNative","_isWeb","_isElectron","_isIOS","_isCI","_isMobile","_locale","undefined","_language","_platformLocale","_translationsConfigFile","_userAgent","$globalThis","globalThis","nodeProcess","vscode","process","isElectronProcess","versions","electron","isElectronRenderer","type","platform","env","rawNlsConfig","nlsConfig","JSON","parse","resolved","availableLanguages","locale","osLocale","e","navigator","userAgent","indexOf","maxTouchPoints","configuredLocale","getConfiguredDefaultLocale","localize","key","comment","language","console","error","_platform","isWindows","isMacintosh","isLinux","isNative","isWeb","isWebWorker","importScripts","webWorkerOrigin","origin","isIOS","isMobile","setTimeout0IsFaster","postMessage","setTimeout0","pending","addEventListener","data","vscodeScheduleAsyncWork","i","len","length","candidate","id","splice","callback","lastId","myId","push","setTimeout","OS","_isLittleEndian","_isLittleEndianComputed","isLittleEndian","test","Uint8Array","view","Uint16Array","buffer","isChrome","isFirefox","isSafari","isEdge","isAndroid"],"sources":["D:/yupi/OJ System/OJ System/feioj-front/node_modules/monaco-editor/esm/vs/base/common/platform.js"],"sourcesContent":["var _a;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport const LANGUAGE_DEFAULT = 'en';\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isElectron = false;\nlet _isIOS = false;\nlet _isCI = false;\nlet _isMobile = false;\nlet _locale = undefined;\nlet _language = LANGUAGE_DEFAULT;\nlet _platformLocale = LANGUAGE_DEFAULT;\nlet _translationsConfigFile = undefined;\nlet _userAgent = undefined;\nconst $globalThis = globalThis;\nlet nodeProcess = undefined;\nif (typeof $globalThis.vscode !== 'undefined' && typeof $globalThis.vscode.process !== 'undefined') {\n    // Native environment (sandboxed)\n    nodeProcess = $globalThis.vscode.process;\n}\nelse if (typeof process !== 'undefined') {\n    // Native environment (non-sandboxed)\n    nodeProcess = process;\n}\nconst isElectronProcess = typeof ((_a = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _a === void 0 ? void 0 : _a.electron) === 'string';\nconst isElectronRenderer = isElectronProcess && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.type) === 'renderer';\n// Native environment\nif (typeof nodeProcess === 'object') {\n    _isWindows = (nodeProcess.platform === 'win32');\n    _isMacintosh = (nodeProcess.platform === 'darwin');\n    _isLinux = (nodeProcess.platform === 'linux');\n    _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n    _isElectron = isElectronProcess;\n    _isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];\n    _locale = LANGUAGE_DEFAULT;\n    _language = LANGUAGE_DEFAULT;\n    const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n    if (rawNlsConfig) {\n        try {\n            const nlsConfig = JSON.parse(rawNlsConfig);\n            const resolved = nlsConfig.availableLanguages['*'];\n            _locale = nlsConfig.locale;\n            _platformLocale = nlsConfig.osLocale;\n            // VSCode's default language is 'en'\n            _language = resolved ? resolved : LANGUAGE_DEFAULT;\n            _translationsConfigFile = nlsConfig._translationsConfigFile;\n        }\n        catch (e) {\n        }\n    }\n    _isNative = true;\n}\n// Web environment\nelse if (typeof navigator === 'object' && !isElectronRenderer) {\n    _userAgent = navigator.userAgent;\n    _isWindows = _userAgent.indexOf('Windows') >= 0;\n    _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n    _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n    _isLinux = _userAgent.indexOf('Linux') >= 0;\n    _isMobile = (_userAgent === null || _userAgent === void 0 ? void 0 : _userAgent.indexOf('Mobi')) >= 0;\n    _isWeb = true;\n    const configuredLocale = nls.getConfiguredDefaultLocale(\n    // This call _must_ be done in the file that calls `nls.getConfiguredDefaultLocale`\n    // to ensure that the NLS AMD Loader plugin has been loaded and configured.\n    // This is because the loader plugin decides what the default locale is based on\n    // how it's able to resolve the strings.\n    nls.localize({ key: 'ensureLoaderPluginIsLoaded', comment: ['{Locked}'] }, '_'));\n    _locale = configuredLocale || LANGUAGE_DEFAULT;\n    _language = _locale;\n    _platformLocale = navigator.language;\n}\n// Unknown environment\nelse {\n    console.error('Unable to resolve platform.');\n}\nlet _platform = 0 /* Platform.Web */;\nif (_isMacintosh) {\n    _platform = 1 /* Platform.Mac */;\n}\nelse if (_isWindows) {\n    _platform = 3 /* Platform.Windows */;\n}\nelse if (_isLinux) {\n    _platform = 2 /* Platform.Linux */;\n}\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isNative = _isNative;\nexport const isWeb = _isWeb;\nexport const isWebWorker = (_isWeb && typeof $globalThis.importScripts === 'function');\nexport const webWorkerOrigin = isWebWorker ? $globalThis.origin : undefined;\nexport const isIOS = _isIOS;\nexport const isMobile = _isMobile;\nexport const userAgent = _userAgent;\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\nexport const language = _language;\nexport const setTimeout0IsFaster = (typeof $globalThis.postMessage === 'function' && !$globalThis.importScripts);\n/**\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\n *\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\n * that browsers set when the nesting level is > 5.\n */\nexport const setTimeout0 = (() => {\n    if (setTimeout0IsFaster) {\n        const pending = [];\n        $globalThis.addEventListener('message', (e) => {\n            if (e.data && e.data.vscodeScheduleAsyncWork) {\n                for (let i = 0, len = pending.length; i < len; i++) {\n                    const candidate = pending[i];\n                    if (candidate.id === e.data.vscodeScheduleAsyncWork) {\n                        pending.splice(i, 1);\n                        candidate.callback();\n                        return;\n                    }\n                }\n            }\n        });\n        let lastId = 0;\n        return (callback) => {\n            const myId = ++lastId;\n            pending.push({\n                id: myId,\n                callback: callback\n            });\n            $globalThis.postMessage({ vscodeScheduleAsyncWork: myId }, '*');\n        };\n    }\n    return (callback) => setTimeout(callback);\n})();\nexport const OS = (_isMacintosh || _isIOS ? 2 /* OperatingSystem.Macintosh */ : (_isWindows ? 1 /* OperatingSystem.Windows */ : 3 /* OperatingSystem.Linux */));\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nexport function isLittleEndian() {\n    if (!_isLittleEndianComputed) {\n        _isLittleEndianComputed = true;\n        const test = new Uint8Array(2);\n        test[0] = 1;\n        test[1] = 2;\n        const view = new Uint16Array(test.buffer);\n        _isLittleEndian = (view[0] === (2 << 8) + 1);\n    }\n    return _isLittleEndian;\n}\nexport const isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\nexport const isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\nexport const isSafari = !!(!isChrome && (userAgent && userAgent.indexOf('Safari') >= 0));\nexport const isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\nexport const isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}