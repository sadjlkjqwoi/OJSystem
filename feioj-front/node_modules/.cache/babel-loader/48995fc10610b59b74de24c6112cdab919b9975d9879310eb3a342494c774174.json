{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { derived } from '../../../../../base/common/observable.js';\nimport { MovedBlocksLinesFeature } from '../features/movedBlocksLinesFeature.js';\nimport { diffAddDecoration, diffAddDecorationEmpty, diffDeleteDecoration, diffDeleteDecorationEmpty, diffLineAddDecorationBackground, diffLineAddDecorationBackgroundWithIndicator, diffLineDeleteDecorationBackground, diffLineDeleteDecorationBackgroundWithIndicator, diffWholeLineAddDecoration, diffWholeLineDeleteDecoration } from '../registrations.contribution.js';\nimport { applyObservableDecorations } from '../utils.js';\nexport class DiffEditorDecorations extends Disposable {\n  constructor(_editors, _diffModel, _options, widget) {\n    super();\n    this._editors = _editors;\n    this._diffModel = _diffModel;\n    this._options = _options;\n    this._decorations = derived(this, reader => {\n      var _a;\n      const diff = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.diff.read(reader);\n      if (!diff) {\n        return null;\n      }\n      const movedTextToCompare = this._diffModel.read(reader).movedTextToCompare.read(reader);\n      const renderIndicators = this._options.renderIndicators.read(reader);\n      const showEmptyDecorations = this._options.showEmptyDecorations.read(reader);\n      const originalDecorations = [];\n      const modifiedDecorations = [];\n      if (!movedTextToCompare) {\n        for (const m of diff.mappings) {\n          if (!m.lineRangeMapping.original.isEmpty) {\n            originalDecorations.push({\n              range: m.lineRangeMapping.original.toInclusiveRange(),\n              options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground\n            });\n          }\n          if (!m.lineRangeMapping.modified.isEmpty) {\n            modifiedDecorations.push({\n              range: m.lineRangeMapping.modified.toInclusiveRange(),\n              options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground\n            });\n          }\n          if (m.lineRangeMapping.modified.isEmpty || m.lineRangeMapping.original.isEmpty) {\n            if (!m.lineRangeMapping.original.isEmpty) {\n              originalDecorations.push({\n                range: m.lineRangeMapping.original.toInclusiveRange(),\n                options: diffWholeLineDeleteDecoration\n              });\n            }\n            if (!m.lineRangeMapping.modified.isEmpty) {\n              modifiedDecorations.push({\n                range: m.lineRangeMapping.modified.toInclusiveRange(),\n                options: diffWholeLineAddDecoration\n              });\n            }\n          } else {\n            for (const i of m.lineRangeMapping.innerChanges || []) {\n              // Don't show empty markers outside the line range\n              if (m.lineRangeMapping.original.contains(i.originalRange.startLineNumber)) {\n                originalDecorations.push({\n                  range: i.originalRange,\n                  options: i.originalRange.isEmpty() && showEmptyDecorations ? diffDeleteDecorationEmpty : diffDeleteDecoration\n                });\n              }\n              if (m.lineRangeMapping.modified.contains(i.modifiedRange.startLineNumber)) {\n                modifiedDecorations.push({\n                  range: i.modifiedRange,\n                  options: i.modifiedRange.isEmpty() && showEmptyDecorations ? diffAddDecorationEmpty : diffAddDecoration\n                });\n              }\n            }\n          }\n        }\n      }\n      if (movedTextToCompare) {\n        for (const m of movedTextToCompare.changes) {\n          const fullRangeOriginal = m.original.toInclusiveRange();\n          if (fullRangeOriginal) {\n            originalDecorations.push({\n              range: fullRangeOriginal,\n              options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground\n            });\n          }\n          const fullRangeModified = m.modified.toInclusiveRange();\n          if (fullRangeModified) {\n            modifiedDecorations.push({\n              range: fullRangeModified,\n              options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground\n            });\n          }\n          for (const i of m.innerChanges || []) {\n            originalDecorations.push({\n              range: i.originalRange,\n              options: diffDeleteDecoration\n            });\n            modifiedDecorations.push({\n              range: i.modifiedRange,\n              options: diffAddDecoration\n            });\n          }\n        }\n      }\n      const activeMovedText = this._diffModel.read(reader).activeMovedText.read(reader);\n      for (const m of diff.movedTexts) {\n        originalDecorations.push({\n          range: m.lineRangeMapping.original.toInclusiveRange(),\n          options: {\n            description: 'moved',\n            blockClassName: 'movedOriginal' + (m === activeMovedText ? ' currentMove' : ''),\n            blockPadding: [MovedBlocksLinesFeature.movedCodeBlockPadding, 0, MovedBlocksLinesFeature.movedCodeBlockPadding, MovedBlocksLinesFeature.movedCodeBlockPadding]\n          }\n        });\n        modifiedDecorations.push({\n          range: m.lineRangeMapping.modified.toInclusiveRange(),\n          options: {\n            description: 'moved',\n            blockClassName: 'movedModified' + (m === activeMovedText ? ' currentMove' : ''),\n            blockPadding: [4, 0, 4, 4]\n          }\n        });\n      }\n      return {\n        originalDecorations,\n        modifiedDecorations\n      };\n    });\n    this._register(applyObservableDecorations(this._editors.original, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.originalDecorations) || [])));\n    this._register(applyObservableDecorations(this._editors.modified, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.modifiedDecorations) || [])));\n  }\n}","map":{"version":3,"names":["Disposable","derived","MovedBlocksLinesFeature","diffAddDecoration","diffAddDecorationEmpty","diffDeleteDecoration","diffDeleteDecorationEmpty","diffLineAddDecorationBackground","diffLineAddDecorationBackgroundWithIndicator","diffLineDeleteDecorationBackground","diffLineDeleteDecorationBackgroundWithIndicator","diffWholeLineAddDecoration","diffWholeLineDeleteDecoration","applyObservableDecorations","DiffEditorDecorations","constructor","_editors","_diffModel","_options","widget","_decorations","reader","_a","diff","read","movedTextToCompare","renderIndicators","showEmptyDecorations","originalDecorations","modifiedDecorations","m","mappings","lineRangeMapping","original","isEmpty","push","range","toInclusiveRange","options","modified","i","innerChanges","contains","originalRange","startLineNumber","modifiedRange","changes","fullRangeOriginal","fullRangeModified","activeMovedText","movedTexts","description","blockClassName","blockPadding","movedCodeBlockPadding","_register","map","d"],"sources":["D:/PersonalFiles/yupi/OJSystem/OJSystem/feioj-front/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditor/components/diffEditorDecorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { derived } from '../../../../../base/common/observable.js';\nimport { MovedBlocksLinesFeature } from '../features/movedBlocksLinesFeature.js';\nimport { diffAddDecoration, diffAddDecorationEmpty, diffDeleteDecoration, diffDeleteDecorationEmpty, diffLineAddDecorationBackground, diffLineAddDecorationBackgroundWithIndicator, diffLineDeleteDecorationBackground, diffLineDeleteDecorationBackgroundWithIndicator, diffWholeLineAddDecoration, diffWholeLineDeleteDecoration } from '../registrations.contribution.js';\nimport { applyObservableDecorations } from '../utils.js';\nexport class DiffEditorDecorations extends Disposable {\n    constructor(_editors, _diffModel, _options, widget) {\n        super();\n        this._editors = _editors;\n        this._diffModel = _diffModel;\n        this._options = _options;\n        this._decorations = derived(this, (reader) => {\n            var _a;\n            const diff = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.diff.read(reader);\n            if (!diff) {\n                return null;\n            }\n            const movedTextToCompare = this._diffModel.read(reader).movedTextToCompare.read(reader);\n            const renderIndicators = this._options.renderIndicators.read(reader);\n            const showEmptyDecorations = this._options.showEmptyDecorations.read(reader);\n            const originalDecorations = [];\n            const modifiedDecorations = [];\n            if (!movedTextToCompare) {\n                for (const m of diff.mappings) {\n                    if (!m.lineRangeMapping.original.isEmpty) {\n                        originalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange(), options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n                    }\n                    if (!m.lineRangeMapping.modified.isEmpty) {\n                        modifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange(), options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n                    }\n                    if (m.lineRangeMapping.modified.isEmpty || m.lineRangeMapping.original.isEmpty) {\n                        if (!m.lineRangeMapping.original.isEmpty) {\n                            originalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange(), options: diffWholeLineDeleteDecoration });\n                        }\n                        if (!m.lineRangeMapping.modified.isEmpty) {\n                            modifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange(), options: diffWholeLineAddDecoration });\n                        }\n                    }\n                    else {\n                        for (const i of m.lineRangeMapping.innerChanges || []) {\n                            // Don't show empty markers outside the line range\n                            if (m.lineRangeMapping.original.contains(i.originalRange.startLineNumber)) {\n                                originalDecorations.push({ range: i.originalRange, options: (i.originalRange.isEmpty() && showEmptyDecorations) ? diffDeleteDecorationEmpty : diffDeleteDecoration });\n                            }\n                            if (m.lineRangeMapping.modified.contains(i.modifiedRange.startLineNumber)) {\n                                modifiedDecorations.push({ range: i.modifiedRange, options: (i.modifiedRange.isEmpty() && showEmptyDecorations) ? diffAddDecorationEmpty : diffAddDecoration });\n                            }\n                        }\n                    }\n                }\n            }\n            if (movedTextToCompare) {\n                for (const m of movedTextToCompare.changes) {\n                    const fullRangeOriginal = m.original.toInclusiveRange();\n                    if (fullRangeOriginal) {\n                        originalDecorations.push({ range: fullRangeOriginal, options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n                    }\n                    const fullRangeModified = m.modified.toInclusiveRange();\n                    if (fullRangeModified) {\n                        modifiedDecorations.push({ range: fullRangeModified, options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n                    }\n                    for (const i of m.innerChanges || []) {\n                        originalDecorations.push({ range: i.originalRange, options: diffDeleteDecoration });\n                        modifiedDecorations.push({ range: i.modifiedRange, options: diffAddDecoration });\n                    }\n                }\n            }\n            const activeMovedText = this._diffModel.read(reader).activeMovedText.read(reader);\n            for (const m of diff.movedTexts) {\n                originalDecorations.push({\n                    range: m.lineRangeMapping.original.toInclusiveRange(), options: {\n                        description: 'moved',\n                        blockClassName: 'movedOriginal' + (m === activeMovedText ? ' currentMove' : ''),\n                        blockPadding: [MovedBlocksLinesFeature.movedCodeBlockPadding, 0, MovedBlocksLinesFeature.movedCodeBlockPadding, MovedBlocksLinesFeature.movedCodeBlockPadding],\n                    }\n                });\n                modifiedDecorations.push({\n                    range: m.lineRangeMapping.modified.toInclusiveRange(), options: {\n                        description: 'moved',\n                        blockClassName: 'movedModified' + (m === activeMovedText ? ' currentMove' : ''),\n                        blockPadding: [4, 0, 4, 4],\n                    }\n                });\n            }\n            return { originalDecorations, modifiedDecorations };\n        });\n        this._register(applyObservableDecorations(this._editors.original, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.originalDecorations) || [])));\n        this._register(applyObservableDecorations(this._editors.modified, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.modifiedDecorations) || [])));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}