{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, observableSignal, observableSignalFromEvent, observableValue, transaction, waitForState } from '../../../../base/common/observable.js';\nimport { IDiffProviderFactoryService } from './diffProviderFactoryService.js';\nimport { filterWithPrevious, readHotReloadableExport } from './utils.js';\nimport { LineRange, LineRangeSet } from '../../../common/core/lineRange.js';\nimport { DefaultLinesDiffComputer } from '../../../common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js';\nimport { DetailedLineRangeMapping, LineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { TextEditInfo } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js';\nimport { combineTextEditInfos } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos.js';\nimport { optimizeSequenceDiffs } from '../../../common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { groupAdjacentBy } from '../../../../base/common/arrays.js';\nimport { softAssert } from '../../../../base/common/assert.js';\nlet DiffEditorViewModel = class DiffEditorViewModel extends Disposable {\n  setActiveMovedText(movedText) {\n    this._activeMovedText.set(movedText, undefined);\n  }\n  constructor(model, _options, _diffProviderFactoryService) {\n    super();\n    this.model = model;\n    this._options = _options;\n    this._diffProviderFactoryService = _diffProviderFactoryService;\n    this._isDiffUpToDate = observableValue(this, false);\n    this.isDiffUpToDate = this._isDiffUpToDate;\n    this._diff = observableValue(this, undefined);\n    this.diff = this._diff;\n    this._unchangedRegions = observableValue(this, undefined);\n    this.unchangedRegions = derived(this, r => {\n      var _a, _b;\n      if (this._options.hideUnchangedRegions.read(r)) {\n        return (_b = (_a = this._unchangedRegions.read(r)) === null || _a === void 0 ? void 0 : _a.regions) !== null && _b !== void 0 ? _b : [];\n      } else {\n        // Reset state\n        transaction(tx => {\n          var _a;\n          for (const r of ((_a = this._unchangedRegions.get()) === null || _a === void 0 ? void 0 : _a.regions) || []) {\n            r.collapseAll(tx);\n          }\n        });\n        return [];\n      }\n    });\n    this.movedTextToCompare = observableValue(this, undefined);\n    this._activeMovedText = observableValue(this, undefined);\n    this._hoveredMovedText = observableValue(this, undefined);\n    this.activeMovedText = derived(this, r => {\n      var _a, _b;\n      return (_b = (_a = this.movedTextToCompare.read(r)) !== null && _a !== void 0 ? _a : this._hoveredMovedText.read(r)) !== null && _b !== void 0 ? _b : this._activeMovedText.read(r);\n    });\n    this._cancellationTokenSource = new CancellationTokenSource();\n    this._diffProvider = derived(this, reader => {\n      const diffProvider = this._diffProviderFactoryService.createDiffProvider({\n        diffAlgorithm: this._options.diffAlgorithm.read(reader)\n      });\n      const onChangeSignal = observableSignalFromEvent('onDidChange', diffProvider.onDidChange);\n      return {\n        diffProvider,\n        onChangeSignal\n      };\n    });\n    this._register(toDisposable(() => this._cancellationTokenSource.cancel()));\n    const contentChangedSignal = observableSignal('contentChangedSignal');\n    const debouncer = this._register(new RunOnceScheduler(() => contentChangedSignal.trigger(undefined), 200));\n    this._register(autorun(reader => {\n      /** @description collapse touching unchanged ranges */\n      const lastUnchangedRegions = this._unchangedRegions.read(reader);\n      if (!lastUnchangedRegions || lastUnchangedRegions.regions.some(r => r.isDragged.read(reader))) {\n        return;\n      }\n      const lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds.map(id => model.original.getDecorationRange(id)).map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n      const lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds.map(id => model.modified.getDecorationRange(id)).map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n      const updatedLastUnchangedRegions = lastUnchangedRegions.regions.map((r, idx) => !lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx] ? undefined : new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, lastUnchangedRegionsOrigRanges[idx].length, r.visibleLineCountTop.read(reader), r.visibleLineCountBottom.read(reader))).filter(isDefined);\n      const newRanges = [];\n      let didChange = false;\n      for (const touching of groupAdjacentBy(updatedLastUnchangedRegions, (a, b) => a.getHiddenModifiedRange(reader).endLineNumberExclusive === b.getHiddenModifiedRange(reader).startLineNumber)) {\n        if (touching.length > 1) {\n          didChange = true;\n          const sumLineCount = touching.reduce((sum, r) => sum + r.lineCount, 0);\n          const r = new UnchangedRegion(touching[0].originalLineNumber, touching[0].modifiedLineNumber, sumLineCount, touching[0].visibleLineCountTop.get(), touching[touching.length - 1].visibleLineCountBottom.get());\n          newRanges.push(r);\n        } else {\n          newRanges.push(touching[0]);\n        }\n      }\n      if (didChange) {\n        const originalDecorationIds = model.original.deltaDecorations(lastUnchangedRegions.originalDecorationIds, newRanges.map(r => ({\n          range: r.originalUnchangedRange.toInclusiveRange(),\n          options: {\n            description: 'unchanged'\n          }\n        })));\n        const modifiedDecorationIds = model.modified.deltaDecorations(lastUnchangedRegions.modifiedDecorationIds, newRanges.map(r => ({\n          range: r.modifiedUnchangedRange.toInclusiveRange(),\n          options: {\n            description: 'unchanged'\n          }\n        })));\n        transaction(tx => {\n          this._unchangedRegions.set({\n            regions: newRanges,\n            originalDecorationIds,\n            modifiedDecorationIds\n          }, tx);\n        });\n      }\n    }));\n    const updateUnchangedRegions = (result, tx, reader) => {\n      const newUnchangedRegions = UnchangedRegion.fromDiffs(result.changes, model.original.getLineCount(), model.modified.getLineCount(), this._options.hideUnchangedRegionsMinimumLineCount.read(reader), this._options.hideUnchangedRegionsContextLineCount.read(reader));\n      // Transfer state from cur state\n      let visibleRegions = undefined;\n      const lastUnchangedRegions = this._unchangedRegions.get();\n      if (lastUnchangedRegions) {\n        const lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds.map(id => model.original.getDecorationRange(id)).map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n        const lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds.map(id => model.modified.getDecorationRange(id)).map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n        const updatedLastUnchangedRegions = filterWithPrevious(lastUnchangedRegions.regions.map((r, idx) => {\n          if (!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) {\n            return undefined;\n          }\n          const length = lastUnchangedRegionsOrigRanges[idx].length;\n          return new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, length,\n          // The visible area can shrink by edits -> we have to account for this\n          Math.min(r.visibleLineCountTop.get(), length), Math.min(r.visibleLineCountBottom.get(), length - r.visibleLineCountTop.get()));\n        }).filter(isDefined), (cur, prev) => !prev || cur.modifiedLineNumber >= prev.modifiedLineNumber + prev.lineCount && cur.originalLineNumber >= prev.originalLineNumber + prev.lineCount);\n        let hiddenRegions = updatedLastUnchangedRegions.map(r => new LineRangeMapping(r.getHiddenOriginalRange(reader), r.getHiddenModifiedRange(reader)));\n        hiddenRegions = LineRangeMapping.clip(hiddenRegions, LineRange.ofLength(1, model.original.getLineCount()), LineRange.ofLength(1, model.modified.getLineCount()));\n        visibleRegions = LineRangeMapping.inverse(hiddenRegions, model.original.getLineCount(), model.modified.getLineCount());\n      }\n      const newUnchangedRegions2 = [];\n      if (visibleRegions) {\n        for (const r of newUnchangedRegions) {\n          const intersecting = visibleRegions.filter(f => f.original.intersectsStrict(r.originalUnchangedRange) && f.modified.intersectsStrict(r.modifiedUnchangedRange));\n          newUnchangedRegions2.push(...r.setVisibleRanges(intersecting, tx));\n        }\n      } else {\n        newUnchangedRegions2.push(...newUnchangedRegions);\n      }\n      const originalDecorationIds = model.original.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.originalDecorationIds) || [], newUnchangedRegions2.map(r => ({\n        range: r.originalUnchangedRange.toInclusiveRange(),\n        options: {\n          description: 'unchanged'\n        }\n      })));\n      const modifiedDecorationIds = model.modified.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.modifiedDecorationIds) || [], newUnchangedRegions2.map(r => ({\n        range: r.modifiedUnchangedRange.toInclusiveRange(),\n        options: {\n          description: 'unchanged'\n        }\n      })));\n      this._unchangedRegions.set({\n        regions: newUnchangedRegions2,\n        originalDecorationIds,\n        modifiedDecorationIds\n      }, tx);\n    };\n    this._register(model.modified.onDidChangeContent(e => {\n      const diff = this._diff.get();\n      if (diff) {\n        const textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n        const result = applyModifiedEdits(this._lastDiff, textEdits, model.original, model.modified);\n        if (result) {\n          this._lastDiff = result;\n          transaction(tx => {\n            this._diff.set(DiffState.fromDiffResult(this._lastDiff), tx);\n            updateUnchangedRegions(result, tx);\n            const currentSyncedMovedText = this.movedTextToCompare.get();\n            this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n          });\n        }\n      }\n      this._isDiffUpToDate.set(false, undefined);\n      debouncer.schedule();\n    }));\n    this._register(model.original.onDidChangeContent(e => {\n      const diff = this._diff.get();\n      if (diff) {\n        const textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n        const result = applyOriginalEdits(this._lastDiff, textEdits, model.original, model.modified);\n        if (result) {\n          this._lastDiff = result;\n          transaction(tx => {\n            this._diff.set(DiffState.fromDiffResult(this._lastDiff), tx);\n            updateUnchangedRegions(result, tx);\n            const currentSyncedMovedText = this.movedTextToCompare.get();\n            this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n          });\n        }\n      }\n      this._isDiffUpToDate.set(false, undefined);\n      debouncer.schedule();\n    }));\n    this._register(autorunWithStore(async (reader, store) => {\n      /** @description compute diff */\n      var _a, _b;\n      // So that they get recomputed when these settings change\n      this._options.hideUnchangedRegionsMinimumLineCount.read(reader);\n      this._options.hideUnchangedRegionsContextLineCount.read(reader);\n      debouncer.cancel();\n      contentChangedSignal.read(reader);\n      const documentDiffProvider = this._diffProvider.read(reader);\n      documentDiffProvider.onChangeSignal.read(reader);\n      readHotReloadableExport(DefaultLinesDiffComputer, reader);\n      readHotReloadableExport(optimizeSequenceDiffs, reader);\n      this._isDiffUpToDate.set(false, undefined);\n      let originalTextEditInfos = [];\n      store.add(model.original.onDidChangeContent(e => {\n        const edits = TextEditInfo.fromModelContentChanges(e.changes);\n        originalTextEditInfos = combineTextEditInfos(originalTextEditInfos, edits);\n      }));\n      let modifiedTextEditInfos = [];\n      store.add(model.modified.onDidChangeContent(e => {\n        const edits = TextEditInfo.fromModelContentChanges(e.changes);\n        modifiedTextEditInfos = combineTextEditInfos(modifiedTextEditInfos, edits);\n      }));\n      let result = await documentDiffProvider.diffProvider.computeDiff(model.original, model.modified, {\n        ignoreTrimWhitespace: this._options.ignoreTrimWhitespace.read(reader),\n        maxComputationTimeMs: this._options.maxComputationTimeMs.read(reader),\n        computeMoves: this._options.showMoves.read(reader)\n      }, this._cancellationTokenSource.token);\n      if (this._cancellationTokenSource.token.isCancellationRequested) {\n        return;\n      }\n      result = normalizeDocumentDiff(result, model.original, model.modified);\n      result = (_a = applyOriginalEdits(result, originalTextEditInfos, model.original, model.modified)) !== null && _a !== void 0 ? _a : result;\n      result = (_b = applyModifiedEdits(result, modifiedTextEditInfos, model.original, model.modified)) !== null && _b !== void 0 ? _b : result;\n      transaction(tx => {\n        /** @description write diff result */\n        updateUnchangedRegions(result, tx);\n        this._lastDiff = result;\n        const state = DiffState.fromDiffResult(result);\n        this._diff.set(state, tx);\n        this._isDiffUpToDate.set(true, tx);\n        const currentSyncedMovedText = this.movedTextToCompare.get();\n        this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n      });\n    }));\n  }\n  ensureModifiedLineIsVisible(lineNumber, preference, tx) {\n    var _a, _b;\n    if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n      return;\n    }\n    const unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n    for (const r of unchangedRegions) {\n      if (r.getHiddenModifiedRange(undefined).contains(lineNumber)) {\n        r.showModifiedLine(lineNumber, preference, tx);\n        return;\n      }\n    }\n  }\n  ensureOriginalLineIsVisible(lineNumber, preference, tx) {\n    var _a, _b;\n    if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n      return;\n    }\n    const unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n    for (const r of unchangedRegions) {\n      if (r.getHiddenOriginalRange(undefined).contains(lineNumber)) {\n        r.showOriginalLine(lineNumber, preference, tx);\n        return;\n      }\n    }\n  }\n  async waitForDiff() {\n    await waitForState(this.isDiffUpToDate, s => s);\n  }\n  serializeState() {\n    const regions = this._unchangedRegions.get();\n    return {\n      collapsedRegions: regions === null || regions === void 0 ? void 0 : regions.regions.map(r => ({\n        range: r.getHiddenModifiedRange(undefined).serialize()\n      }))\n    };\n  }\n  restoreSerializedState(state) {\n    var _a;\n    const ranges = (_a = state.collapsedRegions) === null || _a === void 0 ? void 0 : _a.map(r => LineRange.deserialize(r.range));\n    const regions = this._unchangedRegions.get();\n    if (!regions || !ranges) {\n      return;\n    }\n    transaction(tx => {\n      for (const r of regions.regions) {\n        for (const range of ranges) {\n          if (r.modifiedUnchangedRange.intersect(range)) {\n            r.setHiddenModifiedRange(range, tx);\n            break;\n          }\n        }\n      }\n    });\n  }\n};\nDiffEditorViewModel = __decorate([__param(2, IDiffProviderFactoryService)], DiffEditorViewModel);\nexport { DiffEditorViewModel };\nfunction normalizeDocumentDiff(diff, original, modified) {\n  return {\n    changes: diff.changes.map(c => new DetailedLineRangeMapping(c.original, c.modified, c.innerChanges ? c.innerChanges.map(i => normalizeRangeMapping(i, original, modified)) : undefined)),\n    moves: diff.moves,\n    identical: diff.identical,\n    quitEarly: diff.quitEarly\n  };\n}\nfunction normalizeRangeMapping(rangeMapping, original, modified) {\n  let originalRange = rangeMapping.originalRange;\n  let modifiedRange = rangeMapping.modifiedRange;\n  if ((originalRange.endColumn !== 1 || modifiedRange.endColumn !== 1) && originalRange.endColumn === original.getLineMaxColumn(originalRange.endLineNumber) && modifiedRange.endColumn === modified.getLineMaxColumn(modifiedRange.endLineNumber) && originalRange.endLineNumber < original.getLineCount() && modifiedRange.endLineNumber < modified.getLineCount()) {\n    originalRange = originalRange.setEndPosition(originalRange.endLineNumber + 1, 1);\n    modifiedRange = modifiedRange.setEndPosition(modifiedRange.endLineNumber + 1, 1);\n  }\n  return new RangeMapping(originalRange, modifiedRange);\n}\nexport class DiffState {\n  static fromDiffResult(result) {\n    return new DiffState(result.changes.map(c => new DiffMapping(c)), result.moves || [], result.identical, result.quitEarly);\n  }\n  constructor(mappings, movedTexts, identical, quitEarly) {\n    this.mappings = mappings;\n    this.movedTexts = movedTexts;\n    this.identical = identical;\n    this.quitEarly = quitEarly;\n  }\n}\nexport class DiffMapping {\n  constructor(lineRangeMapping) {\n    this.lineRangeMapping = lineRangeMapping;\n    /*\n    readonly movedTo: MovedText | undefined,\n    readonly movedFrom: MovedText | undefined,\n     if (movedTo) {\n        assertFn(() =>\n            movedTo.lineRangeMapping.modifiedRange.equals(lineRangeMapping.modifiedRange)\n            && lineRangeMapping.originalRange.isEmpty\n            && !movedFrom\n        );\n    } else if (movedFrom) {\n        assertFn(() =>\n            movedFrom.lineRangeMapping.originalRange.equals(lineRangeMapping.originalRange)\n            && lineRangeMapping.modifiedRange.isEmpty\n            && !movedTo\n        );\n    }\n    */\n  }\n}\nexport class UnchangedRegion {\n  static fromDiffs(changes, originalLineCount, modifiedLineCount, minHiddenLineCount, minContext) {\n    const inversedMappings = DetailedLineRangeMapping.inverse(changes, originalLineCount, modifiedLineCount);\n    const result = [];\n    for (const mapping of inversedMappings) {\n      let origStart = mapping.original.startLineNumber;\n      let modStart = mapping.modified.startLineNumber;\n      let length = mapping.original.length;\n      const atStart = origStart === 1 && modStart === 1;\n      const atEnd = origStart + length === originalLineCount + 1 && modStart + length === modifiedLineCount + 1;\n      if ((atStart || atEnd) && length >= minContext + minHiddenLineCount) {\n        if (atStart && !atEnd) {\n          length -= minContext;\n        }\n        if (atEnd && !atStart) {\n          origStart += minContext;\n          modStart += minContext;\n          length -= minContext;\n        }\n        result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n      } else if (length >= minContext * 2 + minHiddenLineCount) {\n        origStart += minContext;\n        modStart += minContext;\n        length -= minContext * 2;\n        result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n      }\n    }\n    return result;\n  }\n  get originalUnchangedRange() {\n    return LineRange.ofLength(this.originalLineNumber, this.lineCount);\n  }\n  get modifiedUnchangedRange() {\n    return LineRange.ofLength(this.modifiedLineNumber, this.lineCount);\n  }\n  constructor(originalLineNumber, modifiedLineNumber, lineCount, visibleLineCountTop, visibleLineCountBottom) {\n    this.originalLineNumber = originalLineNumber;\n    this.modifiedLineNumber = modifiedLineNumber;\n    this.lineCount = lineCount;\n    this._visibleLineCountTop = observableValue(this, 0);\n    this.visibleLineCountTop = this._visibleLineCountTop;\n    this._visibleLineCountBottom = observableValue(this, 0);\n    this.visibleLineCountBottom = this._visibleLineCountBottom;\n    this._shouldHideControls = derived(this, reader => /** @description isVisible */this.visibleLineCountTop.read(reader) + this.visibleLineCountBottom.read(reader) === this.lineCount && !this.isDragged.read(reader));\n    this.isDragged = observableValue(this, undefined);\n    const visibleLineCountTop2 = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n    const visibleLineCountBottom2 = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n    softAssert(visibleLineCountTop === visibleLineCountTop2);\n    softAssert(visibleLineCountBottom === visibleLineCountBottom2);\n    this._visibleLineCountTop.set(visibleLineCountTop2, undefined);\n    this._visibleLineCountBottom.set(visibleLineCountBottom2, undefined);\n  }\n  setVisibleRanges(visibleRanges, tx) {\n    const result = [];\n    const hiddenModified = new LineRangeSet(visibleRanges.map(r => r.modified)).subtractFrom(this.modifiedUnchangedRange);\n    let originalStartLineNumber = this.originalLineNumber;\n    let modifiedStartLineNumber = this.modifiedLineNumber;\n    const modifiedEndLineNumberEx = this.modifiedLineNumber + this.lineCount;\n    if (hiddenModified.ranges.length === 0) {\n      this.showAll(tx);\n      result.push(this);\n    } else {\n      let i = 0;\n      for (const r of hiddenModified.ranges) {\n        const isLast = i === hiddenModified.ranges.length - 1;\n        i++;\n        const length = (isLast ? modifiedEndLineNumberEx : r.endLineNumberExclusive) - modifiedStartLineNumber;\n        const newR = new UnchangedRegion(originalStartLineNumber, modifiedStartLineNumber, length, 0, 0);\n        newR.setHiddenModifiedRange(r, tx);\n        result.push(newR);\n        originalStartLineNumber = newR.originalUnchangedRange.endLineNumberExclusive;\n        modifiedStartLineNumber = newR.modifiedUnchangedRange.endLineNumberExclusive;\n      }\n    }\n    return result;\n  }\n  shouldHideControls(reader) {\n    return this._shouldHideControls.read(reader);\n  }\n  getHiddenOriginalRange(reader) {\n    return LineRange.ofLength(this.originalLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n  }\n  getHiddenModifiedRange(reader) {\n    return LineRange.ofLength(this.modifiedLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n  }\n  setHiddenModifiedRange(range, tx) {\n    const visibleLineCountTop = range.startLineNumber - this.modifiedLineNumber;\n    const visibleLineCountBottom = this.modifiedLineNumber + this.lineCount - range.endLineNumberExclusive;\n    this.setState(visibleLineCountTop, visibleLineCountBottom, tx);\n  }\n  getMaxVisibleLineCountTop() {\n    return this.lineCount - this._visibleLineCountBottom.get();\n  }\n  getMaxVisibleLineCountBottom() {\n    return this.lineCount - this._visibleLineCountTop.get();\n  }\n  showMoreAbove(count = 10, tx) {\n    const maxVisibleLineCountTop = this.getMaxVisibleLineCountTop();\n    this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + count, maxVisibleLineCountTop), tx);\n  }\n  showMoreBelow(count = 10, tx) {\n    const maxVisibleLineCountBottom = this.lineCount - this._visibleLineCountTop.get();\n    this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + count, maxVisibleLineCountBottom), tx);\n  }\n  showAll(tx) {\n    this._visibleLineCountBottom.set(this.lineCount - this._visibleLineCountTop.get(), tx);\n  }\n  showModifiedLine(lineNumber, preference, tx) {\n    const top = lineNumber + 1 - (this.modifiedLineNumber + this._visibleLineCountTop.get());\n    const bottom = this.modifiedLineNumber - this._visibleLineCountBottom.get() + this.lineCount - lineNumber;\n    if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n      this._visibleLineCountTop.set(this._visibleLineCountTop.get() + top, tx);\n    } else {\n      this._visibleLineCountBottom.set(this._visibleLineCountBottom.get() + bottom, tx);\n    }\n  }\n  showOriginalLine(lineNumber, preference, tx) {\n    const top = lineNumber - this.originalLineNumber;\n    const bottom = this.originalLineNumber + this.lineCount - lineNumber;\n    if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n      this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + bottom - top, this.getMaxVisibleLineCountTop()), tx);\n    } else {\n      this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + top - bottom, this.getMaxVisibleLineCountBottom()), tx);\n    }\n  }\n  collapseAll(tx) {\n    this._visibleLineCountTop.set(0, tx);\n    this._visibleLineCountBottom.set(0, tx);\n  }\n  setState(visibleLineCountTop, visibleLineCountBottom, tx) {\n    visibleLineCountTop = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n    visibleLineCountBottom = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n    this._visibleLineCountTop.set(visibleLineCountTop, tx);\n    this._visibleLineCountBottom.set(visibleLineCountBottom, tx);\n  }\n}\nfunction applyOriginalEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n  return undefined;\n  /*\n  TODO@hediet\n  if (textEdits.length === 0) {\n      return diff;\n  }\n   const diff2 = flip(diff);\n  const diff3 = applyModifiedEdits(diff2, textEdits, modifiedTextModel, originalTextModel);\n  if (!diff3) {\n      return undefined;\n  }\n  return flip(diff3);*/\n}\n/*\nfunction flip(diff: IDocumentDiff): IDocumentDiff {\n    return {\n        changes: diff.changes.map(c => c.flip()),\n        moves: diff.moves.map(m => m.flip()),\n        identical: diff.identical,\n        quitEarly: diff.quitEarly,\n    };\n}\n*/\nfunction applyModifiedEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n  return undefined;\n  /*\n  TODO@hediet\n  if (textEdits.length === 0) {\n      return diff;\n  }\n  if (diff.changes.some(c => !c.innerChanges) || diff.moves.length > 0) {\n      // TODO support these cases\n      return undefined;\n  }\n   const changes = applyModifiedEditsToLineRangeMappings(diff.changes, textEdits, originalTextModel, modifiedTextModel);\n   const moves = diff.moves.map(m => {\n      const newModifiedRange = applyEditToLineRange(m.lineRangeMapping.modified, textEdits);\n      return newModifiedRange ? new MovedText(\n          new SimpleLineRangeMapping(m.lineRangeMapping.original, newModifiedRange),\n          applyModifiedEditsToLineRangeMappings(m.changes, textEdits, originalTextModel, modifiedTextModel),\n      ) : undefined;\n  }).filter(isDefined);\n   return {\n      identical: false,\n      quitEarly: false,\n      changes,\n      moves,\n  };*/\n}\n/*\nfunction applyEditToLineRange(range: LineRange, textEdits: TextEditInfo[]): LineRange | undefined {\n    let rangeStartLineNumber = range.startLineNumber;\n    let rangeEndLineNumberEx = range.endLineNumberExclusive;\n\n    for (let i = textEdits.length - 1; i >= 0; i--) {\n        const textEdit = textEdits[i];\n        const textEditStartLineNumber = lengthGetLineCount(textEdit.startOffset) + 1;\n        const textEditEndLineNumber = lengthGetLineCount(textEdit.endOffset) + 1;\n        const newLengthLineCount = lengthGetLineCount(textEdit.newLength);\n        const delta = newLengthLineCount - (textEditEndLineNumber - textEditStartLineNumber);\n\n        if (textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit is before us\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (textEditStartLineNumber > rangeEndLineNumberEx) {\n            // the text edit is after us\n            // NOOP\n        } else if (textEditStartLineNumber < rangeStartLineNumber && rangeEndLineNumberEx < textEditEndLineNumber) {\n            // the range is fully contained in the text edit\n            return undefined;\n        } else if (textEditStartLineNumber < rangeStartLineNumber && textEditEndLineNumber <= rangeEndLineNumberEx) {\n            // the text edit ends inside our range\n            rangeStartLineNumber = textEditEndLineNumber + 1;\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (rangeStartLineNumber <= textEditStartLineNumber && textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit starts inside our range\n            rangeEndLineNumberEx = textEditStartLineNumber;\n        } else {\n            rangeEndLineNumberEx += delta;\n        }\n    }\n\n    return new LineRange(rangeStartLineNumber, rangeEndLineNumberEx);\n}\n\nfunction applyModifiedEditsToLineRangeMappings(changes: readonly LineRangeMapping[], textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): LineRangeMapping[] {\n    const diffTextEdits = changes.flatMap(c => c.innerChanges!.map(c => new TextEditInfo(\n        positionToLength(c.originalRange.getStartPosition()),\n        positionToLength(c.originalRange.getEndPosition()),\n        lengthOfRange(c.modifiedRange).toLength(),\n    )));\n\n    const combined = combineTextEditInfos(diffTextEdits, textEdits);\n\n    let lastOriginalEndOffset = lengthZero;\n    let lastModifiedEndOffset = lengthZero;\n    const rangeMappings = combined.map(c => {\n        const modifiedStartOffset = lengthAdd(lastModifiedEndOffset, lengthDiffNonNegative(lastOriginalEndOffset, c.startOffset));\n        lastOriginalEndOffset = c.endOffset;\n        lastModifiedEndOffset = lengthAdd(modifiedStartOffset, c.newLength);\n\n        return new RangeMapping(\n            Range.fromPositions(lengthToPosition(c.startOffset), lengthToPosition(c.endOffset)),\n            Range.fromPositions(lengthToPosition(modifiedStartOffset), lengthToPosition(lastModifiedEndOffset)),\n        );\n    });\n\n    const newChanges = lineRangeMappingFromRangeMappings(\n        rangeMappings,\n        originalTextModel.getLinesContent(),\n        modifiedTextModel.getLinesContent(),\n    );\n    return newChanges;\n}\n*/","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","RunOnceScheduler","CancellationTokenSource","Disposable","toDisposable","autorun","autorunWithStore","derived","observableSignal","observableSignalFromEvent","observableValue","transaction","waitForState","IDiffProviderFactoryService","filterWithPrevious","readHotReloadableExport","LineRange","LineRangeSet","DefaultLinesDiffComputer","DetailedLineRangeMapping","LineRangeMapping","RangeMapping","TextEditInfo","combineTextEditInfos","optimizeSequenceDiffs","isDefined","groupAdjacentBy","softAssert","DiffEditorViewModel","setActiveMovedText","movedText","_activeMovedText","set","undefined","constructor","model","_options","_diffProviderFactoryService","_isDiffUpToDate","isDiffUpToDate","_diff","diff","_unchangedRegions","unchangedRegions","_a","_b","hideUnchangedRegions","read","regions","tx","get","collapseAll","movedTextToCompare","_hoveredMovedText","activeMovedText","_cancellationTokenSource","_diffProvider","reader","diffProvider","createDiffProvider","diffAlgorithm","onChangeSignal","onDidChange","_register","cancel","contentChangedSignal","debouncer","trigger","lastUnchangedRegions","some","isDragged","lastUnchangedRegionsOrigRanges","originalDecorationIds","map","id","original","getDecorationRange","fromRangeInclusive","lastUnchangedRegionsModRanges","modifiedDecorationIds","modified","updatedLastUnchangedRegions","idx","UnchangedRegion","startLineNumber","visibleLineCountTop","visibleLineCountBottom","filter","newRanges","didChange","touching","a","b","getHiddenModifiedRange","endLineNumberExclusive","sumLineCount","reduce","sum","lineCount","originalLineNumber","modifiedLineNumber","push","deltaDecorations","range","originalUnchangedRange","toInclusiveRange","options","description","modifiedUnchangedRange","updateUnchangedRegions","result","newUnchangedRegions","fromDiffs","changes","getLineCount","hideUnchangedRegionsMinimumLineCount","hideUnchangedRegionsContextLineCount","visibleRegions","Math","min","cur","prev","hiddenRegions","getHiddenOriginalRange","clip","ofLength","inverse","newUnchangedRegions2","intersecting","f","intersectsStrict","setVisibleRanges","onDidChangeContent","e","textEdits","fromModelContentChanges","applyModifiedEdits","_lastDiff","DiffState","fromDiffResult","currentSyncedMovedText","moves","find","m","lineRangeMapping","intersect","schedule","applyOriginalEdits","store","documentDiffProvider","originalTextEditInfos","add","edits","modifiedTextEditInfos","computeDiff","ignoreTrimWhitespace","maxComputationTimeMs","computeMoves","showMoves","token","isCancellationRequested","normalizeDocumentDiff","state","ensureModifiedLineIsVisible","lineNumber","preference","mappings","contains","showModifiedLine","ensureOriginalLineIsVisible","showOriginalLine","waitForDiff","s","serializeState","collapsedRegions","serialize","restoreSerializedState","ranges","deserialize","setHiddenModifiedRange","innerChanges","normalizeRangeMapping","identical","quitEarly","rangeMapping","originalRange","modifiedRange","endColumn","getLineMaxColumn","endLineNumber","setEndPosition","DiffMapping","movedTexts","originalLineCount","modifiedLineCount","minHiddenLineCount","minContext","inversedMappings","mapping","origStart","modStart","atStart","atEnd","_visibleLineCountTop","_visibleLineCountBottom","_shouldHideControls","visibleLineCountTop2","max","visibleLineCountBottom2","visibleRanges","hiddenModified","subtractFrom","originalStartLineNumber","modifiedStartLineNumber","modifiedEndLineNumberEx","showAll","isLast","newR","shouldHideControls","setState","getMaxVisibleLineCountTop","getMaxVisibleLineCountBottom","showMoreAbove","count","maxVisibleLineCountTop","showMoreBelow","maxVisibleLineCountBottom","top","bottom","originalTextModel","modifiedTextModel"],"sources":["D:/yupi/OJ System/OJ System/feioj-front/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffEditorViewModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, observableSignal, observableSignalFromEvent, observableValue, transaction, waitForState } from '../../../../base/common/observable.js';\nimport { IDiffProviderFactoryService } from './diffProviderFactoryService.js';\nimport { filterWithPrevious, readHotReloadableExport } from './utils.js';\nimport { LineRange, LineRangeSet } from '../../../common/core/lineRange.js';\nimport { DefaultLinesDiffComputer } from '../../../common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js';\nimport { DetailedLineRangeMapping, LineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { TextEditInfo } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js';\nimport { combineTextEditInfos } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos.js';\nimport { optimizeSequenceDiffs } from '../../../common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { groupAdjacentBy } from '../../../../base/common/arrays.js';\nimport { softAssert } from '../../../../base/common/assert.js';\nlet DiffEditorViewModel = class DiffEditorViewModel extends Disposable {\n    setActiveMovedText(movedText) {\n        this._activeMovedText.set(movedText, undefined);\n    }\n    constructor(model, _options, _diffProviderFactoryService) {\n        super();\n        this.model = model;\n        this._options = _options;\n        this._diffProviderFactoryService = _diffProviderFactoryService;\n        this._isDiffUpToDate = observableValue(this, false);\n        this.isDiffUpToDate = this._isDiffUpToDate;\n        this._diff = observableValue(this, undefined);\n        this.diff = this._diff;\n        this._unchangedRegions = observableValue(this, undefined);\n        this.unchangedRegions = derived(this, r => {\n            var _a, _b;\n            if (this._options.hideUnchangedRegions.read(r)) {\n                return (_b = (_a = this._unchangedRegions.read(r)) === null || _a === void 0 ? void 0 : _a.regions) !== null && _b !== void 0 ? _b : [];\n            }\n            else {\n                // Reset state\n                transaction(tx => {\n                    var _a;\n                    for (const r of ((_a = this._unchangedRegions.get()) === null || _a === void 0 ? void 0 : _a.regions) || []) {\n                        r.collapseAll(tx);\n                    }\n                });\n                return [];\n            }\n        });\n        this.movedTextToCompare = observableValue(this, undefined);\n        this._activeMovedText = observableValue(this, undefined);\n        this._hoveredMovedText = observableValue(this, undefined);\n        this.activeMovedText = derived(this, r => { var _a, _b; return (_b = (_a = this.movedTextToCompare.read(r)) !== null && _a !== void 0 ? _a : this._hoveredMovedText.read(r)) !== null && _b !== void 0 ? _b : this._activeMovedText.read(r); });\n        this._cancellationTokenSource = new CancellationTokenSource();\n        this._diffProvider = derived(this, reader => {\n            const diffProvider = this._diffProviderFactoryService.createDiffProvider({\n                diffAlgorithm: this._options.diffAlgorithm.read(reader)\n            });\n            const onChangeSignal = observableSignalFromEvent('onDidChange', diffProvider.onDidChange);\n            return {\n                diffProvider,\n                onChangeSignal,\n            };\n        });\n        this._register(toDisposable(() => this._cancellationTokenSource.cancel()));\n        const contentChangedSignal = observableSignal('contentChangedSignal');\n        const debouncer = this._register(new RunOnceScheduler(() => contentChangedSignal.trigger(undefined), 200));\n        this._register(autorun(reader => {\n            /** @description collapse touching unchanged ranges */\n            const lastUnchangedRegions = this._unchangedRegions.read(reader);\n            if (!lastUnchangedRegions || lastUnchangedRegions.regions.some(r => r.isDragged.read(reader))) {\n                return;\n            }\n            const lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds\n                .map(id => model.original.getDecorationRange(id))\n                .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n            const lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds\n                .map(id => model.modified.getDecorationRange(id))\n                .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n            const updatedLastUnchangedRegions = lastUnchangedRegions.regions.map((r, idx) => (!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) ? undefined :\n                new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, lastUnchangedRegionsOrigRanges[idx].length, r.visibleLineCountTop.read(reader), r.visibleLineCountBottom.read(reader))).filter(isDefined);\n            const newRanges = [];\n            let didChange = false;\n            for (const touching of groupAdjacentBy(updatedLastUnchangedRegions, (a, b) => a.getHiddenModifiedRange(reader).endLineNumberExclusive === b.getHiddenModifiedRange(reader).startLineNumber)) {\n                if (touching.length > 1) {\n                    didChange = true;\n                    const sumLineCount = touching.reduce((sum, r) => sum + r.lineCount, 0);\n                    const r = new UnchangedRegion(touching[0].originalLineNumber, touching[0].modifiedLineNumber, sumLineCount, touching[0].visibleLineCountTop.get(), touching[touching.length - 1].visibleLineCountBottom.get());\n                    newRanges.push(r);\n                }\n                else {\n                    newRanges.push(touching[0]);\n                }\n            }\n            if (didChange) {\n                const originalDecorationIds = model.original.deltaDecorations(lastUnchangedRegions.originalDecorationIds, newRanges.map(r => ({ range: r.originalUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n                const modifiedDecorationIds = model.modified.deltaDecorations(lastUnchangedRegions.modifiedDecorationIds, newRanges.map(r => ({ range: r.modifiedUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n                transaction(tx => {\n                    this._unchangedRegions.set({\n                        regions: newRanges,\n                        originalDecorationIds,\n                        modifiedDecorationIds\n                    }, tx);\n                });\n            }\n        }));\n        const updateUnchangedRegions = (result, tx, reader) => {\n            const newUnchangedRegions = UnchangedRegion.fromDiffs(result.changes, model.original.getLineCount(), model.modified.getLineCount(), this._options.hideUnchangedRegionsMinimumLineCount.read(reader), this._options.hideUnchangedRegionsContextLineCount.read(reader));\n            // Transfer state from cur state\n            let visibleRegions = undefined;\n            const lastUnchangedRegions = this._unchangedRegions.get();\n            if (lastUnchangedRegions) {\n                const lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds\n                    .map(id => model.original.getDecorationRange(id))\n                    .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n                const lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds\n                    .map(id => model.modified.getDecorationRange(id))\n                    .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n                const updatedLastUnchangedRegions = filterWithPrevious(lastUnchangedRegions.regions\n                    .map((r, idx) => {\n                    if (!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) {\n                        return undefined;\n                    }\n                    const length = lastUnchangedRegionsOrigRanges[idx].length;\n                    return new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, length, \n                    // The visible area can shrink by edits -> we have to account for this\n                    Math.min(r.visibleLineCountTop.get(), length), Math.min(r.visibleLineCountBottom.get(), length - r.visibleLineCountTop.get()));\n                }).filter(isDefined), (cur, prev) => !prev || (cur.modifiedLineNumber >= prev.modifiedLineNumber + prev.lineCount && cur.originalLineNumber >= prev.originalLineNumber + prev.lineCount));\n                let hiddenRegions = updatedLastUnchangedRegions.map(r => new LineRangeMapping(r.getHiddenOriginalRange(reader), r.getHiddenModifiedRange(reader)));\n                hiddenRegions = LineRangeMapping.clip(hiddenRegions, LineRange.ofLength(1, model.original.getLineCount()), LineRange.ofLength(1, model.modified.getLineCount()));\n                visibleRegions = LineRangeMapping.inverse(hiddenRegions, model.original.getLineCount(), model.modified.getLineCount());\n            }\n            const newUnchangedRegions2 = [];\n            if (visibleRegions) {\n                for (const r of newUnchangedRegions) {\n                    const intersecting = visibleRegions.filter(f => f.original.intersectsStrict(r.originalUnchangedRange) && f.modified.intersectsStrict(r.modifiedUnchangedRange));\n                    newUnchangedRegions2.push(...r.setVisibleRanges(intersecting, tx));\n                }\n            }\n            else {\n                newUnchangedRegions2.push(...newUnchangedRegions);\n            }\n            const originalDecorationIds = model.original.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.originalDecorationIds) || [], newUnchangedRegions2.map(r => ({ range: r.originalUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n            const modifiedDecorationIds = model.modified.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.modifiedDecorationIds) || [], newUnchangedRegions2.map(r => ({ range: r.modifiedUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n            this._unchangedRegions.set({\n                regions: newUnchangedRegions2,\n                originalDecorationIds,\n                modifiedDecorationIds\n            }, tx);\n        };\n        this._register(model.modified.onDidChangeContent((e) => {\n            const diff = this._diff.get();\n            if (diff) {\n                const textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n                const result = applyModifiedEdits(this._lastDiff, textEdits, model.original, model.modified);\n                if (result) {\n                    this._lastDiff = result;\n                    transaction(tx => {\n                        this._diff.set(DiffState.fromDiffResult(this._lastDiff), tx);\n                        updateUnchangedRegions(result, tx);\n                        const currentSyncedMovedText = this.movedTextToCompare.get();\n                        this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n                    });\n                }\n            }\n            this._isDiffUpToDate.set(false, undefined);\n            debouncer.schedule();\n        }));\n        this._register(model.original.onDidChangeContent((e) => {\n            const diff = this._diff.get();\n            if (diff) {\n                const textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n                const result = applyOriginalEdits(this._lastDiff, textEdits, model.original, model.modified);\n                if (result) {\n                    this._lastDiff = result;\n                    transaction(tx => {\n                        this._diff.set(DiffState.fromDiffResult(this._lastDiff), tx);\n                        updateUnchangedRegions(result, tx);\n                        const currentSyncedMovedText = this.movedTextToCompare.get();\n                        this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n                    });\n                }\n            }\n            this._isDiffUpToDate.set(false, undefined);\n            debouncer.schedule();\n        }));\n        this._register(autorunWithStore(async (reader, store) => {\n            /** @description compute diff */\n            var _a, _b;\n            // So that they get recomputed when these settings change\n            this._options.hideUnchangedRegionsMinimumLineCount.read(reader);\n            this._options.hideUnchangedRegionsContextLineCount.read(reader);\n            debouncer.cancel();\n            contentChangedSignal.read(reader);\n            const documentDiffProvider = this._diffProvider.read(reader);\n            documentDiffProvider.onChangeSignal.read(reader);\n            readHotReloadableExport(DefaultLinesDiffComputer, reader);\n            readHotReloadableExport(optimizeSequenceDiffs, reader);\n            this._isDiffUpToDate.set(false, undefined);\n            let originalTextEditInfos = [];\n            store.add(model.original.onDidChangeContent((e) => {\n                const edits = TextEditInfo.fromModelContentChanges(e.changes);\n                originalTextEditInfos = combineTextEditInfos(originalTextEditInfos, edits);\n            }));\n            let modifiedTextEditInfos = [];\n            store.add(model.modified.onDidChangeContent((e) => {\n                const edits = TextEditInfo.fromModelContentChanges(e.changes);\n                modifiedTextEditInfos = combineTextEditInfos(modifiedTextEditInfos, edits);\n            }));\n            let result = await documentDiffProvider.diffProvider.computeDiff(model.original, model.modified, {\n                ignoreTrimWhitespace: this._options.ignoreTrimWhitespace.read(reader),\n                maxComputationTimeMs: this._options.maxComputationTimeMs.read(reader),\n                computeMoves: this._options.showMoves.read(reader),\n            }, this._cancellationTokenSource.token);\n            if (this._cancellationTokenSource.token.isCancellationRequested) {\n                return;\n            }\n            result = normalizeDocumentDiff(result, model.original, model.modified);\n            result = (_a = applyOriginalEdits(result, originalTextEditInfos, model.original, model.modified)) !== null && _a !== void 0 ? _a : result;\n            result = (_b = applyModifiedEdits(result, modifiedTextEditInfos, model.original, model.modified)) !== null && _b !== void 0 ? _b : result;\n            transaction(tx => {\n                /** @description write diff result */\n                updateUnchangedRegions(result, tx);\n                this._lastDiff = result;\n                const state = DiffState.fromDiffResult(result);\n                this._diff.set(state, tx);\n                this._isDiffUpToDate.set(true, tx);\n                const currentSyncedMovedText = this.movedTextToCompare.get();\n                this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n            });\n        }));\n    }\n    ensureModifiedLineIsVisible(lineNumber, preference, tx) {\n        var _a, _b;\n        if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n            return;\n        }\n        const unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n        for (const r of unchangedRegions) {\n            if (r.getHiddenModifiedRange(undefined).contains(lineNumber)) {\n                r.showModifiedLine(lineNumber, preference, tx);\n                return;\n            }\n        }\n    }\n    ensureOriginalLineIsVisible(lineNumber, preference, tx) {\n        var _a, _b;\n        if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n            return;\n        }\n        const unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n        for (const r of unchangedRegions) {\n            if (r.getHiddenOriginalRange(undefined).contains(lineNumber)) {\n                r.showOriginalLine(lineNumber, preference, tx);\n                return;\n            }\n        }\n    }\n    async waitForDiff() {\n        await waitForState(this.isDiffUpToDate, s => s);\n    }\n    serializeState() {\n        const regions = this._unchangedRegions.get();\n        return {\n            collapsedRegions: regions === null || regions === void 0 ? void 0 : regions.regions.map(r => ({ range: r.getHiddenModifiedRange(undefined).serialize() }))\n        };\n    }\n    restoreSerializedState(state) {\n        var _a;\n        const ranges = (_a = state.collapsedRegions) === null || _a === void 0 ? void 0 : _a.map(r => LineRange.deserialize(r.range));\n        const regions = this._unchangedRegions.get();\n        if (!regions || !ranges) {\n            return;\n        }\n        transaction(tx => {\n            for (const r of regions.regions) {\n                for (const range of ranges) {\n                    if (r.modifiedUnchangedRange.intersect(range)) {\n                        r.setHiddenModifiedRange(range, tx);\n                        break;\n                    }\n                }\n            }\n        });\n    }\n};\nDiffEditorViewModel = __decorate([\n    __param(2, IDiffProviderFactoryService)\n], DiffEditorViewModel);\nexport { DiffEditorViewModel };\nfunction normalizeDocumentDiff(diff, original, modified) {\n    return {\n        changes: diff.changes.map(c => new DetailedLineRangeMapping(c.original, c.modified, c.innerChanges ? c.innerChanges.map(i => normalizeRangeMapping(i, original, modified)) : undefined)),\n        moves: diff.moves,\n        identical: diff.identical,\n        quitEarly: diff.quitEarly,\n    };\n}\nfunction normalizeRangeMapping(rangeMapping, original, modified) {\n    let originalRange = rangeMapping.originalRange;\n    let modifiedRange = rangeMapping.modifiedRange;\n    if ((originalRange.endColumn !== 1 || modifiedRange.endColumn !== 1) &&\n        originalRange.endColumn === original.getLineMaxColumn(originalRange.endLineNumber)\n        && modifiedRange.endColumn === modified.getLineMaxColumn(modifiedRange.endLineNumber)\n        && originalRange.endLineNumber < original.getLineCount()\n        && modifiedRange.endLineNumber < modified.getLineCount()) {\n        originalRange = originalRange.setEndPosition(originalRange.endLineNumber + 1, 1);\n        modifiedRange = modifiedRange.setEndPosition(modifiedRange.endLineNumber + 1, 1);\n    }\n    return new RangeMapping(originalRange, modifiedRange);\n}\nexport class DiffState {\n    static fromDiffResult(result) {\n        return new DiffState(result.changes.map(c => new DiffMapping(c)), result.moves || [], result.identical, result.quitEarly);\n    }\n    constructor(mappings, movedTexts, identical, quitEarly) {\n        this.mappings = mappings;\n        this.movedTexts = movedTexts;\n        this.identical = identical;\n        this.quitEarly = quitEarly;\n    }\n}\nexport class DiffMapping {\n    constructor(lineRangeMapping) {\n        this.lineRangeMapping = lineRangeMapping;\n        /*\n        readonly movedTo: MovedText | undefined,\n        readonly movedFrom: MovedText | undefined,\n\n        if (movedTo) {\n            assertFn(() =>\n                movedTo.lineRangeMapping.modifiedRange.equals(lineRangeMapping.modifiedRange)\n                && lineRangeMapping.originalRange.isEmpty\n                && !movedFrom\n            );\n        } else if (movedFrom) {\n            assertFn(() =>\n                movedFrom.lineRangeMapping.originalRange.equals(lineRangeMapping.originalRange)\n                && lineRangeMapping.modifiedRange.isEmpty\n                && !movedTo\n            );\n        }\n        */\n    }\n}\nexport class UnchangedRegion {\n    static fromDiffs(changes, originalLineCount, modifiedLineCount, minHiddenLineCount, minContext) {\n        const inversedMappings = DetailedLineRangeMapping.inverse(changes, originalLineCount, modifiedLineCount);\n        const result = [];\n        for (const mapping of inversedMappings) {\n            let origStart = mapping.original.startLineNumber;\n            let modStart = mapping.modified.startLineNumber;\n            let length = mapping.original.length;\n            const atStart = origStart === 1 && modStart === 1;\n            const atEnd = origStart + length === originalLineCount + 1 && modStart + length === modifiedLineCount + 1;\n            if ((atStart || atEnd) && length >= minContext + minHiddenLineCount) {\n                if (atStart && !atEnd) {\n                    length -= minContext;\n                }\n                if (atEnd && !atStart) {\n                    origStart += minContext;\n                    modStart += minContext;\n                    length -= minContext;\n                }\n                result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n            }\n            else if (length >= minContext * 2 + minHiddenLineCount) {\n                origStart += minContext;\n                modStart += minContext;\n                length -= minContext * 2;\n                result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n            }\n        }\n        return result;\n    }\n    get originalUnchangedRange() {\n        return LineRange.ofLength(this.originalLineNumber, this.lineCount);\n    }\n    get modifiedUnchangedRange() {\n        return LineRange.ofLength(this.modifiedLineNumber, this.lineCount);\n    }\n    constructor(originalLineNumber, modifiedLineNumber, lineCount, visibleLineCountTop, visibleLineCountBottom) {\n        this.originalLineNumber = originalLineNumber;\n        this.modifiedLineNumber = modifiedLineNumber;\n        this.lineCount = lineCount;\n        this._visibleLineCountTop = observableValue(this, 0);\n        this.visibleLineCountTop = this._visibleLineCountTop;\n        this._visibleLineCountBottom = observableValue(this, 0);\n        this.visibleLineCountBottom = this._visibleLineCountBottom;\n        this._shouldHideControls = derived(this, reader => /** @description isVisible */ this.visibleLineCountTop.read(reader) + this.visibleLineCountBottom.read(reader) === this.lineCount && !this.isDragged.read(reader));\n        this.isDragged = observableValue(this, undefined);\n        const visibleLineCountTop2 = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n        const visibleLineCountBottom2 = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n        softAssert(visibleLineCountTop === visibleLineCountTop2);\n        softAssert(visibleLineCountBottom === visibleLineCountBottom2);\n        this._visibleLineCountTop.set(visibleLineCountTop2, undefined);\n        this._visibleLineCountBottom.set(visibleLineCountBottom2, undefined);\n    }\n    setVisibleRanges(visibleRanges, tx) {\n        const result = [];\n        const hiddenModified = new LineRangeSet(visibleRanges.map(r => r.modified)).subtractFrom(this.modifiedUnchangedRange);\n        let originalStartLineNumber = this.originalLineNumber;\n        let modifiedStartLineNumber = this.modifiedLineNumber;\n        const modifiedEndLineNumberEx = this.modifiedLineNumber + this.lineCount;\n        if (hiddenModified.ranges.length === 0) {\n            this.showAll(tx);\n            result.push(this);\n        }\n        else {\n            let i = 0;\n            for (const r of hiddenModified.ranges) {\n                const isLast = i === hiddenModified.ranges.length - 1;\n                i++;\n                const length = (isLast ? modifiedEndLineNumberEx : r.endLineNumberExclusive) - modifiedStartLineNumber;\n                const newR = new UnchangedRegion(originalStartLineNumber, modifiedStartLineNumber, length, 0, 0);\n                newR.setHiddenModifiedRange(r, tx);\n                result.push(newR);\n                originalStartLineNumber = newR.originalUnchangedRange.endLineNumberExclusive;\n                modifiedStartLineNumber = newR.modifiedUnchangedRange.endLineNumberExclusive;\n            }\n        }\n        return result;\n    }\n    shouldHideControls(reader) {\n        return this._shouldHideControls.read(reader);\n    }\n    getHiddenOriginalRange(reader) {\n        return LineRange.ofLength(this.originalLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n    }\n    getHiddenModifiedRange(reader) {\n        return LineRange.ofLength(this.modifiedLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n    }\n    setHiddenModifiedRange(range, tx) {\n        const visibleLineCountTop = range.startLineNumber - this.modifiedLineNumber;\n        const visibleLineCountBottom = (this.modifiedLineNumber + this.lineCount) - range.endLineNumberExclusive;\n        this.setState(visibleLineCountTop, visibleLineCountBottom, tx);\n    }\n    getMaxVisibleLineCountTop() {\n        return this.lineCount - this._visibleLineCountBottom.get();\n    }\n    getMaxVisibleLineCountBottom() {\n        return this.lineCount - this._visibleLineCountTop.get();\n    }\n    showMoreAbove(count = 10, tx) {\n        const maxVisibleLineCountTop = this.getMaxVisibleLineCountTop();\n        this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + count, maxVisibleLineCountTop), tx);\n    }\n    showMoreBelow(count = 10, tx) {\n        const maxVisibleLineCountBottom = this.lineCount - this._visibleLineCountTop.get();\n        this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + count, maxVisibleLineCountBottom), tx);\n    }\n    showAll(tx) {\n        this._visibleLineCountBottom.set(this.lineCount - this._visibleLineCountTop.get(), tx);\n    }\n    showModifiedLine(lineNumber, preference, tx) {\n        const top = lineNumber + 1 - (this.modifiedLineNumber + this._visibleLineCountTop.get());\n        const bottom = (this.modifiedLineNumber - this._visibleLineCountBottom.get() + this.lineCount) - lineNumber;\n        if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n            this._visibleLineCountTop.set(this._visibleLineCountTop.get() + top, tx);\n        }\n        else {\n            this._visibleLineCountBottom.set(this._visibleLineCountBottom.get() + bottom, tx);\n        }\n    }\n    showOriginalLine(lineNumber, preference, tx) {\n        const top = lineNumber - this.originalLineNumber;\n        const bottom = (this.originalLineNumber + this.lineCount) - lineNumber;\n        if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n            this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + bottom - top, this.getMaxVisibleLineCountTop()), tx);\n        }\n        else {\n            this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + top - bottom, this.getMaxVisibleLineCountBottom()), tx);\n        }\n    }\n    collapseAll(tx) {\n        this._visibleLineCountTop.set(0, tx);\n        this._visibleLineCountBottom.set(0, tx);\n    }\n    setState(visibleLineCountTop, visibleLineCountBottom, tx) {\n        visibleLineCountTop = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n        visibleLineCountBottom = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n        this._visibleLineCountTop.set(visibleLineCountTop, tx);\n        this._visibleLineCountBottom.set(visibleLineCountBottom, tx);\n    }\n}\nfunction applyOriginalEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n    return undefined;\n    /*\n    TODO@hediet\n    if (textEdits.length === 0) {\n        return diff;\n    }\n\n    const diff2 = flip(diff);\n    const diff3 = applyModifiedEdits(diff2, textEdits, modifiedTextModel, originalTextModel);\n    if (!diff3) {\n        return undefined;\n    }\n    return flip(diff3);*/\n}\n/*\nfunction flip(diff: IDocumentDiff): IDocumentDiff {\n    return {\n        changes: diff.changes.map(c => c.flip()),\n        moves: diff.moves.map(m => m.flip()),\n        identical: diff.identical,\n        quitEarly: diff.quitEarly,\n    };\n}\n*/\nfunction applyModifiedEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n    return undefined;\n    /*\n    TODO@hediet\n    if (textEdits.length === 0) {\n        return diff;\n    }\n    if (diff.changes.some(c => !c.innerChanges) || diff.moves.length > 0) {\n        // TODO support these cases\n        return undefined;\n    }\n\n    const changes = applyModifiedEditsToLineRangeMappings(diff.changes, textEdits, originalTextModel, modifiedTextModel);\n\n    const moves = diff.moves.map(m => {\n        const newModifiedRange = applyEditToLineRange(m.lineRangeMapping.modified, textEdits);\n        return newModifiedRange ? new MovedText(\n            new SimpleLineRangeMapping(m.lineRangeMapping.original, newModifiedRange),\n            applyModifiedEditsToLineRangeMappings(m.changes, textEdits, originalTextModel, modifiedTextModel),\n        ) : undefined;\n    }).filter(isDefined);\n\n    return {\n        identical: false,\n        quitEarly: false,\n        changes,\n        moves,\n    };*/\n}\n/*\nfunction applyEditToLineRange(range: LineRange, textEdits: TextEditInfo[]): LineRange | undefined {\n    let rangeStartLineNumber = range.startLineNumber;\n    let rangeEndLineNumberEx = range.endLineNumberExclusive;\n\n    for (let i = textEdits.length - 1; i >= 0; i--) {\n        const textEdit = textEdits[i];\n        const textEditStartLineNumber = lengthGetLineCount(textEdit.startOffset) + 1;\n        const textEditEndLineNumber = lengthGetLineCount(textEdit.endOffset) + 1;\n        const newLengthLineCount = lengthGetLineCount(textEdit.newLength);\n        const delta = newLengthLineCount - (textEditEndLineNumber - textEditStartLineNumber);\n\n        if (textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit is before us\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (textEditStartLineNumber > rangeEndLineNumberEx) {\n            // the text edit is after us\n            // NOOP\n        } else if (textEditStartLineNumber < rangeStartLineNumber && rangeEndLineNumberEx < textEditEndLineNumber) {\n            // the range is fully contained in the text edit\n            return undefined;\n        } else if (textEditStartLineNumber < rangeStartLineNumber && textEditEndLineNumber <= rangeEndLineNumberEx) {\n            // the text edit ends inside our range\n            rangeStartLineNumber = textEditEndLineNumber + 1;\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (rangeStartLineNumber <= textEditStartLineNumber && textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit starts inside our range\n            rangeEndLineNumberEx = textEditStartLineNumber;\n        } else {\n            rangeEndLineNumberEx += delta;\n        }\n    }\n\n    return new LineRange(rangeStartLineNumber, rangeEndLineNumberEx);\n}\n\nfunction applyModifiedEditsToLineRangeMappings(changes: readonly LineRangeMapping[], textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): LineRangeMapping[] {\n    const diffTextEdits = changes.flatMap(c => c.innerChanges!.map(c => new TextEditInfo(\n        positionToLength(c.originalRange.getStartPosition()),\n        positionToLength(c.originalRange.getEndPosition()),\n        lengthOfRange(c.modifiedRange).toLength(),\n    )));\n\n    const combined = combineTextEditInfos(diffTextEdits, textEdits);\n\n    let lastOriginalEndOffset = lengthZero;\n    let lastModifiedEndOffset = lengthZero;\n    const rangeMappings = combined.map(c => {\n        const modifiedStartOffset = lengthAdd(lastModifiedEndOffset, lengthDiffNonNegative(lastOriginalEndOffset, c.startOffset));\n        lastOriginalEndOffset = c.endOffset;\n        lastModifiedEndOffset = lengthAdd(modifiedStartOffset, c.newLength);\n\n        return new RangeMapping(\n            Range.fromPositions(lengthToPosition(c.startOffset), lengthToPosition(c.endOffset)),\n            Range.fromPositions(lengthToPosition(modifiedStartOffset), lengthToPosition(lastModifiedEndOffset)),\n        );\n    });\n\n    const newChanges = lineRangeMappingFromRangeMappings(\n        rangeMappings,\n        originalTextModel.getLinesContent(),\n        modifiedTextModel.getLinesContent(),\n    );\n    return newChanges;\n}\n*/\n"],"mappings":"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,CAAC,CAAC,CAAC,EAAE5K,EAAE,CAAC;IAC1I;EACJ;EACAE,WAAWA,CAACF,EAAE,EAAE;IACZ,IAAI,CAAC0J,oBAAoB,CAAC3K,GAAG,CAAC,CAAC,EAAEiB,EAAE,CAAC;IACpC,IAAI,CAAC2J,uBAAuB,CAAC5K,GAAG,CAAC,CAAC,EAAEiB,EAAE,CAAC;EAC3C;EACA0K,QAAQA,CAACtI,mBAAmB,EAAEC,sBAAsB,EAAErC,EAAE,EAAE;IACtDoC,mBAAmB,GAAGiC,IAAI,CAACyF,GAAG,CAACzF,IAAI,CAACC,GAAG,CAAClC,mBAAmB,EAAE,IAAI,CAACa,SAAS,CAAC,EAAE,CAAC,CAAC;IAChFZ,sBAAsB,GAAGgC,IAAI,CAACyF,GAAG,CAACzF,IAAI,CAACC,GAAG,CAACjC,sBAAsB,EAAE,IAAI,CAACY,SAAS,GAAGb,mBAAmB,CAAC,EAAE,CAAC,CAAC;IAC5G,IAAI,CAACsH,oBAAoB,CAAC3K,GAAG,CAACqD,mBAAmB,EAAEpC,EAAE,CAAC;IACtD,IAAI,CAAC2J,uBAAuB,CAAC5K,GAAG,CAACsD,sBAAsB,EAAErC,EAAE,CAAC;EAChE;AACJ;AACA,SAASkG,kBAAkBA,CAAC1G,IAAI,EAAE6F,SAAS,EAAE+F,iBAAiB,EAAEC,iBAAiB,EAAE;EAC/E,OAAOrM,SAAS;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuG,kBAAkBA,CAAC/F,IAAI,EAAE6F,SAAS,EAAE+F,iBAAiB,EAAEC,iBAAiB,EAAE;EAC/E,OAAOrM,SAAS;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}