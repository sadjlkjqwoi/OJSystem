{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append, clearNode, createStyleSheet, getWindow, h, hasParentWithClass, asCssValueWithDefault, isKeyboardEvent } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { FindInput } from '../findinput/findInput.js';\nimport { unthemedInboxStyles } from '../inputbox/inputBox.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { isActionItem, isButton, isInputElement, isMonacoCustomToggle, isMonacoEditor, isStickyScrollContainer, isStickyScrollElement, List, MouseController } from '../list/listWidget.js';\nimport { Toggle, unthemedToggleStyles } from '../toggle/toggle.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { TreeMouseEventTarget } from './tree.js';\nimport { Action } from '../../../common/actions.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { Delayer, disposableTimeout, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { SetMap } from '../../../common/map.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { Disposable, DisposableStore, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { isNumber } from '../../../common/types.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\nclass TreeElementsDragAndDropData extends ElementsDragAndDropData {\n  constructor(data) {\n    super(data.elements.map(node => node.element));\n    this.data = data;\n  }\n}\nfunction asTreeDragAndDropData(data) {\n  if (data instanceof ElementsDragAndDropData) {\n    return new TreeElementsDragAndDropData(data);\n  }\n  return data;\n}\nclass TreeNodeListDragAndDrop {\n  constructor(modelProvider, dnd) {\n    this.modelProvider = modelProvider;\n    this.dnd = dnd;\n    this.autoExpandDisposable = Disposable.None;\n    this.disposables = new DisposableStore();\n  }\n  getDragURI(node) {\n    return this.dnd.getDragURI(node.element);\n  }\n  getDragLabel(nodes, originalEvent) {\n    if (this.dnd.getDragLabel) {\n      return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n    }\n    return undefined;\n  }\n  onDragStart(data, originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asTreeDragAndDropData(data), originalEvent);\n  }\n  onDragOver(data, targetNode, targetIndex, targetSector, originalEvent, raw = true) {\n    const result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n    const didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n    if (didChangeAutoExpandNode) {\n      this.autoExpandDisposable.dispose();\n      this.autoExpandNode = targetNode;\n    }\n    if (typeof targetNode === 'undefined') {\n      return result;\n    }\n    if (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n      this.autoExpandDisposable = disposableTimeout(() => {\n        const model = this.modelProvider();\n        const ref = model.getNodeLocation(targetNode);\n        if (model.isCollapsed(ref)) {\n          model.setCollapsed(ref, false);\n        }\n        this.autoExpandNode = undefined;\n      }, 500, this.disposables);\n    }\n    if (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n      if (!raw) {\n        const accept = typeof result === 'boolean' ? result : result.accept;\n        const effect = typeof result === 'boolean' ? undefined : result.effect;\n        return {\n          accept,\n          effect,\n          feedback: [targetIndex]\n        };\n      }\n      return result;\n    }\n    if (result.bubble === 1 /* TreeDragOverBubble.Up */) {\n      const model = this.modelProvider();\n      const ref = model.getNodeLocation(targetNode);\n      const parentRef = model.getParentNodeLocation(ref);\n      const parentNode = model.getNode(parentRef);\n      const parentIndex = parentRef && model.getListIndex(parentRef);\n      return this.onDragOver(data, parentNode, parentIndex, targetSector, originalEvent, false);\n    }\n    const model = this.modelProvider();\n    const ref = model.getNodeLocation(targetNode);\n    const start = model.getListIndex(ref);\n    const length = model.getListRenderCount(ref);\n    return {\n      ...result,\n      feedback: range(start, start + length)\n    };\n  }\n  drop(data, targetNode, targetIndex, targetSector, originalEvent) {\n    this.autoExpandDisposable.dispose();\n    this.autoExpandNode = undefined;\n    this.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n  }\n  onDragEnd(originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n  }\n  dispose() {\n    this.disposables.dispose();\n    this.dnd.dispose();\n  }\n}\nfunction asListOptions(modelProvider, options) {\n  return options && {\n    ...options,\n    identityProvider: options.identityProvider && {\n      getId(el) {\n        return options.identityProvider.getId(el.element);\n      }\n    },\n    dnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd),\n    multipleSelectionController: options.multipleSelectionController && {\n      isSelectionSingleChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionSingleChangeEvent({\n          ...e,\n          element: e.element\n        });\n      },\n      isSelectionRangeChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionRangeChangeEvent({\n          ...e,\n          element: e.element\n        });\n      }\n    },\n    accessibilityProvider: options.accessibilityProvider && {\n      ...options.accessibilityProvider,\n      getSetSize(node) {\n        const model = modelProvider();\n        const ref = model.getNodeLocation(node);\n        const parentRef = model.getParentNodeLocation(ref);\n        const parentNode = model.getNode(parentRef);\n        return parentNode.visibleChildrenCount;\n      },\n      getPosInSet(node) {\n        return node.visibleChildIndex + 1;\n      },\n      isChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? node => {\n        return options.accessibilityProvider.isChecked(node.element);\n      } : undefined,\n      getRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? node => {\n        return options.accessibilityProvider.getRole(node.element);\n      } : () => 'treeitem',\n      getAriaLabel(e) {\n        return options.accessibilityProvider.getAriaLabel(e.element);\n      },\n      getWidgetAriaLabel() {\n        return options.accessibilityProvider.getWidgetAriaLabel();\n      },\n      getWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n      getAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? node => options.accessibilityProvider.getAriaLevel(node.element) : node => {\n        return node.depth;\n      },\n      getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n        return options.accessibilityProvider.getActiveDescendantId(node.element);\n      })\n    },\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n      ...options.keyboardNavigationLabelProvider,\n      getKeyboardNavigationLabel(node) {\n        return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(node.element);\n      }\n    }\n  };\n}\nexport class ComposedTreeDelegate {\n  constructor(delegate) {\n    this.delegate = delegate;\n  }\n  getHeight(element) {\n    return this.delegate.getHeight(element.element);\n  }\n  getTemplateId(element) {\n    return this.delegate.getTemplateId(element.element);\n  }\n  hasDynamicHeight(element) {\n    return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n  }\n  setDynamicHeight(element, height) {\n    var _a, _b;\n    (_b = (_a = this.delegate).setDynamicHeight) === null || _b === void 0 ? void 0 : _b.call(_a, element.element, height);\n  }\n}\nexport var RenderIndentGuides;\n(function (RenderIndentGuides) {\n  RenderIndentGuides[\"None\"] = \"none\";\n  RenderIndentGuides[\"OnHover\"] = \"onHover\";\n  RenderIndentGuides[\"Always\"] = \"always\";\n})(RenderIndentGuides || (RenderIndentGuides = {}));\nclass EventCollection {\n  get elements() {\n    return this._elements;\n  }\n  constructor(onDidChange, _elements = []) {\n    this._elements = _elements;\n    this.disposables = new DisposableStore();\n    this.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements, this.disposables);\n  }\n  dispose() {\n    this.disposables.dispose();\n  }\n}\nexport class TreeRenderer {\n  constructor(renderer, modelProvider, onDidChangeCollapseState, activeNodes, renderedIndentGuides, options = {}) {\n    var _a;\n    this.renderer = renderer;\n    this.modelProvider = modelProvider;\n    this.activeNodes = activeNodes;\n    this.renderedIndentGuides = renderedIndentGuides;\n    this.renderedElements = new Map();\n    this.renderedNodes = new Map();\n    this.indent = TreeRenderer.DefaultIndent;\n    this.hideTwistiesOfChildlessElements = false;\n    this.shouldRenderIndentGuides = false;\n    this.activeIndentNodes = new Set();\n    this.indentGuidesDisposable = Disposable.None;\n    this.disposables = new DisposableStore();\n    this.templateId = renderer.templateId;\n    this.updateOptions(options);\n    Event.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n    (_a = renderer.onDidChangeTwistieState) === null || _a === void 0 ? void 0 : _a.call(renderer, this.onDidChangeTwistieState, this, this.disposables);\n  }\n  updateOptions(options = {}) {\n    if (typeof options.indent !== 'undefined') {\n      const indent = clamp(options.indent, 0, 40);\n      if (indent !== this.indent) {\n        this.indent = indent;\n        for (const [node, templateData] of this.renderedNodes) {\n          this.renderTreeElement(node, templateData);\n        }\n      }\n    }\n    if (typeof options.renderIndentGuides !== 'undefined') {\n      const shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n      if (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n        this.shouldRenderIndentGuides = shouldRenderIndentGuides;\n        for (const [node, templateData] of this.renderedNodes) {\n          this._renderIndentGuides(node, templateData);\n        }\n        this.indentGuidesDisposable.dispose();\n        if (shouldRenderIndentGuides) {\n          const disposables = new DisposableStore();\n          this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n          this.indentGuidesDisposable = disposables;\n          this._onDidChangeActiveNodes(this.activeNodes.elements);\n        }\n      }\n    }\n    if (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n      this.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n    }\n  }\n  renderTemplate(container) {\n    const el = append(container, $('.monaco-tl-row'));\n    const indent = append(el, $('.monaco-tl-indent'));\n    const twistie = append(el, $('.monaco-tl-twistie'));\n    const contents = append(el, $('.monaco-tl-contents'));\n    const templateData = this.renderer.renderTemplate(contents);\n    return {\n      container,\n      indent,\n      twistie,\n      indentGuidesDisposable: Disposable.None,\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderedNodes.set(node, templateData);\n    this.renderedElements.set(node.element, node);\n    this.renderTreeElement(node, templateData);\n    this.renderer.renderElement(node, index, templateData.templateData, height);\n  }\n  disposeElement(node, index, templateData, height) {\n    var _a, _b;\n    templateData.indentGuidesDisposable.dispose();\n    (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, node, index, templateData.templateData, height);\n    if (typeof height === 'number') {\n      this.renderedNodes.delete(node);\n      this.renderedElements.delete(node.element);\n    }\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  onDidChangeTwistieState(element) {\n    const node = this.renderedElements.get(element);\n    if (!node) {\n      return;\n    }\n    this.onDidChangeNodeTwistieState(node);\n  }\n  onDidChangeNodeTwistieState(node) {\n    const templateData = this.renderedNodes.get(node);\n    if (!templateData) {\n      return;\n    }\n    this._onDidChangeActiveNodes(this.activeNodes.elements);\n    this.renderTreeElement(node, templateData);\n  }\n  renderTreeElement(node, templateData) {\n    const indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n    templateData.twistie.style.paddingLeft = `${indent}px`;\n    templateData.indent.style.width = `${indent + this.indent - 16}px`;\n    if (node.collapsible) {\n      templateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n    } else {\n      templateData.container.removeAttribute('aria-expanded');\n    }\n    templateData.twistie.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n    let twistieRendered = false;\n    if (this.renderer.renderTwistie) {\n      twistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n    }\n    if (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n      if (!twistieRendered) {\n        templateData.twistie.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n      }\n      templateData.twistie.classList.add('collapsible');\n      templateData.twistie.classList.toggle('collapsed', node.collapsed);\n    } else {\n      templateData.twistie.classList.remove('collapsible', 'collapsed');\n    }\n    this._renderIndentGuides(node, templateData);\n  }\n  _renderIndentGuides(node, templateData) {\n    clearNode(templateData.indent);\n    templateData.indentGuidesDisposable.dispose();\n    if (!this.shouldRenderIndentGuides) {\n      return;\n    }\n    const disposableStore = new DisposableStore();\n    const model = this.modelProvider();\n    while (true) {\n      const ref = model.getNodeLocation(node);\n      const parentRef = model.getParentNodeLocation(ref);\n      if (!parentRef) {\n        break;\n      }\n      const parent = model.getNode(parentRef);\n      const guide = $('.indent-guide', {\n        style: `width: ${this.indent}px`\n      });\n      if (this.activeIndentNodes.has(parent)) {\n        guide.classList.add('active');\n      }\n      if (templateData.indent.childElementCount === 0) {\n        templateData.indent.appendChild(guide);\n      } else {\n        templateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n      }\n      this.renderedIndentGuides.add(parent, guide);\n      disposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n      node = parent;\n    }\n    templateData.indentGuidesDisposable = disposableStore;\n  }\n  _onDidChangeActiveNodes(nodes) {\n    if (!this.shouldRenderIndentGuides) {\n      return;\n    }\n    const set = new Set();\n    const model = this.modelProvider();\n    nodes.forEach(node => {\n      const ref = model.getNodeLocation(node);\n      try {\n        const parentRef = model.getParentNodeLocation(ref);\n        if (node.collapsible && node.children.length > 0 && !node.collapsed) {\n          set.add(node);\n        } else if (parentRef) {\n          set.add(model.getNode(parentRef));\n        }\n      } catch (_a) {\n        // noop\n      }\n    });\n    this.activeIndentNodes.forEach(node => {\n      if (!set.has(node)) {\n        this.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n      }\n    });\n    set.forEach(node => {\n      if (!this.activeIndentNodes.has(node)) {\n        this.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n      }\n    });\n    this.activeIndentNodes = set;\n  }\n  dispose() {\n    this.renderedNodes.clear();\n    this.renderedElements.clear();\n    this.indentGuidesDisposable.dispose();\n    dispose(this.disposables);\n  }\n}\nTreeRenderer.DefaultIndent = 8;\nclass FindFilter {\n  get totalCount() {\n    return this._totalCount;\n  }\n  get matchCount() {\n    return this._matchCount;\n  }\n  constructor(tree, keyboardNavigationLabelProvider, _filter) {\n    this.tree = tree;\n    this.keyboardNavigationLabelProvider = keyboardNavigationLabelProvider;\n    this._filter = _filter;\n    this._totalCount = 0;\n    this._matchCount = 0;\n    this._pattern = '';\n    this._lowercasePattern = '';\n    this.disposables = new DisposableStore();\n    tree.onWillRefilter(this.reset, this, this.disposables);\n  }\n  filter(element, parentVisibility) {\n    let visibility = 1 /* TreeVisibility.Visible */;\n    if (this._filter) {\n      const result = this._filter.filter(element, parentVisibility);\n      if (typeof result === 'boolean') {\n        visibility = result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n      } else if (isFilterResult(result)) {\n        visibility = getVisibleState(result.visibility);\n      } else {\n        visibility = result;\n      }\n      if (visibility === 0 /* TreeVisibility.Hidden */) {\n        return false;\n      }\n    }\n    this._totalCount++;\n    if (!this._pattern) {\n      this._matchCount++;\n      return {\n        data: FuzzyScore.Default,\n        visibility\n      };\n    }\n    const label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n    const labels = Array.isArray(label) ? label : [label];\n    for (const l of labels) {\n      const labelStr = l && l.toString();\n      if (typeof labelStr === 'undefined') {\n        return {\n          data: FuzzyScore.Default,\n          visibility\n        };\n      }\n      let score;\n      if (this.tree.findMatchType === TreeFindMatchType.Contiguous) {\n        const index = labelStr.toLowerCase().indexOf(this._lowercasePattern);\n        if (index > -1) {\n          score = [Number.MAX_SAFE_INTEGER, 0];\n          for (let i = this._lowercasePattern.length; i > 0; i--) {\n            score.push(index + i - 1);\n          }\n        }\n      } else {\n        score = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, {\n          firstMatchCanBeWeak: true,\n          boostFullMatch: true\n        });\n      }\n      if (score) {\n        this._matchCount++;\n        return labels.length === 1 ? {\n          data: score,\n          visibility\n        } : {\n          data: {\n            label: labelStr,\n            score: score\n          },\n          visibility\n        };\n      }\n    }\n    if (this.tree.findMode === TreeFindMode.Filter) {\n      if (typeof this.tree.options.defaultFindVisibility === 'number') {\n        return this.tree.options.defaultFindVisibility;\n      } else if (this.tree.options.defaultFindVisibility) {\n        return this.tree.options.defaultFindVisibility(element);\n      } else {\n        return 2 /* TreeVisibility.Recurse */;\n      }\n    } else {\n      return {\n        data: FuzzyScore.Default,\n        visibility\n      };\n    }\n  }\n  reset() {\n    this._totalCount = 0;\n    this._matchCount = 0;\n  }\n  dispose() {\n    dispose(this.disposables);\n  }\n}\nexport class ModeToggle extends Toggle {\n  constructor(opts) {\n    var _a;\n    super({\n      icon: Codicon.listFilter,\n      title: localize('filter', \"Filter\"),\n      isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n      inputActiveOptionBorder: opts.inputActiveOptionBorder,\n      inputActiveOptionForeground: opts.inputActiveOptionForeground,\n      inputActiveOptionBackground: opts.inputActiveOptionBackground\n    });\n  }\n}\nexport class FuzzyToggle extends Toggle {\n  constructor(opts) {\n    var _a;\n    super({\n      icon: Codicon.searchFuzzy,\n      title: localize('fuzzySearch', \"Fuzzy Match\"),\n      isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n      inputActiveOptionBorder: opts.inputActiveOptionBorder,\n      inputActiveOptionForeground: opts.inputActiveOptionForeground,\n      inputActiveOptionBackground: opts.inputActiveOptionBackground\n    });\n  }\n}\nconst unthemedFindWidgetStyles = {\n  inputBoxStyles: unthemedInboxStyles,\n  toggleStyles: unthemedToggleStyles,\n  listFilterWidgetBackground: undefined,\n  listFilterWidgetNoMatchesOutline: undefined,\n  listFilterWidgetOutline: undefined,\n  listFilterWidgetShadow: undefined\n};\nexport var TreeFindMode;\n(function (TreeFindMode) {\n  TreeFindMode[TreeFindMode[\"Highlight\"] = 0] = \"Highlight\";\n  TreeFindMode[TreeFindMode[\"Filter\"] = 1] = \"Filter\";\n})(TreeFindMode || (TreeFindMode = {}));\nexport var TreeFindMatchType;\n(function (TreeFindMatchType) {\n  TreeFindMatchType[TreeFindMatchType[\"Fuzzy\"] = 0] = \"Fuzzy\";\n  TreeFindMatchType[TreeFindMatchType[\"Contiguous\"] = 1] = \"Contiguous\";\n})(TreeFindMatchType || (TreeFindMatchType = {}));\nclass FindWidget extends Disposable {\n  set mode(mode) {\n    this.modeToggle.checked = mode === TreeFindMode.Filter;\n    this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', \"Type to filter\") : localize('type to search', \"Type to search\"));\n  }\n  set matchType(matchType) {\n    this.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;\n  }\n  constructor(container, tree, contextViewProvider, mode, matchType, options) {\n    var _a;\n    super();\n    this.tree = tree;\n    this.elements = h('.monaco-tree-type-filter', [h('.monaco-tree-type-filter-grab.codicon.codicon-debug-gripper@grab', {\n      tabIndex: 0\n    }), h('.monaco-tree-type-filter-input@findInput'), h('.monaco-tree-type-filter-actionbar@actionbar')]);\n    this.width = 0;\n    this.right = 0;\n    this.top = 0;\n    this._onDidDisable = new Emitter();\n    container.appendChild(this.elements.root);\n    this._register(toDisposable(() => container.removeChild(this.elements.root)));\n    const styles = (_a = options === null || options === void 0 ? void 0 : options.styles) !== null && _a !== void 0 ? _a : unthemedFindWidgetStyles;\n    if (styles.listFilterWidgetBackground) {\n      this.elements.root.style.backgroundColor = styles.listFilterWidgetBackground;\n    }\n    if (styles.listFilterWidgetShadow) {\n      this.elements.root.style.boxShadow = `0 0 8px 2px ${styles.listFilterWidgetShadow}`;\n    }\n    this.modeToggle = this._register(new ModeToggle({\n      ...styles.toggleStyles,\n      isChecked: mode === TreeFindMode.Filter\n    }));\n    this.matchTypeToggle = this._register(new FuzzyToggle({\n      ...styles.toggleStyles,\n      isChecked: matchType === TreeFindMatchType.Fuzzy\n    }));\n    this.onDidChangeMode = Event.map(this.modeToggle.onChange, () => this.modeToggle.checked ? TreeFindMode.Filter : TreeFindMode.Highlight, this._store);\n    this.onDidChangeMatchType = Event.map(this.matchTypeToggle.onChange, () => this.matchTypeToggle.checked ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous, this._store);\n    this.findInput = this._register(new FindInput(this.elements.findInput, contextViewProvider, {\n      label: localize('type to search', \"Type to search\"),\n      additionalToggles: [this.modeToggle, this.matchTypeToggle],\n      showCommonFindToggles: false,\n      inputBoxStyles: styles.inputBoxStyles,\n      toggleStyles: styles.toggleStyles,\n      history: options === null || options === void 0 ? void 0 : options.history\n    }));\n    this.actionbar = this._register(new ActionBar(this.elements.actionbar));\n    this.mode = mode;\n    const emitter = this._register(new DomEmitter(this.findInput.inputBox.inputElement, 'keydown'));\n    const onKeyDown = Event.chain(emitter.event, $ => $.map(e => new StandardKeyboardEvent(e)));\n    this._register(onKeyDown(e => {\n      // Using equals() so we reserve modified keys for future use\n      if (e.equals(3 /* KeyCode.Enter */)) {\n        // This is the only keyboard way to return to the tree from a history item that isn't the last one\n        e.preventDefault();\n        e.stopPropagation();\n        this.findInput.inputBox.addToHistory();\n        this.tree.domFocus();\n        return;\n      }\n      if (e.equals(18 /* KeyCode.DownArrow */)) {\n        e.preventDefault();\n        e.stopPropagation();\n        if (this.findInput.inputBox.isAtLastInHistory() || this.findInput.inputBox.isNowhereInHistory()) {\n          // Retain original pre-history DownArrow behavior\n          this.findInput.inputBox.addToHistory();\n          this.tree.domFocus();\n        } else {\n          // Downward through history\n          this.findInput.inputBox.showNextValue();\n        }\n        return;\n      }\n      if (e.equals(16 /* KeyCode.UpArrow */)) {\n        e.preventDefault();\n        e.stopPropagation();\n        // Upward through history\n        this.findInput.inputBox.showPreviousValue();\n        return;\n      }\n    }));\n    const closeAction = this._register(new Action('close', localize('close', \"Close\"), 'codicon codicon-close', true, () => this.dispose()));\n    this.actionbar.push(closeAction, {\n      icon: true,\n      label: false\n    });\n    const onGrabMouseDown = this._register(new DomEmitter(this.elements.grab, 'mousedown'));\n    this._register(onGrabMouseDown.event(e => {\n      const disposables = new DisposableStore();\n      const onWindowMouseMove = disposables.add(new DomEmitter(getWindow(e), 'mousemove'));\n      const onWindowMouseUp = disposables.add(new DomEmitter(getWindow(e), 'mouseup'));\n      const startRight = this.right;\n      const startX = e.pageX;\n      const startTop = this.top;\n      const startY = e.pageY;\n      this.elements.grab.classList.add('grabbing');\n      const transition = this.elements.root.style.transition;\n      this.elements.root.style.transition = 'unset';\n      const update = e => {\n        const deltaX = e.pageX - startX;\n        this.right = startRight - deltaX;\n        const deltaY = e.pageY - startY;\n        this.top = startTop + deltaY;\n        this.layout();\n      };\n      disposables.add(onWindowMouseMove.event(update));\n      disposables.add(onWindowMouseUp.event(e => {\n        update(e);\n        this.elements.grab.classList.remove('grabbing');\n        this.elements.root.style.transition = transition;\n        disposables.dispose();\n      }));\n    }));\n    const onGrabKeyDown = Event.chain(this._register(new DomEmitter(this.elements.grab, 'keydown')).event, $ => $.map(e => new StandardKeyboardEvent(e)));\n    this._register(onGrabKeyDown(e => {\n      let right;\n      let top;\n      if (e.keyCode === 15 /* KeyCode.LeftArrow */) {\n        right = Number.POSITIVE_INFINITY;\n      } else if (e.keyCode === 17 /* KeyCode.RightArrow */) {\n        right = 0;\n      } else if (e.keyCode === 10 /* KeyCode.Space */) {\n        right = this.right === 0 ? Number.POSITIVE_INFINITY : 0;\n      }\n      if (e.keyCode === 16 /* KeyCode.UpArrow */) {\n        top = 0;\n      } else if (e.keyCode === 18 /* KeyCode.DownArrow */) {\n        top = Number.POSITIVE_INFINITY;\n      }\n      if (right !== undefined) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.right = right;\n        this.layout();\n      }\n      if (top !== undefined) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.top = top;\n        const transition = this.elements.root.style.transition;\n        this.elements.root.style.transition = 'unset';\n        this.layout();\n        setTimeout(() => {\n          this.elements.root.style.transition = transition;\n        }, 0);\n      }\n    }));\n    this.onDidChangeValue = this.findInput.onDidChange;\n  }\n  layout(width = this.width) {\n    this.width = width;\n    this.right = clamp(this.right, 0, Math.max(0, width - 212));\n    this.elements.root.style.right = `${this.right}px`;\n    this.top = clamp(this.top, 0, 24);\n    this.elements.root.style.top = `${this.top}px`;\n  }\n  showMessage(message) {\n    this.findInput.showMessage(message);\n  }\n  clearMessage() {\n    this.findInput.clearMessage();\n  }\n  async dispose() {\n    this._onDidDisable.fire();\n    this.elements.root.classList.add('disabled');\n    await timeout(300);\n    super.dispose();\n  }\n}\nclass FindController {\n  get pattern() {\n    return this._pattern;\n  }\n  get mode() {\n    return this._mode;\n  }\n  set mode(mode) {\n    if (mode === this._mode) {\n      return;\n    }\n    this._mode = mode;\n    if (this.widget) {\n      this.widget.mode = this._mode;\n    }\n    this.tree.refilter();\n    this.render();\n    this._onDidChangeMode.fire(mode);\n  }\n  get matchType() {\n    return this._matchType;\n  }\n  set matchType(matchType) {\n    if (matchType === this._matchType) {\n      return;\n    }\n    this._matchType = matchType;\n    if (this.widget) {\n      this.widget.matchType = this._matchType;\n    }\n    this.tree.refilter();\n    this.render();\n    this._onDidChangeMatchType.fire(matchType);\n  }\n  constructor(tree, model, view, filter, contextViewProvider, options = {}) {\n    var _a, _b;\n    this.tree = tree;\n    this.view = view;\n    this.filter = filter;\n    this.contextViewProvider = contextViewProvider;\n    this.options = options;\n    this._pattern = '';\n    this.width = 0;\n    this._onDidChangeMode = new Emitter();\n    this.onDidChangeMode = this._onDidChangeMode.event;\n    this._onDidChangeMatchType = new Emitter();\n    this.onDidChangeMatchType = this._onDidChangeMatchType.event;\n    this._onDidChangePattern = new Emitter();\n    this._onDidChangeOpenState = new Emitter();\n    this.onDidChangeOpenState = this._onDidChangeOpenState.event;\n    this.enabledDisposables = new DisposableStore();\n    this.disposables = new DisposableStore();\n    this._mode = (_a = tree.options.defaultFindMode) !== null && _a !== void 0 ? _a : TreeFindMode.Highlight;\n    this._matchType = (_b = tree.options.defaultFindMatchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n    model.onDidSplice(this.onDidSpliceModel, this, this.disposables);\n  }\n  updateOptions(optionsUpdate = {}) {\n    if (optionsUpdate.defaultFindMode !== undefined) {\n      this.mode = optionsUpdate.defaultFindMode;\n    }\n    if (optionsUpdate.defaultFindMatchType !== undefined) {\n      this.matchType = optionsUpdate.defaultFindMatchType;\n    }\n  }\n  onDidSpliceModel() {\n    if (!this.widget || this.pattern.length === 0) {\n      return;\n    }\n    this.tree.refilter();\n    this.render();\n  }\n  render() {\n    var _a, _b, _c, _d;\n    const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n    if (this.pattern && noMatches) {\n      if ((_a = this.tree.options.showNotFoundMessage) !== null && _a !== void 0 ? _a : true) {\n        (_b = this.widget) === null || _b === void 0 ? void 0 : _b.showMessage({\n          type: 2 /* MessageType.WARNING */,\n          content: localize('not found', \"No elements found.\")\n        });\n      } else {\n        (_c = this.widget) === null || _c === void 0 ? void 0 : _c.showMessage({\n          type: 2 /* MessageType.WARNING */\n        });\n      }\n    } else {\n      (_d = this.widget) === null || _d === void 0 ? void 0 : _d.clearMessage();\n    }\n  }\n  shouldAllowFocus(node) {\n    if (!this.widget || !this.pattern) {\n      return true;\n    }\n    if (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n      return true;\n    }\n    return !FuzzyScore.isDefault(node.filterData);\n  }\n  layout(width) {\n    var _a;\n    this.width = width;\n    (_a = this.widget) === null || _a === void 0 ? void 0 : _a.layout(width);\n  }\n  dispose() {\n    this._history = undefined;\n    this._onDidChangePattern.dispose();\n    this.enabledDisposables.dispose();\n    this.disposables.dispose();\n  }\n}\nfunction stickyScrollNodeStateEquals(node1, node2) {\n  return node1.position === node2.position && stickyScrollNodeEquals(node1, node2);\n}\nfunction stickyScrollNodeEquals(node1, node2) {\n  return node1.node.element === node2.node.element && node1.startIndex === node2.startIndex && node1.height === node2.height && node1.endIndex === node2.endIndex;\n}\nclass StickyScrollState {\n  constructor(stickyNodes = []) {\n    this.stickyNodes = stickyNodes;\n  }\n  get count() {\n    return this.stickyNodes.length;\n  }\n  equal(state) {\n    return equals(this.stickyNodes, state.stickyNodes, stickyScrollNodeStateEquals);\n  }\n  lastNodePartiallyVisible() {\n    if (this.count === 0) {\n      return false;\n    }\n    const lastStickyNode = this.stickyNodes[this.count - 1];\n    if (this.count === 1) {\n      return lastStickyNode.position !== 0;\n    }\n    const secondLastStickyNode = this.stickyNodes[this.count - 2];\n    return secondLastStickyNode.position + secondLastStickyNode.height !== lastStickyNode.position;\n  }\n  animationStateChanged(previousState) {\n    if (!equals(this.stickyNodes, previousState.stickyNodes, stickyScrollNodeEquals)) {\n      return false;\n    }\n    if (this.count === 0) {\n      return false;\n    }\n    const lastStickyNode = this.stickyNodes[this.count - 1];\n    const previousLastStickyNode = previousState.stickyNodes[previousState.count - 1];\n    return lastStickyNode.position !== previousLastStickyNode.position;\n  }\n}\nclass DefaultStickyScrollDelegate {\n  constrainStickyScrollNodes(stickyNodes, stickyScrollMaxItemCount, maxWidgetHeight) {\n    for (let i = 0; i < stickyNodes.length; i++) {\n      const stickyNode = stickyNodes[i];\n      const stickyNodeBottom = stickyNode.position + stickyNode.height;\n      if (stickyNodeBottom > maxWidgetHeight || i >= stickyScrollMaxItemCount) {\n        return stickyNodes.slice(0, i);\n      }\n    }\n    return stickyNodes;\n  }\n}\nclass StickyScrollController extends Disposable {\n  constructor(tree, model, view, renderers, treeDelegate, options = {}) {\n    var _a;\n    super();\n    this.tree = tree;\n    this.model = model;\n    this.view = view;\n    this.treeDelegate = treeDelegate;\n    this.maxWidgetViewRatio = 0.4;\n    const stickyScrollOptions = this.validateStickySettings(options);\n    this.stickyScrollMaxItemCount = stickyScrollOptions.stickyScrollMaxItemCount;\n    this.stickyScrollDelegate = (_a = options.stickyScrollDelegate) !== null && _a !== void 0 ? _a : new DefaultStickyScrollDelegate();\n    this._widget = this._register(new StickyScrollWidget(view.getScrollableElement(), view, tree, renderers, treeDelegate, options.accessibilityProvider));\n    this.onDidChangeHasFocus = this._widget.onDidChangeHasFocus;\n    this.onContextMenu = this._widget.onContextMenu;\n    this._register(view.onDidScroll(() => this.update()));\n    this._register(view.onDidChangeContentHeight(() => this.update()));\n    this._register(tree.onDidChangeCollapseState(() => this.update()));\n    this.update();\n  }\n  getNodeAtHeight(height) {\n    let index;\n    if (height === 0) {\n      index = this.view.firstVisibleIndex;\n    } else {\n      index = this.view.indexAt(height + this.view.scrollTop);\n    }\n    if (index < 0 || index >= this.view.length) {\n      return undefined;\n    }\n    return this.view.element(index);\n  }\n  update() {\n    const firstVisibleNode = this.getNodeAtHeight(0);\n    // Don't render anything if there are no elements\n    if (!firstVisibleNode || this.tree.scrollTop === 0) {\n      this._widget.setState(undefined);\n      return;\n    }\n    const stickyState = this.findStickyState(firstVisibleNode);\n    this._widget.setState(stickyState);\n  }\n  findStickyState(firstVisibleNode) {\n    const stickyNodes = [];\n    let firstVisibleNodeUnderWidget = firstVisibleNode;\n    let stickyNodesHeight = 0;\n    let nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, undefined, stickyNodesHeight);\n    while (nextStickyNode) {\n      stickyNodes.push(nextStickyNode);\n      stickyNodesHeight += nextStickyNode.height;\n      if (stickyNodes.length <= this.stickyScrollMaxItemCount) {\n        firstVisibleNodeUnderWidget = this.getNextVisibleNode(nextStickyNode);\n        if (!firstVisibleNodeUnderWidget) {\n          break;\n        }\n      }\n      nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, nextStickyNode.node, stickyNodesHeight);\n    }\n    const contrainedStickyNodes = this.constrainStickyNodes(stickyNodes);\n    return contrainedStickyNodes.length ? new StickyScrollState(contrainedStickyNodes) : undefined;\n  }\n  getNextVisibleNode(previousStickyNode) {\n    return this.getNodeAtHeight(previousStickyNode.position + previousStickyNode.height);\n  }\n  getNextStickyNode(firstVisibleNodeUnderWidget, previousStickyNode, stickyNodesHeight) {\n    const nextStickyNode = this.getAncestorUnderPrevious(firstVisibleNodeUnderWidget, previousStickyNode);\n    if (!nextStickyNode) {\n      return undefined;\n    }\n    if (nextStickyNode === firstVisibleNodeUnderWidget) {\n      if (!this.nodeIsUncollapsedParent(firstVisibleNodeUnderWidget)) {\n        return undefined;\n      }\n      if (this.nodeTopAlignsWithStickyNodesBottom(firstVisibleNodeUnderWidget, stickyNodesHeight)) {\n        return undefined;\n      }\n    }\n    return this.createStickyScrollNode(nextStickyNode, stickyNodesHeight);\n  }\n  nodeTopAlignsWithStickyNodesBottom(node, stickyNodesHeight) {\n    const nodeIndex = this.getNodeIndex(node);\n    const elementTop = this.view.getElementTop(nodeIndex);\n    const stickyPosition = stickyNodesHeight;\n    return this.view.scrollTop === elementTop - stickyPosition;\n  }\n  createStickyScrollNode(node, currentStickyNodesHeight) {\n    const height = this.treeDelegate.getHeight(node);\n    const {\n      startIndex,\n      endIndex\n    } = this.getNodeRange(node);\n    const position = this.calculateStickyNodePosition(endIndex, currentStickyNodesHeight, height);\n    return {\n      node,\n      position,\n      height,\n      startIndex,\n      endIndex\n    };\n  }\n  getAncestorUnderPrevious(node, previousAncestor = undefined) {\n    let currentAncestor = node;\n    let parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n    while (parentOfcurrentAncestor) {\n      if (parentOfcurrentAncestor === previousAncestor) {\n        return currentAncestor;\n      }\n      currentAncestor = parentOfcurrentAncestor;\n      parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n    }\n    if (previousAncestor === undefined) {\n      return currentAncestor;\n    }\n    return undefined;\n  }\n  calculateStickyNodePosition(lastDescendantIndex, stickyRowPositionTop, stickyNodeHeight) {\n    let lastChildRelativeTop = this.view.getRelativeTop(lastDescendantIndex);\n    // If the last descendant is only partially visible at the top of the view, getRelativeTop() returns null\n    // In that case, utilize the next node's relative top to calculate the sticky node's position\n    if (lastChildRelativeTop === null && this.view.firstVisibleIndex === lastDescendantIndex && lastDescendantIndex + 1 < this.view.length) {\n      const nodeHeight = this.treeDelegate.getHeight(this.view.element(lastDescendantIndex));\n      const nextNodeRelativeTop = this.view.getRelativeTop(lastDescendantIndex + 1);\n      lastChildRelativeTop = nextNodeRelativeTop ? nextNodeRelativeTop - nodeHeight / this.view.renderHeight : null;\n    }\n    if (lastChildRelativeTop === null) {\n      return stickyRowPositionTop;\n    }\n    const lastChildNode = this.view.element(lastDescendantIndex);\n    const lastChildHeight = this.treeDelegate.getHeight(lastChildNode);\n    const topOfLastChild = lastChildRelativeTop * this.view.renderHeight;\n    const bottomOfLastChild = topOfLastChild + lastChildHeight;\n    if (stickyRowPositionTop + stickyNodeHeight > bottomOfLastChild && stickyRowPositionTop <= bottomOfLastChild) {\n      return bottomOfLastChild - stickyNodeHeight;\n    }\n    return stickyRowPositionTop;\n  }\n  constrainStickyNodes(stickyNodes) {\n    if (stickyNodes.length === 0) {\n      return [];\n    }\n    // Check if sticky nodes need to be constrained\n    const maximumStickyWidgetHeight = this.view.renderHeight * this.maxWidgetViewRatio;\n    const lastStickyNode = stickyNodes[stickyNodes.length - 1];\n    if (stickyNodes.length <= this.stickyScrollMaxItemCount && lastStickyNode.position + lastStickyNode.height <= maximumStickyWidgetHeight) {\n      return stickyNodes;\n    }\n    // constrain sticky nodes\n    const constrainedStickyNodes = this.stickyScrollDelegate.constrainStickyScrollNodes(stickyNodes, this.stickyScrollMaxItemCount, maximumStickyWidgetHeight);\n    if (!constrainedStickyNodes.length) {\n      return [];\n    }\n    // Validate constraints\n    const lastConstrainedStickyNode = constrainedStickyNodes[constrainedStickyNodes.length - 1];\n    if (constrainedStickyNodes.length > this.stickyScrollMaxItemCount || lastConstrainedStickyNode.position + lastConstrainedStickyNode.height > maximumStickyWidgetHeight) {\n      throw new Error('stickyScrollDelegate violates constraints');\n    }\n    return constrainedStickyNodes;\n  }\n  getParentNode(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    const parentLocation = this.model.getParentNodeLocation(nodeLocation);\n    return parentLocation ? this.model.getNode(parentLocation) : undefined;\n  }\n  nodeIsUncollapsedParent(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    return this.model.getListRenderCount(nodeLocation) > 1;\n  }\n  getNodeIndex(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    const nodeIndex = this.model.getListIndex(nodeLocation);\n    return nodeIndex;\n  }\n  getNodeRange(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    const startIndex = this.model.getListIndex(nodeLocation);\n    if (startIndex < 0) {\n      throw new Error('Node not found in tree');\n    }\n    const renderCount = this.model.getListRenderCount(nodeLocation);\n    const endIndex = startIndex + renderCount - 1;\n    return {\n      startIndex,\n      endIndex\n    };\n  }\n  nodePositionTopBelowWidget(node) {\n    const ancestors = [];\n    let currentAncestor = this.getParentNode(node);\n    while (currentAncestor) {\n      ancestors.push(currentAncestor);\n      currentAncestor = this.getParentNode(currentAncestor);\n    }\n    let widgetHeight = 0;\n    for (let i = 0; i < ancestors.length && i < this.stickyScrollMaxItemCount; i++) {\n      widgetHeight += this.treeDelegate.getHeight(ancestors[i]);\n    }\n    return widgetHeight;\n  }\n  domFocus() {\n    this._widget.domFocus();\n  }\n  // Whether sticky scroll was the last focused part in the tree or not\n  focusedLast() {\n    return this._widget.focusedLast();\n  }\n  updateOptions(optionsUpdate = {}) {\n    if (!optionsUpdate.stickyScrollMaxItemCount) {\n      return;\n    }\n    const validatedOptions = this.validateStickySettings(optionsUpdate);\n    if (this.stickyScrollMaxItemCount !== validatedOptions.stickyScrollMaxItemCount) {\n      this.stickyScrollMaxItemCount = validatedOptions.stickyScrollMaxItemCount;\n      this.update();\n    }\n  }\n  validateStickySettings(options) {\n    let stickyScrollMaxItemCount = 7;\n    if (typeof options.stickyScrollMaxItemCount === 'number') {\n      stickyScrollMaxItemCount = Math.max(options.stickyScrollMaxItemCount, 1);\n    }\n    return {\n      stickyScrollMaxItemCount\n    };\n  }\n}\nclass StickyScrollWidget {\n  constructor(container, view, tree, treeRenderers, treeDelegate, accessibilityProvider) {\n    this.view = view;\n    this.tree = tree;\n    this.treeRenderers = treeRenderers;\n    this.treeDelegate = treeDelegate;\n    this.accessibilityProvider = accessibilityProvider;\n    this._previousElements = [];\n    this._previousStateDisposables = new DisposableStore();\n    this._rootDomNode = $('.monaco-tree-sticky-container.empty');\n    container.appendChild(this._rootDomNode);\n    const shadow = $('.monaco-tree-sticky-container-shadow');\n    this._rootDomNode.appendChild(shadow);\n    this.stickyScrollFocus = new StickyScrollFocus(this._rootDomNode, view);\n    this.onDidChangeHasFocus = this.stickyScrollFocus.onDidChangeHasFocus;\n    this.onContextMenu = this.stickyScrollFocus.onContextMenu;\n  }\n  setState(state) {\n    const wasVisible = !!this._previousState && this._previousState.count > 0;\n    const isVisible = !!state && state.count > 0;\n    // If state has not changed, do nothing\n    if (!wasVisible && !isVisible || wasVisible && isVisible && this._previousState.equal(state)) {\n      return;\n    }\n    // Update visibility of the widget if changed\n    if (wasVisible !== isVisible) {\n      this.setVisible(isVisible);\n    }\n    if (!isVisible) {\n      this._previousState = undefined;\n      this._previousElements = [];\n      this._previousStateDisposables.clear();\n      return;\n    }\n    const lastStickyNode = state.stickyNodes[state.count - 1];\n    // If the new state is only a change in the last node's position, update the position of the last element\n    if (this._previousState && state.animationStateChanged(this._previousState)) {\n      this._previousElements[this._previousState.count - 1].style.top = `${lastStickyNode.position}px`;\n    }\n    // create new dom elements\n    else {\n      this._previousStateDisposables.clear();\n      const elements = Array(state.count);\n      for (let stickyIndex = state.count - 1; stickyIndex >= 0; stickyIndex--) {\n        const stickyNode = state.stickyNodes[stickyIndex];\n        const {\n          element,\n          disposable\n        } = this.createElement(stickyNode, stickyIndex, state.count);\n        elements[stickyIndex] = element;\n        this._rootDomNode.appendChild(element);\n        this._previousStateDisposables.add(disposable);\n      }\n      this.stickyScrollFocus.updateElements(elements, state);\n      this._previousElements = elements;\n    }\n    this._previousState = state;\n    // Set the height of the widget to the bottom of the last sticky node\n    this._rootDomNode.style.height = `${lastStickyNode.position + lastStickyNode.height}px`;\n  }\n  createElement(stickyNode, stickyIndex, stickyNodesTotal) {\n    const nodeIndex = stickyNode.startIndex;\n    // Sticky element container\n    const stickyElement = document.createElement('div');\n    stickyElement.style.top = `${stickyNode.position}px`;\n    stickyElement.style.height = `${stickyNode.height}px`;\n    stickyElement.style.lineHeight = `${stickyNode.height}px`;\n    stickyElement.classList.add('monaco-tree-sticky-row');\n    stickyElement.classList.add('monaco-list-row');\n    stickyElement.setAttribute('data-index', `${nodeIndex}`);\n    stickyElement.setAttribute('data-parity', nodeIndex % 2 === 0 ? 'even' : 'odd');\n    stickyElement.setAttribute('id', this.view.getElementID(nodeIndex));\n    this.setAccessibilityAttributes(stickyElement, stickyNode.node.element, stickyIndex, stickyNodesTotal);\n    // Get the renderer for the node\n    const nodeTemplateId = this.treeDelegate.getTemplateId(stickyNode.node);\n    const renderer = this.treeRenderers.find(renderer => renderer.templateId === nodeTemplateId);\n    if (!renderer) {\n      throw new Error(`No renderer found for template id ${nodeTemplateId}`);\n    }\n    // To make sure we do not influence the original node, we create a copy of the node\n    // We need to check if it is already a unique instance of the node by the delegate\n    let nodeCopy = stickyNode.node;\n    if (nodeCopy === this.tree.getNode(this.tree.getNodeLocation(stickyNode.node))) {\n      nodeCopy = new Proxy(stickyNode.node, {});\n    }\n    // Render the element\n    const templateData = renderer.renderTemplate(stickyElement);\n    renderer.renderElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n    // Remove the element from the DOM when state is disposed\n    const disposable = toDisposable(() => {\n      renderer.disposeElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n      renderer.disposeTemplate(templateData);\n      stickyElement.remove();\n    });\n    return {\n      element: stickyElement,\n      disposable\n    };\n  }\n  setAccessibilityAttributes(container, element, stickyIndex, stickyNodesTotal) {\n    var _a;\n    if (!this.accessibilityProvider) {\n      return;\n    }\n    if (this.accessibilityProvider.getSetSize) {\n      container.setAttribute('aria-setsize', String(this.accessibilityProvider.getSetSize(element, stickyIndex, stickyNodesTotal)));\n    }\n    if (this.accessibilityProvider.getPosInSet) {\n      container.setAttribute('aria-posinset', String(this.accessibilityProvider.getPosInSet(element, stickyIndex)));\n    }\n    if (this.accessibilityProvider.getRole) {\n      container.setAttribute('role', (_a = this.accessibilityProvider.getRole(element)) !== null && _a !== void 0 ? _a : 'treeitem');\n    }\n    const ariaLabel = this.accessibilityProvider.getAriaLabel(element);\n    if (ariaLabel) {\n      container.setAttribute('aria-label', ariaLabel);\n    }\n    const ariaLevel = this.accessibilityProvider.getAriaLevel && this.accessibilityProvider.getAriaLevel(element);\n    if (typeof ariaLevel === 'number') {\n      container.setAttribute('aria-level', `${ariaLevel}`);\n    }\n    // Sticky Scroll elements can not be selected\n    container.setAttribute('aria-selected', String(false));\n  }\n  setVisible(visible) {\n    this._rootDomNode.classList.toggle('empty', !visible);\n    if (!visible) {\n      this.stickyScrollFocus.updateElements([], undefined);\n    }\n  }\n  domFocus() {\n    this.stickyScrollFocus.domFocus();\n  }\n  focusedLast() {\n    return this.stickyScrollFocus.focusedLast();\n  }\n  dispose() {\n    this.stickyScrollFocus.dispose();\n    this._previousStateDisposables.dispose();\n    this._rootDomNode.remove();\n  }\n}\nclass StickyScrollFocus extends Disposable {\n  get domHasFocus() {\n    return this._domHasFocus;\n  }\n  set domHasFocus(hasFocus) {\n    if (hasFocus !== this._domHasFocus) {\n      this._onDidChangeHasFocus.fire(hasFocus);\n      this._domHasFocus = hasFocus;\n    }\n  }\n  constructor(container, view) {\n    super();\n    this.container = container;\n    this.view = view;\n    this.focusedIndex = -1;\n    this.elements = [];\n    this._onDidChangeHasFocus = new Emitter();\n    this.onDidChangeHasFocus = this._onDidChangeHasFocus.event;\n    this._onContextMenu = new Emitter();\n    this.onContextMenu = this._onContextMenu.event;\n    this._domHasFocus = false;\n    this.container.addEventListener('focus', () => this.onFocus());\n    this.container.addEventListener('blur', () => this.onBlur());\n    this._register(this.view.onDidFocus(() => this.toggleStickyScrollFocused(false)));\n    this._register(this.view.onKeyDown(e => this.onKeyDown(e)));\n    this._register(this.view.onMouseDown(e => this.onMouseDown(e)));\n    this._register(this.view.onContextMenu(e => this.handleContextMenu(e)));\n  }\n  handleContextMenu(e) {\n    const target = e.browserEvent.target;\n    if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n      if (this.focusedLast()) {\n        this.view.domFocus();\n      }\n      return;\n    }\n    // The list handles the context menu triggered by a mouse event\n    // In that case only set the focus of the element clicked and leave the rest to the list to handle\n    if (!isKeyboardEvent(e.browserEvent)) {\n      if (!this.state) {\n        throw new Error('Context menu should not be triggered when state is undefined');\n      }\n      const stickyIndex = this.state.stickyNodes.findIndex(stickyNode => {\n        var _a;\n        return stickyNode.node.element === ((_a = e.element) === null || _a === void 0 ? void 0 : _a.element);\n      });\n      if (stickyIndex === -1) {\n        throw new Error('Context menu should not be triggered when element is not in sticky scroll widget');\n      }\n      this.container.focus();\n      this.setFocus(stickyIndex);\n      return;\n    }\n    if (!this.state || this.focusedIndex < 0) {\n      throw new Error('Context menu key should not be triggered when focus is not in sticky scroll widget');\n    }\n    const stickyNode = this.state.stickyNodes[this.focusedIndex];\n    const element = stickyNode.node.element;\n    const anchor = this.elements[this.focusedIndex];\n    this._onContextMenu.fire({\n      element,\n      anchor,\n      browserEvent: e.browserEvent,\n      isStickyScroll: true\n    });\n  }\n  onKeyDown(e) {\n    // Sticky Scroll Navigation\n    if (this.domHasFocus && this.state) {\n      // Move up\n      if (e.key === 'ArrowUp') {\n        this.setFocusedElement(Math.max(0, this.focusedIndex - 1));\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      // Move down, if last sticky node is focused, move focus into first child of last sticky node\n      else if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {\n        if (this.focusedIndex >= this.state.count - 1) {\n          const nodeIndexToFocus = this.state.stickyNodes[this.state.count - 1].startIndex + 1;\n          this.view.domFocus();\n          this.view.setFocus([nodeIndexToFocus]);\n          this.scrollNodeUnderWidget(nodeIndexToFocus, this.state);\n        } else {\n          this.setFocusedElement(this.focusedIndex + 1);\n        }\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    }\n  }\n  onMouseDown(e) {\n    const target = e.browserEvent.target;\n    if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n      return;\n    }\n    e.browserEvent.preventDefault();\n    e.browserEvent.stopPropagation();\n  }\n  updateElements(elements, state) {\n    if (state && state.count === 0) {\n      throw new Error('Sticky scroll state must be undefined when there are no sticky nodes');\n    }\n    if (state && state.count !== elements.length) {\n      throw new Error('Sticky scroll focus received illigel state');\n    }\n    const previousIndex = this.focusedIndex;\n    this.removeFocus();\n    this.elements = elements;\n    this.state = state;\n    if (state) {\n      const newFocusedIndex = clamp(previousIndex, 0, state.count - 1);\n      this.setFocus(newFocusedIndex);\n    } else {\n      if (this.domHasFocus) {\n        this.view.domFocus();\n      }\n    }\n    // must come last as it calls blur()\n    this.container.tabIndex = state ? 0 : -1;\n  }\n  setFocusedElement(stickyIndex) {\n    // doesn't imply that the widget has (or will have) focus\n    const state = this.state;\n    if (!state) {\n      throw new Error('Cannot set focus when state is undefined');\n    }\n    this.setFocus(stickyIndex);\n    if (stickyIndex < state.count - 1) {\n      return;\n    }\n    // If the last sticky node is not fully visible, scroll it into view\n    if (state.lastNodePartiallyVisible()) {\n      const lastStickyNode = state.stickyNodes[stickyIndex];\n      this.scrollNodeUnderWidget(lastStickyNode.endIndex + 1, state);\n    }\n  }\n  scrollNodeUnderWidget(nodeIndex, state) {\n    const lastStickyNode = state.stickyNodes[state.count - 1];\n    const secondLastStickyNode = state.count > 1 ? state.stickyNodes[state.count - 2] : undefined;\n    const elementScrollTop = this.view.getElementTop(nodeIndex);\n    const elementTargetViewTop = secondLastStickyNode ? secondLastStickyNode.position + secondLastStickyNode.height + lastStickyNode.height : lastStickyNode.height;\n    this.view.scrollTop = elementScrollTop - elementTargetViewTop;\n  }\n  domFocus() {\n    if (!this.state) {\n      throw new Error('Cannot focus when state is undefined');\n    }\n    this.container.focus();\n  }\n  focusedLast() {\n    if (!this.state) {\n      return false;\n    }\n    return this.view.getHTMLElement().classList.contains('sticky-scroll-focused');\n  }\n  removeFocus() {\n    if (this.focusedIndex === -1) {\n      return;\n    }\n    this.toggleElementFocus(this.elements[this.focusedIndex], false);\n    this.focusedIndex = -1;\n  }\n  setFocus(newFocusIndex) {\n    if (0 > newFocusIndex) {\n      throw new Error('addFocus() can not remove focus');\n    }\n    if (!this.state && newFocusIndex >= 0) {\n      throw new Error('Cannot set focus index when state is undefined');\n    }\n    if (this.state && newFocusIndex >= this.state.count) {\n      throw new Error('Cannot set focus index to an index that does not exist');\n    }\n    const oldIndex = this.focusedIndex;\n    if (oldIndex >= 0) {\n      this.toggleElementFocus(this.elements[oldIndex], false);\n    }\n    if (newFocusIndex >= 0) {\n      this.toggleElementFocus(this.elements[newFocusIndex], true);\n    }\n    this.focusedIndex = newFocusIndex;\n  }\n  toggleElementFocus(element, focused) {\n    element.classList.toggle('focused', focused);\n  }\n  toggleStickyScrollFocused(focused) {\n    // Weather the last focus in the view was sticky scroll and not the list\n    this.view.getHTMLElement().classList.toggle('sticky-scroll-focused', focused);\n  }\n  onFocus() {\n    if (!this.state || this.elements.length === 0) {\n      throw new Error('Cannot focus when state is undefined or elements are empty');\n    }\n    this.domHasFocus = true;\n    this.toggleStickyScrollFocused(true);\n    if (this.focusedIndex === -1) {\n      this.setFocus(0);\n    }\n  }\n  onBlur() {\n    this.domHasFocus = false;\n  }\n  dispose() {\n    this.toggleStickyScrollFocused(false);\n    this._onDidChangeHasFocus.fire(false);\n    super.dispose();\n  }\n}\nfunction asTreeMouseEvent(event) {\n  let target = TreeMouseEventTarget.Unknown;\n  if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-twistie', 'monaco-tl-row')) {\n    target = TreeMouseEventTarget.Twistie;\n  } else if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-contents', 'monaco-tl-row')) {\n    target = TreeMouseEventTarget.Element;\n  } else if (hasParentWithClass(event.browserEvent.target, 'monaco-tree-type-filter', 'monaco-list')) {\n    target = TreeMouseEventTarget.Filter;\n  }\n  return {\n    browserEvent: event.browserEvent,\n    element: event.element ? event.element.element : null,\n    target\n  };\n}\nfunction dfs(node, fn) {\n  fn(node);\n  node.children.forEach(child => dfs(child, fn));\n}\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait {\n  get nodeSet() {\n    if (!this._nodeSet) {\n      this._nodeSet = this.createNodeSet();\n    }\n    return this._nodeSet;\n  }\n  constructor(getFirstViewElementWithTrait, identityProvider) {\n    this.getFirstViewElementWithTrait = getFirstViewElementWithTrait;\n    this.identityProvider = identityProvider;\n    this.nodes = [];\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n  }\n  set(nodes, browserEvent) {\n    if (!(browserEvent === null || browserEvent === void 0 ? void 0 : browserEvent.__forceEvent) && equals(this.nodes, nodes)) {\n      return;\n    }\n    this._set(nodes, false, browserEvent);\n  }\n  _set(nodes, silent, browserEvent) {\n    this.nodes = [...nodes];\n    this.elements = undefined;\n    this._nodeSet = undefined;\n    if (!silent) {\n      const that = this;\n      this._onDidChange.fire({\n        get elements() {\n          return that.get();\n        },\n        browserEvent\n      });\n    }\n  }\n  get() {\n    if (!this.elements) {\n      this.elements = this.nodes.map(node => node.element);\n    }\n    return [...this.elements];\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  has(node) {\n    return this.nodeSet.has(node);\n  }\n  onDidModelSplice({\n    insertedNodes,\n    deletedNodes\n  }) {\n    if (!this.identityProvider) {\n      const set = this.createNodeSet();\n      const visit = node => set.delete(node);\n      deletedNodes.forEach(node => dfs(node, visit));\n      this.set([...set.values()]);\n      return;\n    }\n    const deletedNodesIdSet = new Set();\n    const deletedNodesVisitor = node => deletedNodesIdSet.add(this.identityProvider.getId(node.element).toString());\n    deletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n    const insertedNodesMap = new Map();\n    const insertedNodesVisitor = node => insertedNodesMap.set(this.identityProvider.getId(node.element).toString(), node);\n    insertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n    const nodes = [];\n    for (const node of this.nodes) {\n      const id = this.identityProvider.getId(node.element).toString();\n      const wasDeleted = deletedNodesIdSet.has(id);\n      if (!wasDeleted) {\n        nodes.push(node);\n      } else {\n        const insertedNode = insertedNodesMap.get(id);\n        if (insertedNode && insertedNode.visible) {\n          nodes.push(insertedNode);\n        }\n      }\n    }\n    if (this.nodes.length > 0 && nodes.length === 0) {\n      const node = this.getFirstViewElementWithTrait();\n      if (node) {\n        nodes.push(node);\n      }\n    }\n    this._set(nodes, true);\n  }\n  createNodeSet() {\n    const set = new Set();\n    for (const node of this.nodes) {\n      set.add(node);\n    }\n    return set;\n  }\n}\nclass TreeNodeListMouseController extends MouseController {\n  constructor(list, tree, stickyScrollProvider) {\n    super(list);\n    this.tree = tree;\n    this.stickyScrollProvider = stickyScrollProvider;\n  }\n  onViewPointer(e) {\n    if (isButton(e.browserEvent.target) || isInputElement(e.browserEvent.target) || isMonacoEditor(e.browserEvent.target)) {\n      return;\n    }\n    if (e.browserEvent.isHandledByList) {\n      return;\n    }\n    const node = e.element;\n    if (!node) {\n      return super.onViewPointer(e);\n    }\n    if (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n      return super.onViewPointer(e);\n    }\n    const target = e.browserEvent.target;\n    const onTwistie = target.classList.contains('monaco-tl-twistie') || target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16;\n    const isStickyElement = isStickyScrollElement(e.browserEvent.target);\n    let expandOnlyOnTwistieClick = false;\n    if (isStickyElement) {\n      expandOnlyOnTwistieClick = true;\n    } else if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n      expandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n    } else {\n      expandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n    }\n    if (!isStickyElement) {\n      if (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n        return super.onViewPointer(e);\n      }\n      if (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n        return super.onViewPointer(e);\n      }\n    } else {\n      this.handleStickyScrollMouseEvent(e, node);\n    }\n    if (node.collapsible && (!isStickyElement || onTwistie)) {\n      const location = this.tree.getNodeLocation(node);\n      const recursive = e.browserEvent.altKey;\n      this.tree.setFocus([location]);\n      this.tree.toggleCollapsed(location, recursive);\n      if (expandOnlyOnTwistieClick && onTwistie) {\n        // Do not set this before calling a handler on the super class, because it will reject it as handled\n        e.browserEvent.isHandledByList = true;\n        return;\n      }\n    }\n    if (!isStickyElement) {\n      super.onViewPointer(e);\n    }\n  }\n  handleStickyScrollMouseEvent(e, node) {\n    if (isMonacoCustomToggle(e.browserEvent.target) || isActionItem(e.browserEvent.target)) {\n      return;\n    }\n    const stickyScrollController = this.stickyScrollProvider();\n    if (!stickyScrollController) {\n      throw new Error('Sticky scroll controller not found');\n    }\n    const nodeIndex = this.list.indexOf(node);\n    const elementScrollTop = this.list.getElementTop(nodeIndex);\n    const elementTargetViewTop = stickyScrollController.nodePositionTopBelowWidget(node);\n    this.tree.scrollTop = elementScrollTop - elementTargetViewTop;\n    this.list.domFocus();\n    this.list.setFocus([nodeIndex]);\n    this.list.setSelection([nodeIndex]);\n  }\n  onDoubleClick(e) {\n    const onTwistie = e.browserEvent.target.classList.contains('monaco-tl-twistie');\n    if (onTwistie || !this.tree.expandOnDoubleClick) {\n      return;\n    }\n    if (e.browserEvent.isHandledByList) {\n      return;\n    }\n    super.onDoubleClick(e);\n  }\n  // to make sure dom focus is not stolen (for example with context menu)\n  onMouseDown(e) {\n    const target = e.browserEvent.target;\n    if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n      super.onMouseDown(e);\n      return;\n    }\n  }\n  onContextMenu(e) {\n    const target = e.browserEvent.target;\n    if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n      super.onContextMenu(e);\n      return;\n    }\n  }\n}\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList extends List {\n  constructor(user, container, virtualDelegate, renderers, focusTrait, selectionTrait, anchorTrait, options) {\n    super(user, container, virtualDelegate, renderers, options);\n    this.focusTrait = focusTrait;\n    this.selectionTrait = selectionTrait;\n    this.anchorTrait = anchorTrait;\n  }\n  createMouseController(options) {\n    return new TreeNodeListMouseController(this, options.tree, options.stickyScrollProvider);\n  }\n  splice(start, deleteCount, elements = []) {\n    super.splice(start, deleteCount, elements);\n    if (elements.length === 0) {\n      return;\n    }\n    const additionalFocus = [];\n    const additionalSelection = [];\n    let anchor;\n    elements.forEach((node, index) => {\n      if (this.focusTrait.has(node)) {\n        additionalFocus.push(start + index);\n      }\n      if (this.selectionTrait.has(node)) {\n        additionalSelection.push(start + index);\n      }\n      if (this.anchorTrait.has(node)) {\n        anchor = start + index;\n      }\n    });\n    if (additionalFocus.length > 0) {\n      super.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n    }\n    if (additionalSelection.length > 0) {\n      super.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n    }\n    if (typeof anchor === 'number') {\n      super.setAnchor(anchor);\n    }\n  }\n  setFocus(indexes, browserEvent, fromAPI = false) {\n    super.setFocus(indexes, browserEvent);\n    if (!fromAPI) {\n      this.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n    }\n  }\n  setSelection(indexes, browserEvent, fromAPI = false) {\n    super.setSelection(indexes, browserEvent);\n    if (!fromAPI) {\n      this.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n    }\n  }\n  setAnchor(index, fromAPI = false) {\n    super.setAnchor(index);\n    if (!fromAPI) {\n      if (typeof index === 'undefined') {\n        this.anchorTrait.set([]);\n      } else {\n        this.anchorTrait.set([this.element(index)]);\n      }\n    }\n  }\n}\nexport class AbstractTree {\n  get onDidScroll() {\n    return this.view.onDidScroll;\n  }\n  get onDidChangeFocus() {\n    return this.eventBufferer.wrapEvent(this.focus.onDidChange);\n  }\n  get onDidChangeSelection() {\n    return this.eventBufferer.wrapEvent(this.selection.onDidChange);\n  }\n  get onMouseDblClick() {\n    return Event.filter(Event.map(this.view.onMouseDblClick, asTreeMouseEvent), e => e.target !== TreeMouseEventTarget.Filter);\n  }\n  get onPointer() {\n    return Event.map(this.view.onPointer, asTreeMouseEvent);\n  }\n  get onDidFocus() {\n    return this.view.onDidFocus;\n  }\n  get onDidChangeModel() {\n    return Event.signal(this.model.onDidSplice);\n  }\n  get onDidChangeCollapseState() {\n    return this.model.onDidChangeCollapseState;\n  }\n  get findMode() {\n    var _a, _b;\n    return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : TreeFindMode.Highlight;\n  }\n  set findMode(findMode) {\n    if (this.findController) {\n      this.findController.mode = findMode;\n    }\n  }\n  get findMatchType() {\n    var _a, _b;\n    return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.matchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n  }\n  set findMatchType(findFuzzy) {\n    if (this.findController) {\n      this.findController.matchType = findFuzzy;\n    }\n  }\n  get expandOnDoubleClick() {\n    return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick;\n  }\n  get expandOnlyOnTwistieClick() {\n    return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick;\n  }\n  get onDidDispose() {\n    return this.view.onDidDispose;\n  }\n  constructor(_user, container, delegate, renderers, _options = {}) {\n    var _a;\n    this._user = _user;\n    this._options = _options;\n    this.eventBufferer = new EventBufferer();\n    this.onDidChangeFindOpenState = Event.None;\n    this.onDidChangeStickyScrollFocused = Event.None;\n    this.disposables = new DisposableStore();\n    this._onWillRefilter = new Emitter();\n    this.onWillRefilter = this._onWillRefilter.event;\n    this._onDidUpdateOptions = new Emitter();\n    this.treeDelegate = new ComposedTreeDelegate(delegate);\n    const onDidChangeCollapseStateRelay = new Relay();\n    const onDidChangeActiveNodes = new Relay();\n    const activeNodes = this.disposables.add(new EventCollection(onDidChangeActiveNodes.event));\n    const renderedIndentGuides = new SetMap();\n    this.renderers = renderers.map(r => new TreeRenderer(r, () => this.model, onDidChangeCollapseStateRelay.event, activeNodes, renderedIndentGuides, _options));\n    for (const r of this.renderers) {\n      this.disposables.add(r);\n    }\n    let filter;\n    if (_options.keyboardNavigationLabelProvider) {\n      filter = new FindFilter(this, _options.keyboardNavigationLabelProvider, _options.filter);\n      _options = {\n        ..._options,\n        filter: filter\n      }; // TODO need typescript help here\n      this.disposables.add(filter);\n    }\n    this.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n    this.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n    this.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n    this.view = new TreeNodeList(_user, container, this.treeDelegate, this.renderers, this.focus, this.selection, this.anchor, {\n      ...asListOptions(() => this.model, _options),\n      tree: this,\n      stickyScrollProvider: () => this.stickyScrollController\n    });\n    this.model = this.createModel(_user, this.view, _options);\n    onDidChangeCollapseStateRelay.input = this.model.onDidChangeCollapseState;\n    const onDidModelSplice = Event.forEach(this.model.onDidSplice, e => {\n      this.eventBufferer.bufferEvents(() => {\n        this.focus.onDidModelSplice(e);\n        this.selection.onDidModelSplice(e);\n      });\n    }, this.disposables);\n    // Make sure the `forEach` always runs\n    onDidModelSplice(() => null, null, this.disposables);\n    // Active nodes can change when the model changes or when focus or selection change.\n    // We debounce it with 0 delay since these events may fire in the same stack and we only\n    // want to run this once. It also doesn't matter if it runs on the next tick since it's only\n    // a nice to have UI feature.\n    const activeNodesEmitter = this.disposables.add(new Emitter());\n    const activeNodesDebounce = this.disposables.add(new Delayer(0));\n    this.disposables.add(Event.any(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange)(() => {\n      activeNodesDebounce.trigger(() => {\n        const set = new Set();\n        for (const node of this.focus.getNodes()) {\n          set.add(node);\n        }\n        for (const node of this.selection.getNodes()) {\n          set.add(node);\n        }\n        activeNodesEmitter.fire([...set.values()]);\n      });\n    }));\n    onDidChangeActiveNodes.input = activeNodesEmitter.event;\n    if (_options.keyboardSupport !== false) {\n      const onKeyDown = Event.chain(this.view.onKeyDown, $ => $.filter(e => !isInputElement(e.target)).map(e => new StandardKeyboardEvent(e)));\n      Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 15 /* KeyCode.LeftArrow */))(this.onLeftArrow, this, this.disposables);\n      Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 17 /* KeyCode.RightArrow */))(this.onRightArrow, this, this.disposables);\n      Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 10 /* KeyCode.Space */))(this.onSpace, this, this.disposables);\n    }\n    if (((_a = _options.findWidgetEnabled) !== null && _a !== void 0 ? _a : true) && _options.keyboardNavigationLabelProvider && _options.contextViewProvider) {\n      const opts = this.options.findWidgetStyles ? {\n        styles: this.options.findWidgetStyles\n      } : undefined;\n      this.findController = new FindController(this, this.model, this.view, filter, _options.contextViewProvider, opts);\n      this.focusNavigationFilter = node => this.findController.shouldAllowFocus(node);\n      this.onDidChangeFindOpenState = this.findController.onDidChangeOpenState;\n      this.disposables.add(this.findController);\n      this.onDidChangeFindMode = this.findController.onDidChangeMode;\n      this.onDidChangeFindMatchType = this.findController.onDidChangeMatchType;\n    } else {\n      this.onDidChangeFindMode = Event.None;\n      this.onDidChangeFindMatchType = Event.None;\n    }\n    if (_options.enableStickyScroll) {\n      this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, _options);\n      this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n    }\n    this.styleElement = createStyleSheet(this.view.getHTMLElement());\n    this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n  }\n  updateOptions(optionsUpdate = {}) {\n    var _a;\n    this._options = {\n      ...this._options,\n      ...optionsUpdate\n    };\n    for (const renderer of this.renderers) {\n      renderer.updateOptions(optionsUpdate);\n    }\n    this.view.updateOptions(this._options);\n    (_a = this.findController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n    this.updateStickyScroll(optionsUpdate);\n    this._onDidUpdateOptions.fire(this._options);\n    this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n  }\n  get options() {\n    return this._options;\n  }\n  updateStickyScroll(optionsUpdate) {\n    var _a;\n    if (!this.stickyScrollController && this._options.enableStickyScroll) {\n      this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, this._options);\n      this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n    } else if (this.stickyScrollController && !this._options.enableStickyScroll) {\n      this.onDidChangeStickyScrollFocused = Event.None;\n      this.stickyScrollController.dispose();\n      this.stickyScrollController = undefined;\n    }\n    (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n  }\n  // Widget\n  getHTMLElement() {\n    return this.view.getHTMLElement();\n  }\n  get scrollTop() {\n    return this.view.scrollTop;\n  }\n  set scrollTop(scrollTop) {\n    this.view.scrollTop = scrollTop;\n  }\n  get scrollHeight() {\n    return this.view.scrollHeight;\n  }\n  get renderHeight() {\n    return this.view.renderHeight;\n  }\n  domFocus() {\n    var _a;\n    if ((_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.focusedLast()) {\n      this.stickyScrollController.domFocus();\n    } else {\n      this.view.domFocus();\n    }\n  }\n  layout(height, width) {\n    var _a;\n    this.view.layout(height, width);\n    if (isNumber(width)) {\n      (_a = this.findController) === null || _a === void 0 ? void 0 : _a.layout(width);\n    }\n  }\n  style(styles) {\n    var _a;\n    const suffix = `.${this.view.domId}`;\n    const content = [];\n    if (styles.treeIndentGuidesStroke) {\n      content.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeInactiveIndentGuidesStroke}; }`);\n      content.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n    }\n    // Sticky Scroll Background\n    if (styles.listBackground) {\n      content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${styles.listBackground}; }`);\n      content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${styles.listBackground}; }`);\n    }\n    // Sticky Scroll Focus\n    if (styles.listFocusForeground) {\n      content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { color: ${styles.listFocusForeground}; }`);\n      content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { color: inherit; }`);\n    }\n    // Sticky Scroll Focus Outlines\n    const focusAndSelectionOutline = asCssValueWithDefault(styles.listFocusAndSelectionOutline, asCssValueWithDefault(styles.listSelectionOutline, (_a = styles.listFocusOutline) !== null && _a !== void 0 ? _a : ''));\n    if (focusAndSelectionOutline) {\n      // default: listFocusOutline\n      content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused.selected { outline: 1px solid ${focusAndSelectionOutline}; outline-offset: -1px;}`);\n      content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused.selected { outline: inherit;}`);\n    }\n    if (styles.listFocusOutline) {\n      // default: set\n      content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`);\n      content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { outline: inherit; }`);\n      content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n      content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused:not(.sticky-scroll-focused) .monaco-tree-sticky-container .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n    }\n    this.styleElement.textContent = content.join('\\n');\n    this.view.style(styles);\n  }\n  // Tree navigation\n  getParentElement(location) {\n    const parentRef = this.model.getParentNodeLocation(location);\n    const parentNode = this.model.getNode(parentRef);\n    return parentNode.element;\n  }\n  getFirstElementChild(location) {\n    return this.model.getFirstElementChild(location);\n  }\n  // Tree\n  getNode(location) {\n    return this.model.getNode(location);\n  }\n  getNodeLocation(node) {\n    return this.model.getNodeLocation(node);\n  }\n  collapse(location, recursive = false) {\n    return this.model.setCollapsed(location, true, recursive);\n  }\n  expand(location, recursive = false) {\n    return this.model.setCollapsed(location, false, recursive);\n  }\n  toggleCollapsed(location, recursive = false) {\n    return this.model.setCollapsed(location, undefined, recursive);\n  }\n  isCollapsible(location) {\n    return this.model.isCollapsible(location);\n  }\n  setCollapsible(location, collapsible) {\n    return this.model.setCollapsible(location, collapsible);\n  }\n  isCollapsed(location) {\n    return this.model.isCollapsed(location);\n  }\n  refilter() {\n    this._onWillRefilter.fire(undefined);\n    this.model.refilter();\n  }\n  setSelection(elements, browserEvent) {\n    this.eventBufferer.bufferEvents(() => {\n      const nodes = elements.map(e => this.model.getNode(e));\n      this.selection.set(nodes, browserEvent);\n      const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n      this.view.setSelection(indexes, browserEvent, true);\n    });\n  }\n  getSelection() {\n    return this.selection.get();\n  }\n  setFocus(elements, browserEvent) {\n    this.eventBufferer.bufferEvents(() => {\n      const nodes = elements.map(e => this.model.getNode(e));\n      this.focus.set(nodes, browserEvent);\n      const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n      this.view.setFocus(indexes, browserEvent, true);\n    });\n  }\n  getFocus() {\n    return this.focus.get();\n  }\n  reveal(location, relativeTop) {\n    this.model.expandTo(location);\n    const index = this.model.getListIndex(location);\n    if (index === -1) {\n      return;\n    }\n    if (!this.stickyScrollController) {\n      this.view.reveal(index, relativeTop);\n    } else {\n      const paddingTop = this.stickyScrollController.nodePositionTopBelowWidget(this.getNode(location));\n      this.view.reveal(index, relativeTop, paddingTop);\n    }\n  }\n  // List\n  onLeftArrow(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n    if (nodes.length === 0) {\n      return;\n    }\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const didChange = this.model.setCollapsed(location, true);\n    if (!didChange) {\n      const parentLocation = this.model.getParentNodeLocation(location);\n      if (!parentLocation) {\n        return;\n      }\n      const parentListIndex = this.model.getListIndex(parentLocation);\n      this.view.reveal(parentListIndex);\n      this.view.setFocus([parentListIndex]);\n    }\n  }\n  onRightArrow(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n    if (nodes.length === 0) {\n      return;\n    }\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const didChange = this.model.setCollapsed(location, false);\n    if (!didChange) {\n      if (!node.children.some(child => child.visible)) {\n        return;\n      }\n      const [focusedIndex] = this.view.getFocus();\n      const firstChildIndex = focusedIndex + 1;\n      this.view.reveal(firstChildIndex);\n      this.view.setFocus([firstChildIndex]);\n    }\n  }\n  onSpace(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n    if (nodes.length === 0) {\n      return;\n    }\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const recursive = e.browserEvent.altKey;\n    this.model.setCollapsed(location, undefined, recursive);\n  }\n  dispose() {\n    var _a;\n    dispose(this.disposables);\n    (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.view.dispose();\n  }\n}","map":{"version":3,"names":["$","append","clearNode","createStyleSheet","getWindow","h","hasParentWithClass","asCssValueWithDefault","isKeyboardEvent","DomEmitter","StandardKeyboardEvent","ActionBar","FindInput","unthemedInboxStyles","ElementsDragAndDropData","isActionItem","isButton","isInputElement","isMonacoCustomToggle","isMonacoEditor","isStickyScrollContainer","isStickyScrollElement","List","MouseController","Toggle","unthemedToggleStyles","getVisibleState","isFilterResult","TreeMouseEventTarget","Action","distinct","equals","range","Delayer","disposableTimeout","timeout","Codicon","ThemeIcon","SetMap","Emitter","Event","EventBufferer","Relay","fuzzyScore","FuzzyScore","Disposable","DisposableStore","dispose","toDisposable","clamp","isNumber","localize","TreeElementsDragAndDropData","constructor","data","elements","map","node","element","asTreeDragAndDropData","TreeNodeListDragAndDrop","modelProvider","dnd","autoExpandDisposable","None","disposables","getDragURI","getDragLabel","nodes","originalEvent","undefined","onDragStart","_a","_b","call","onDragOver","targetNode","targetIndex","targetSector","raw","result","didChangeAutoExpandNode","autoExpandNode","autoExpand","model","ref","getNodeLocation","isCollapsed","setCollapsed","accept","bubble","feedback","effect","parentRef","getParentNodeLocation","parentNode","getNode","parentIndex","getListIndex","start","length","getListRenderCount","drop","onDragEnd","asListOptions","options","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","e","isSelectionRangeChangeEvent","accessibilityProvider","getSetSize","visibleChildrenCount","getPosInSet","visibleChildIndex","isChecked","getRole","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","depth","getActiveDescendantId","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","ComposedTreeDelegate","delegate","getHeight","getTemplateId","hasDynamicHeight","setDynamicHeight","height","RenderIndentGuides","EventCollection","_elements","onDidChange","forEach","TreeRenderer","renderer","onDidChangeCollapseState","activeNodes","renderedIndentGuides","renderedElements","Map","renderedNodes","indent","DefaultIndent","hideTwistiesOfChildlessElements","shouldRenderIndentGuides","activeIndentNodes","Set","indentGuidesDisposable","templateId","updateOptions","onDidChangeNodeTwistieState","onDidChangeTwistieState","templateData","renderTreeElement","renderIndentGuides","_renderIndentGuides","_onDidChangeActiveNodes","renderTemplate","container","twistie","contents","renderElement","index","set","disposeElement","delete","disposeTemplate","get","style","paddingLeft","width","collapsible","setAttribute","String","collapsed","removeAttribute","classList","remove","asClassNameArray","treeItemExpanded","twistieRendered","renderTwistie","add","toggle","disposableStore","parent","guide","has","childElementCount","appendChild","insertBefore","firstElementChild","children","line","clear","FindFilter","totalCount","_totalCount","matchCount","_matchCount","tree","_filter","_pattern","_lowercasePattern","onWillRefilter","reset","filter","parentVisibility","visibility","Default","label","labels","Array","isArray","l","labelStr","toString","score","findMatchType","TreeFindMatchType","Contiguous","toLowerCase","indexOf","Number","MAX_SAFE_INTEGER","i","push","firstMatchCanBeWeak","boostFullMatch","findMode","TreeFindMode","Filter","defaultFindVisibility","ModeToggle","opts","icon","listFilter","title","inputActiveOptionBorder","inputActiveOptionForeground","inputActiveOptionBackground","FuzzyToggle","searchFuzzy","unthemedFindWidgetStyles","inputBoxStyles","toggleStyles","listFilterWidgetBackground","listFilterWidgetNoMatchesOutline","listFilterWidgetOutline","listFilterWidgetShadow","FindWidget","mode","modeToggle","checked","findInput","inputBox","setPlaceHolder","matchType","matchTypeToggle","Fuzzy","contextViewProvider","tabIndex","right","top","_onDidDisable","root","_register","removeChild","styles","backgroundColor","boxShadow","onDidChangeMode","onChange","Highlight","_store","onDidChangeMatchType","additionalToggles","showCommonFindToggles","history","actionbar","emitter","inputElement","onKeyDown","chain","event","preventDefault","stopPropagation","addToHistory","domFocus","isAtLastInHistory","isNowhereInHistory","showNextValue","showPreviousValue","closeAction","onGrabMouseDown","grab","onWindowMouseMove","onWindowMouseUp","startRight","startX","pageX","startTop","startY","pageY","transition","update","deltaX","deltaY","layout","onGrabKeyDown","keyCode","POSITIVE_INFINITY","setTimeout","onDidChangeValue","Math","max","showMessage","message","clearMessage","fire","FindController","pattern","_mode","widget","refilter","render","_onDidChangeMode","_matchType","_onDidChangeMatchType","view","_onDidChangePattern","_onDidChangeOpenState","onDidChangeOpenState","enabledDisposables","defaultFindMode","defaultFindMatchType","onDidSplice","onDidSpliceModel","optionsUpdate","_c","_d","noMatches","showNotFoundMessage","type","content","shouldAllowFocus","isDefault","filterData","_history","stickyScrollNodeStateEquals","node1","node2","position","stickyScrollNodeEquals","startIndex","endIndex","StickyScrollState","stickyNodes","count","equal","state","lastNodePartiallyVisible","lastStickyNode","secondLastStickyNode","animationStateChanged","previousState","previousLastStickyNode","DefaultStickyScrollDelegate","constrainStickyScrollNodes","stickyScrollMaxItemCount","maxWidgetHeight","stickyNode","stickyNodeBottom","slice","StickyScrollController","renderers","treeDelegate","maxWidgetViewRatio","stickyScrollOptions","validateStickySettings","stickyScrollDelegate","_widget","StickyScrollWidget","getScrollableElement","onDidChangeHasFocus","onContextMenu","onDidScroll","onDidChangeContentHeight","getNodeAtHeight","firstVisibleIndex","indexAt","scrollTop","firstVisibleNode","setState","stickyState","findStickyState","firstVisibleNodeUnderWidget","stickyNodesHeight","nextStickyNode","getNextStickyNode","getNextVisibleNode","contrainedStickyNodes","constrainStickyNodes","previousStickyNode","getAncestorUnderPrevious","nodeIsUncollapsedParent","nodeTopAlignsWithStickyNodesBottom","createStickyScrollNode","nodeIndex","getNodeIndex","elementTop","getElementTop","stickyPosition","currentStickyNodesHeight","getNodeRange","calculateStickyNodePosition","previousAncestor","currentAncestor","parentOfcurrentAncestor","getParentNode","lastDescendantIndex","stickyRowPositionTop","stickyNodeHeight","lastChildRelativeTop","getRelativeTop","nodeHeight","nextNodeRelativeTop","renderHeight","lastChildNode","lastChildHeight","topOfLastChild","bottomOfLastChild","maximumStickyWidgetHeight","constrainedStickyNodes","lastConstrainedStickyNode","Error","nodeLocation","parentLocation","renderCount","nodePositionTopBelowWidget","ancestors","widgetHeight","focusedLast","validatedOptions","treeRenderers","_previousElements","_previousStateDisposables","_rootDomNode","shadow","stickyScrollFocus","StickyScrollFocus","wasVisible","_previousState","isVisible","setVisible","stickyIndex","disposable","createElement","updateElements","stickyNodesTotal","stickyElement","document","lineHeight","getElementID","setAccessibilityAttributes","nodeTemplateId","find","nodeCopy","Proxy","ariaLabel","ariaLevel","visible","domHasFocus","_domHasFocus","hasFocus","_onDidChangeHasFocus","focusedIndex","_onContextMenu","addEventListener","onFocus","onBlur","onDidFocus","toggleStickyScrollFocused","onMouseDown","handleContextMenu","target","browserEvent","findIndex","focus","setFocus","anchor","isStickyScroll","key","setFocusedElement","nodeIndexToFocus","scrollNodeUnderWidget","previousIndex","removeFocus","newFocusedIndex","elementScrollTop","elementTargetViewTop","getHTMLElement","contains","toggleElementFocus","newFocusIndex","oldIndex","focused","asTreeMouseEvent","Unknown","Twistie","Element","dfs","fn","child","Trait","nodeSet","_nodeSet","createNodeSet","getFirstViewElementWithTrait","_onDidChange","__forceEvent","_set","silent","that","getNodes","onDidModelSplice","insertedNodes","deletedNodes","visit","values","deletedNodesIdSet","deletedNodesVisitor","insertedNodesMap","insertedNodesVisitor","id","wasDeleted","insertedNode","TreeNodeListMouseController","list","stickyScrollProvider","onViewPointer","isHandledByList","onTwistie","offsetX","isStickyElement","expandOnlyOnTwistieClick","detail","expandOnDoubleClick","handleStickyScrollMouseEvent","location","recursive","altKey","toggleCollapsed","stickyScrollController","setSelection","onDoubleClick","TreeNodeList","user","virtualDelegate","focusTrait","selectionTrait","anchorTrait","createMouseController","splice","deleteCount","additionalFocus","additionalSelection","getFocus","getSelection","setAnchor","indexes","fromAPI","AbstractTree","onDidChangeFocus","eventBufferer","wrapEvent","onDidChangeSelection","selection","onMouseDblClick","onPointer","onDidChangeModel","signal","findController","findFuzzy","_options","onDidDispose","_user","onDidChangeFindOpenState","onDidChangeStickyScrollFocused","_onWillRefilter","_onDidUpdateOptions","onDidChangeCollapseStateRelay","onDidChangeActiveNodes","r","getFocusedElements","getSelectedElements","getAnchorElement","createModel","input","bufferEvents","activeNodesEmitter","activeNodesDebounce","any","trigger","keyboardSupport","onLeftArrow","onRightArrow","onSpace","findWidgetEnabled","findWidgetStyles","focusNavigationFilter","onDidChangeFindMode","onDidChangeFindMatchType","enableStickyScroll","styleElement","Always","updateStickyScroll","scrollHeight","suffix","domId","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","listBackground","listFocusForeground","focusAndSelectionOutline","listFocusAndSelectionOutline","listSelectionOutline","listFocusOutline","textContent","join","getParentElement","getFirstElementChild","collapse","expand","isCollapsible","setCollapsible","reveal","relativeTop","expandTo","paddingTop","didChange","parentListIndex","some","firstChildIndex"],"sources":["D:/yupi/OJ System/OJ System/feioj-front/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/abstractTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append, clearNode, createStyleSheet, getWindow, h, hasParentWithClass, asCssValueWithDefault, isKeyboardEvent } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { FindInput } from '../findinput/findInput.js';\nimport { unthemedInboxStyles } from '../inputbox/inputBox.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { isActionItem, isButton, isInputElement, isMonacoCustomToggle, isMonacoEditor, isStickyScrollContainer, isStickyScrollElement, List, MouseController } from '../list/listWidget.js';\nimport { Toggle, unthemedToggleStyles } from '../toggle/toggle.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { TreeMouseEventTarget } from './tree.js';\nimport { Action } from '../../../common/actions.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { Delayer, disposableTimeout, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { SetMap } from '../../../common/map.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { Disposable, DisposableStore, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { isNumber } from '../../../common/types.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\nclass TreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new TreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass TreeNodeListDragAndDrop {\n    constructor(modelProvider, dnd) {\n        this.modelProvider = modelProvider;\n        this.dnd = dnd;\n        this.autoExpandDisposable = Disposable.None;\n        this.disposables = new DisposableStore();\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, targetSector, originalEvent, raw = true) {\n        const result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n        const didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n        if (didChangeAutoExpandNode) {\n            this.autoExpandDisposable.dispose();\n            this.autoExpandNode = targetNode;\n        }\n        if (typeof targetNode === 'undefined') {\n            return result;\n        }\n        if (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n            this.autoExpandDisposable = disposableTimeout(() => {\n                const model = this.modelProvider();\n                const ref = model.getNodeLocation(targetNode);\n                if (model.isCollapsed(ref)) {\n                    model.setCollapsed(ref, false);\n                }\n                this.autoExpandNode = undefined;\n            }, 500, this.disposables);\n        }\n        if (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n            if (!raw) {\n                const accept = typeof result === 'boolean' ? result : result.accept;\n                const effect = typeof result === 'boolean' ? undefined : result.effect;\n                return { accept, effect, feedback: [targetIndex] };\n            }\n            return result;\n        }\n        if (result.bubble === 1 /* TreeDragOverBubble.Up */) {\n            const model = this.modelProvider();\n            const ref = model.getNodeLocation(targetNode);\n            const parentRef = model.getParentNodeLocation(ref);\n            const parentNode = model.getNode(parentRef);\n            const parentIndex = parentRef && model.getListIndex(parentRef);\n            return this.onDragOver(data, parentNode, parentIndex, targetSector, originalEvent, false);\n        }\n        const model = this.modelProvider();\n        const ref = model.getNodeLocation(targetNode);\n        const start = model.getListIndex(ref);\n        const length = model.getListRenderCount(ref);\n        return { ...result, feedback: range(start, start + length) };\n    }\n    drop(data, targetNode, targetIndex, targetSector, originalEvent) {\n        this.autoExpandDisposable.dispose();\n        this.autoExpandNode = undefined;\n        this.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n    }\n    dispose() {\n        this.disposables.dispose();\n        this.dnd.dispose();\n    }\n}\nfunction asListOptions(modelProvider, options) {\n    return options && {\n        ...options,\n        identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        },\n        dnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd),\n        multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent({ ...e, element: e.element });\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent({ ...e, element: e.element });\n            }\n        },\n        accessibilityProvider: options.accessibilityProvider && {\n            ...options.accessibilityProvider,\n            getSetSize(node) {\n                const model = modelProvider();\n                const ref = model.getNodeLocation(node);\n                const parentRef = model.getParentNodeLocation(ref);\n                const parentNode = model.getNode(parentRef);\n                return parentNode.visibleChildrenCount;\n            },\n            getPosInSet(node) {\n                return node.visibleChildIndex + 1;\n            },\n            isChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? (node) => {\n                return options.accessibilityProvider.isChecked(node.element);\n            } : undefined,\n            getRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? (node) => {\n                return options.accessibilityProvider.getRole(node.element);\n            } : () => 'treeitem',\n            getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            },\n            getWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n            getAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? (node) => options.accessibilityProvider.getAriaLevel(node.element) : (node) => {\n                return node.depth;\n            },\n            getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            })\n        },\n        keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n            ...options.keyboardNavigationLabelProvider,\n            getKeyboardNavigationLabel(node) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(node.element);\n            }\n        }\n    };\n}\nexport class ComposedTreeDelegate {\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    getHeight(element) {\n        return this.delegate.getHeight(element.element);\n    }\n    getTemplateId(element) {\n        return this.delegate.getTemplateId(element.element);\n    }\n    hasDynamicHeight(element) {\n        return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n    }\n    setDynamicHeight(element, height) {\n        var _a, _b;\n        (_b = (_a = this.delegate).setDynamicHeight) === null || _b === void 0 ? void 0 : _b.call(_a, element.element, height);\n    }\n}\nexport var RenderIndentGuides;\n(function (RenderIndentGuides) {\n    RenderIndentGuides[\"None\"] = \"none\";\n    RenderIndentGuides[\"OnHover\"] = \"onHover\";\n    RenderIndentGuides[\"Always\"] = \"always\";\n})(RenderIndentGuides || (RenderIndentGuides = {}));\nclass EventCollection {\n    get elements() {\n        return this._elements;\n    }\n    constructor(onDidChange, _elements = []) {\n        this._elements = _elements;\n        this.disposables = new DisposableStore();\n        this.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements, this.disposables);\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n}\nexport class TreeRenderer {\n    constructor(renderer, modelProvider, onDidChangeCollapseState, activeNodes, renderedIndentGuides, options = {}) {\n        var _a;\n        this.renderer = renderer;\n        this.modelProvider = modelProvider;\n        this.activeNodes = activeNodes;\n        this.renderedIndentGuides = renderedIndentGuides;\n        this.renderedElements = new Map();\n        this.renderedNodes = new Map();\n        this.indent = TreeRenderer.DefaultIndent;\n        this.hideTwistiesOfChildlessElements = false;\n        this.shouldRenderIndentGuides = false;\n        this.activeIndentNodes = new Set();\n        this.indentGuidesDisposable = Disposable.None;\n        this.disposables = new DisposableStore();\n        this.templateId = renderer.templateId;\n        this.updateOptions(options);\n        Event.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n        (_a = renderer.onDidChangeTwistieState) === null || _a === void 0 ? void 0 : _a.call(renderer, this.onDidChangeTwistieState, this, this.disposables);\n    }\n    updateOptions(options = {}) {\n        if (typeof options.indent !== 'undefined') {\n            const indent = clamp(options.indent, 0, 40);\n            if (indent !== this.indent) {\n                this.indent = indent;\n                for (const [node, templateData] of this.renderedNodes) {\n                    this.renderTreeElement(node, templateData);\n                }\n            }\n        }\n        if (typeof options.renderIndentGuides !== 'undefined') {\n            const shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n            if (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n                this.shouldRenderIndentGuides = shouldRenderIndentGuides;\n                for (const [node, templateData] of this.renderedNodes) {\n                    this._renderIndentGuides(node, templateData);\n                }\n                this.indentGuidesDisposable.dispose();\n                if (shouldRenderIndentGuides) {\n                    const disposables = new DisposableStore();\n                    this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n                    this.indentGuidesDisposable = disposables;\n                    this._onDidChangeActiveNodes(this.activeNodes.elements);\n                }\n            }\n        }\n        if (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n            this.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n        }\n    }\n    renderTemplate(container) {\n        const el = append(container, $('.monaco-tl-row'));\n        const indent = append(el, $('.monaco-tl-indent'));\n        const twistie = append(el, $('.monaco-tl-twistie'));\n        const contents = append(el, $('.monaco-tl-contents'));\n        const templateData = this.renderer.renderTemplate(contents);\n        return { container, indent, twistie, indentGuidesDisposable: Disposable.None, templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderedNodes.set(node, templateData);\n        this.renderedElements.set(node.element, node);\n        this.renderTreeElement(node, templateData);\n        this.renderer.renderElement(node, index, templateData.templateData, height);\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        templateData.indentGuidesDisposable.dispose();\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, node, index, templateData.templateData, height);\n        if (typeof height === 'number') {\n            this.renderedNodes.delete(node);\n            this.renderedElements.delete(node.element);\n        }\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    onDidChangeTwistieState(element) {\n        const node = this.renderedElements.get(element);\n        if (!node) {\n            return;\n        }\n        this.onDidChangeNodeTwistieState(node);\n    }\n    onDidChangeNodeTwistieState(node) {\n        const templateData = this.renderedNodes.get(node);\n        if (!templateData) {\n            return;\n        }\n        this._onDidChangeActiveNodes(this.activeNodes.elements);\n        this.renderTreeElement(node, templateData);\n    }\n    renderTreeElement(node, templateData) {\n        const indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n        templateData.twistie.style.paddingLeft = `${indent}px`;\n        templateData.indent.style.width = `${indent + this.indent - 16}px`;\n        if (node.collapsible) {\n            templateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n        }\n        else {\n            templateData.container.removeAttribute('aria-expanded');\n        }\n        templateData.twistie.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n        let twistieRendered = false;\n        if (this.renderer.renderTwistie) {\n            twistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n        }\n        if (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n            if (!twistieRendered) {\n                templateData.twistie.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n            }\n            templateData.twistie.classList.add('collapsible');\n            templateData.twistie.classList.toggle('collapsed', node.collapsed);\n        }\n        else {\n            templateData.twistie.classList.remove('collapsible', 'collapsed');\n        }\n        this._renderIndentGuides(node, templateData);\n    }\n    _renderIndentGuides(node, templateData) {\n        clearNode(templateData.indent);\n        templateData.indentGuidesDisposable.dispose();\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const disposableStore = new DisposableStore();\n        const model = this.modelProvider();\n        while (true) {\n            const ref = model.getNodeLocation(node);\n            const parentRef = model.getParentNodeLocation(ref);\n            if (!parentRef) {\n                break;\n            }\n            const parent = model.getNode(parentRef);\n            const guide = $('.indent-guide', { style: `width: ${this.indent}px` });\n            if (this.activeIndentNodes.has(parent)) {\n                guide.classList.add('active');\n            }\n            if (templateData.indent.childElementCount === 0) {\n                templateData.indent.appendChild(guide);\n            }\n            else {\n                templateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n            }\n            this.renderedIndentGuides.add(parent, guide);\n            disposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n            node = parent;\n        }\n        templateData.indentGuidesDisposable = disposableStore;\n    }\n    _onDidChangeActiveNodes(nodes) {\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const set = new Set();\n        const model = this.modelProvider();\n        nodes.forEach(node => {\n            const ref = model.getNodeLocation(node);\n            try {\n                const parentRef = model.getParentNodeLocation(ref);\n                if (node.collapsible && node.children.length > 0 && !node.collapsed) {\n                    set.add(node);\n                }\n                else if (parentRef) {\n                    set.add(model.getNode(parentRef));\n                }\n            }\n            catch (_a) {\n                // noop\n            }\n        });\n        this.activeIndentNodes.forEach(node => {\n            if (!set.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n            }\n        });\n        set.forEach(node => {\n            if (!this.activeIndentNodes.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n            }\n        });\n        this.activeIndentNodes = set;\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.renderedElements.clear();\n        this.indentGuidesDisposable.dispose();\n        dispose(this.disposables);\n    }\n}\nTreeRenderer.DefaultIndent = 8;\nclass FindFilter {\n    get totalCount() { return this._totalCount; }\n    get matchCount() { return this._matchCount; }\n    constructor(tree, keyboardNavigationLabelProvider, _filter) {\n        this.tree = tree;\n        this.keyboardNavigationLabelProvider = keyboardNavigationLabelProvider;\n        this._filter = _filter;\n        this._totalCount = 0;\n        this._matchCount = 0;\n        this._pattern = '';\n        this._lowercasePattern = '';\n        this.disposables = new DisposableStore();\n        tree.onWillRefilter(this.reset, this, this.disposables);\n    }\n    filter(element, parentVisibility) {\n        let visibility = 1 /* TreeVisibility.Visible */;\n        if (this._filter) {\n            const result = this._filter.filter(element, parentVisibility);\n            if (typeof result === 'boolean') {\n                visibility = result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n            }\n            else if (isFilterResult(result)) {\n                visibility = getVisibleState(result.visibility);\n            }\n            else {\n                visibility = result;\n            }\n            if (visibility === 0 /* TreeVisibility.Hidden */) {\n                return false;\n            }\n        }\n        this._totalCount++;\n        if (!this._pattern) {\n            this._matchCount++;\n            return { data: FuzzyScore.Default, visibility };\n        }\n        const label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n        const labels = Array.isArray(label) ? label : [label];\n        for (const l of labels) {\n            const labelStr = l && l.toString();\n            if (typeof labelStr === 'undefined') {\n                return { data: FuzzyScore.Default, visibility };\n            }\n            let score;\n            if (this.tree.findMatchType === TreeFindMatchType.Contiguous) {\n                const index = labelStr.toLowerCase().indexOf(this._lowercasePattern);\n                if (index > -1) {\n                    score = [Number.MAX_SAFE_INTEGER, 0];\n                    for (let i = this._lowercasePattern.length; i > 0; i--) {\n                        score.push(index + i - 1);\n                    }\n                }\n            }\n            else {\n                score = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, { firstMatchCanBeWeak: true, boostFullMatch: true });\n            }\n            if (score) {\n                this._matchCount++;\n                return labels.length === 1 ?\n                    { data: score, visibility } :\n                    { data: { label: labelStr, score: score }, visibility };\n            }\n        }\n        if (this.tree.findMode === TreeFindMode.Filter) {\n            if (typeof this.tree.options.defaultFindVisibility === 'number') {\n                return this.tree.options.defaultFindVisibility;\n            }\n            else if (this.tree.options.defaultFindVisibility) {\n                return this.tree.options.defaultFindVisibility(element);\n            }\n            else {\n                return 2 /* TreeVisibility.Recurse */;\n            }\n        }\n        else {\n            return { data: FuzzyScore.Default, visibility };\n        }\n    }\n    reset() {\n        this._totalCount = 0;\n        this._matchCount = 0;\n    }\n    dispose() {\n        dispose(this.disposables);\n    }\n}\nexport class ModeToggle extends Toggle {\n    constructor(opts) {\n        var _a;\n        super({\n            icon: Codicon.listFilter,\n            title: localize('filter', \"Filter\"),\n            isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n            inputActiveOptionBorder: opts.inputActiveOptionBorder,\n            inputActiveOptionForeground: opts.inputActiveOptionForeground,\n            inputActiveOptionBackground: opts.inputActiveOptionBackground\n        });\n    }\n}\nexport class FuzzyToggle extends Toggle {\n    constructor(opts) {\n        var _a;\n        super({\n            icon: Codicon.searchFuzzy,\n            title: localize('fuzzySearch', \"Fuzzy Match\"),\n            isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n            inputActiveOptionBorder: opts.inputActiveOptionBorder,\n            inputActiveOptionForeground: opts.inputActiveOptionForeground,\n            inputActiveOptionBackground: opts.inputActiveOptionBackground\n        });\n    }\n}\nconst unthemedFindWidgetStyles = {\n    inputBoxStyles: unthemedInboxStyles,\n    toggleStyles: unthemedToggleStyles,\n    listFilterWidgetBackground: undefined,\n    listFilterWidgetNoMatchesOutline: undefined,\n    listFilterWidgetOutline: undefined,\n    listFilterWidgetShadow: undefined\n};\nexport var TreeFindMode;\n(function (TreeFindMode) {\n    TreeFindMode[TreeFindMode[\"Highlight\"] = 0] = \"Highlight\";\n    TreeFindMode[TreeFindMode[\"Filter\"] = 1] = \"Filter\";\n})(TreeFindMode || (TreeFindMode = {}));\nexport var TreeFindMatchType;\n(function (TreeFindMatchType) {\n    TreeFindMatchType[TreeFindMatchType[\"Fuzzy\"] = 0] = \"Fuzzy\";\n    TreeFindMatchType[TreeFindMatchType[\"Contiguous\"] = 1] = \"Contiguous\";\n})(TreeFindMatchType || (TreeFindMatchType = {}));\nclass FindWidget extends Disposable {\n    set mode(mode) {\n        this.modeToggle.checked = mode === TreeFindMode.Filter;\n        this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', \"Type to filter\") : localize('type to search', \"Type to search\"));\n    }\n    set matchType(matchType) {\n        this.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;\n    }\n    constructor(container, tree, contextViewProvider, mode, matchType, options) {\n        var _a;\n        super();\n        this.tree = tree;\n        this.elements = h('.monaco-tree-type-filter', [\n            h('.monaco-tree-type-filter-grab.codicon.codicon-debug-gripper@grab', { tabIndex: 0 }),\n            h('.monaco-tree-type-filter-input@findInput'),\n            h('.monaco-tree-type-filter-actionbar@actionbar'),\n        ]);\n        this.width = 0;\n        this.right = 0;\n        this.top = 0;\n        this._onDidDisable = new Emitter();\n        container.appendChild(this.elements.root);\n        this._register(toDisposable(() => container.removeChild(this.elements.root)));\n        const styles = (_a = options === null || options === void 0 ? void 0 : options.styles) !== null && _a !== void 0 ? _a : unthemedFindWidgetStyles;\n        if (styles.listFilterWidgetBackground) {\n            this.elements.root.style.backgroundColor = styles.listFilterWidgetBackground;\n        }\n        if (styles.listFilterWidgetShadow) {\n            this.elements.root.style.boxShadow = `0 0 8px 2px ${styles.listFilterWidgetShadow}`;\n        }\n        this.modeToggle = this._register(new ModeToggle({ ...styles.toggleStyles, isChecked: mode === TreeFindMode.Filter }));\n        this.matchTypeToggle = this._register(new FuzzyToggle({ ...styles.toggleStyles, isChecked: matchType === TreeFindMatchType.Fuzzy }));\n        this.onDidChangeMode = Event.map(this.modeToggle.onChange, () => this.modeToggle.checked ? TreeFindMode.Filter : TreeFindMode.Highlight, this._store);\n        this.onDidChangeMatchType = Event.map(this.matchTypeToggle.onChange, () => this.matchTypeToggle.checked ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous, this._store);\n        this.findInput = this._register(new FindInput(this.elements.findInput, contextViewProvider, {\n            label: localize('type to search', \"Type to search\"),\n            additionalToggles: [this.modeToggle, this.matchTypeToggle],\n            showCommonFindToggles: false,\n            inputBoxStyles: styles.inputBoxStyles,\n            toggleStyles: styles.toggleStyles,\n            history: options === null || options === void 0 ? void 0 : options.history\n        }));\n        this.actionbar = this._register(new ActionBar(this.elements.actionbar));\n        this.mode = mode;\n        const emitter = this._register(new DomEmitter(this.findInput.inputBox.inputElement, 'keydown'));\n        const onKeyDown = Event.chain(emitter.event, $ => $.map(e => new StandardKeyboardEvent(e)));\n        this._register(onKeyDown((e) => {\n            // Using equals() so we reserve modified keys for future use\n            if (e.equals(3 /* KeyCode.Enter */)) {\n                // This is the only keyboard way to return to the tree from a history item that isn't the last one\n                e.preventDefault();\n                e.stopPropagation();\n                this.findInput.inputBox.addToHistory();\n                this.tree.domFocus();\n                return;\n            }\n            if (e.equals(18 /* KeyCode.DownArrow */)) {\n                e.preventDefault();\n                e.stopPropagation();\n                if (this.findInput.inputBox.isAtLastInHistory() || this.findInput.inputBox.isNowhereInHistory()) {\n                    // Retain original pre-history DownArrow behavior\n                    this.findInput.inputBox.addToHistory();\n                    this.tree.domFocus();\n                }\n                else {\n                    // Downward through history\n                    this.findInput.inputBox.showNextValue();\n                }\n                return;\n            }\n            if (e.equals(16 /* KeyCode.UpArrow */)) {\n                e.preventDefault();\n                e.stopPropagation();\n                // Upward through history\n                this.findInput.inputBox.showPreviousValue();\n                return;\n            }\n        }));\n        const closeAction = this._register(new Action('close', localize('close', \"Close\"), 'codicon codicon-close', true, () => this.dispose()));\n        this.actionbar.push(closeAction, { icon: true, label: false });\n        const onGrabMouseDown = this._register(new DomEmitter(this.elements.grab, 'mousedown'));\n        this._register(onGrabMouseDown.event(e => {\n            const disposables = new DisposableStore();\n            const onWindowMouseMove = disposables.add(new DomEmitter(getWindow(e), 'mousemove'));\n            const onWindowMouseUp = disposables.add(new DomEmitter(getWindow(e), 'mouseup'));\n            const startRight = this.right;\n            const startX = e.pageX;\n            const startTop = this.top;\n            const startY = e.pageY;\n            this.elements.grab.classList.add('grabbing');\n            const transition = this.elements.root.style.transition;\n            this.elements.root.style.transition = 'unset';\n            const update = (e) => {\n                const deltaX = e.pageX - startX;\n                this.right = startRight - deltaX;\n                const deltaY = e.pageY - startY;\n                this.top = startTop + deltaY;\n                this.layout();\n            };\n            disposables.add(onWindowMouseMove.event(update));\n            disposables.add(onWindowMouseUp.event(e => {\n                update(e);\n                this.elements.grab.classList.remove('grabbing');\n                this.elements.root.style.transition = transition;\n                disposables.dispose();\n            }));\n        }));\n        const onGrabKeyDown = Event.chain(this._register(new DomEmitter(this.elements.grab, 'keydown')).event, $ => $.map(e => new StandardKeyboardEvent(e)));\n        this._register(onGrabKeyDown((e) => {\n            let right;\n            let top;\n            if (e.keyCode === 15 /* KeyCode.LeftArrow */) {\n                right = Number.POSITIVE_INFINITY;\n            }\n            else if (e.keyCode === 17 /* KeyCode.RightArrow */) {\n                right = 0;\n            }\n            else if (e.keyCode === 10 /* KeyCode.Space */) {\n                right = this.right === 0 ? Number.POSITIVE_INFINITY : 0;\n            }\n            if (e.keyCode === 16 /* KeyCode.UpArrow */) {\n                top = 0;\n            }\n            else if (e.keyCode === 18 /* KeyCode.DownArrow */) {\n                top = Number.POSITIVE_INFINITY;\n            }\n            if (right !== undefined) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.right = right;\n                this.layout();\n            }\n            if (top !== undefined) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.top = top;\n                const transition = this.elements.root.style.transition;\n                this.elements.root.style.transition = 'unset';\n                this.layout();\n                setTimeout(() => {\n                    this.elements.root.style.transition = transition;\n                }, 0);\n            }\n        }));\n        this.onDidChangeValue = this.findInput.onDidChange;\n    }\n    layout(width = this.width) {\n        this.width = width;\n        this.right = clamp(this.right, 0, Math.max(0, width - 212));\n        this.elements.root.style.right = `${this.right}px`;\n        this.top = clamp(this.top, 0, 24);\n        this.elements.root.style.top = `${this.top}px`;\n    }\n    showMessage(message) {\n        this.findInput.showMessage(message);\n    }\n    clearMessage() {\n        this.findInput.clearMessage();\n    }\n    async dispose() {\n        this._onDidDisable.fire();\n        this.elements.root.classList.add('disabled');\n        await timeout(300);\n        super.dispose();\n    }\n}\nclass FindController {\n    get pattern() { return this._pattern; }\n    get mode() { return this._mode; }\n    set mode(mode) {\n        if (mode === this._mode) {\n            return;\n        }\n        this._mode = mode;\n        if (this.widget) {\n            this.widget.mode = this._mode;\n        }\n        this.tree.refilter();\n        this.render();\n        this._onDidChangeMode.fire(mode);\n    }\n    get matchType() { return this._matchType; }\n    set matchType(matchType) {\n        if (matchType === this._matchType) {\n            return;\n        }\n        this._matchType = matchType;\n        if (this.widget) {\n            this.widget.matchType = this._matchType;\n        }\n        this.tree.refilter();\n        this.render();\n        this._onDidChangeMatchType.fire(matchType);\n    }\n    constructor(tree, model, view, filter, contextViewProvider, options = {}) {\n        var _a, _b;\n        this.tree = tree;\n        this.view = view;\n        this.filter = filter;\n        this.contextViewProvider = contextViewProvider;\n        this.options = options;\n        this._pattern = '';\n        this.width = 0;\n        this._onDidChangeMode = new Emitter();\n        this.onDidChangeMode = this._onDidChangeMode.event;\n        this._onDidChangeMatchType = new Emitter();\n        this.onDidChangeMatchType = this._onDidChangeMatchType.event;\n        this._onDidChangePattern = new Emitter();\n        this._onDidChangeOpenState = new Emitter();\n        this.onDidChangeOpenState = this._onDidChangeOpenState.event;\n        this.enabledDisposables = new DisposableStore();\n        this.disposables = new DisposableStore();\n        this._mode = (_a = tree.options.defaultFindMode) !== null && _a !== void 0 ? _a : TreeFindMode.Highlight;\n        this._matchType = (_b = tree.options.defaultFindMatchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n        model.onDidSplice(this.onDidSpliceModel, this, this.disposables);\n    }\n    updateOptions(optionsUpdate = {}) {\n        if (optionsUpdate.defaultFindMode !== undefined) {\n            this.mode = optionsUpdate.defaultFindMode;\n        }\n        if (optionsUpdate.defaultFindMatchType !== undefined) {\n            this.matchType = optionsUpdate.defaultFindMatchType;\n        }\n    }\n    onDidSpliceModel() {\n        if (!this.widget || this.pattern.length === 0) {\n            return;\n        }\n        this.tree.refilter();\n        this.render();\n    }\n    render() {\n        var _a, _b, _c, _d;\n        const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n        if (this.pattern && noMatches) {\n            if ((_a = this.tree.options.showNotFoundMessage) !== null && _a !== void 0 ? _a : true) {\n                (_b = this.widget) === null || _b === void 0 ? void 0 : _b.showMessage({ type: 2 /* MessageType.WARNING */, content: localize('not found', \"No elements found.\") });\n            }\n            else {\n                (_c = this.widget) === null || _c === void 0 ? void 0 : _c.showMessage({ type: 2 /* MessageType.WARNING */ });\n            }\n        }\n        else {\n            (_d = this.widget) === null || _d === void 0 ? void 0 : _d.clearMessage();\n        }\n    }\n    shouldAllowFocus(node) {\n        if (!this.widget || !this.pattern) {\n            return true;\n        }\n        if (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n            return true;\n        }\n        return !FuzzyScore.isDefault(node.filterData);\n    }\n    layout(width) {\n        var _a;\n        this.width = width;\n        (_a = this.widget) === null || _a === void 0 ? void 0 : _a.layout(width);\n    }\n    dispose() {\n        this._history = undefined;\n        this._onDidChangePattern.dispose();\n        this.enabledDisposables.dispose();\n        this.disposables.dispose();\n    }\n}\nfunction stickyScrollNodeStateEquals(node1, node2) {\n    return node1.position === node2.position && stickyScrollNodeEquals(node1, node2);\n}\nfunction stickyScrollNodeEquals(node1, node2) {\n    return node1.node.element === node2.node.element &&\n        node1.startIndex === node2.startIndex &&\n        node1.height === node2.height &&\n        node1.endIndex === node2.endIndex;\n}\nclass StickyScrollState {\n    constructor(stickyNodes = []) {\n        this.stickyNodes = stickyNodes;\n    }\n    get count() { return this.stickyNodes.length; }\n    equal(state) {\n        return equals(this.stickyNodes, state.stickyNodes, stickyScrollNodeStateEquals);\n    }\n    lastNodePartiallyVisible() {\n        if (this.count === 0) {\n            return false;\n        }\n        const lastStickyNode = this.stickyNodes[this.count - 1];\n        if (this.count === 1) {\n            return lastStickyNode.position !== 0;\n        }\n        const secondLastStickyNode = this.stickyNodes[this.count - 2];\n        return secondLastStickyNode.position + secondLastStickyNode.height !== lastStickyNode.position;\n    }\n    animationStateChanged(previousState) {\n        if (!equals(this.stickyNodes, previousState.stickyNodes, stickyScrollNodeEquals)) {\n            return false;\n        }\n        if (this.count === 0) {\n            return false;\n        }\n        const lastStickyNode = this.stickyNodes[this.count - 1];\n        const previousLastStickyNode = previousState.stickyNodes[previousState.count - 1];\n        return lastStickyNode.position !== previousLastStickyNode.position;\n    }\n}\nclass DefaultStickyScrollDelegate {\n    constrainStickyScrollNodes(stickyNodes, stickyScrollMaxItemCount, maxWidgetHeight) {\n        for (let i = 0; i < stickyNodes.length; i++) {\n            const stickyNode = stickyNodes[i];\n            const stickyNodeBottom = stickyNode.position + stickyNode.height;\n            if (stickyNodeBottom > maxWidgetHeight || i >= stickyScrollMaxItemCount) {\n                return stickyNodes.slice(0, i);\n            }\n        }\n        return stickyNodes;\n    }\n}\nclass StickyScrollController extends Disposable {\n    constructor(tree, model, view, renderers, treeDelegate, options = {}) {\n        var _a;\n        super();\n        this.tree = tree;\n        this.model = model;\n        this.view = view;\n        this.treeDelegate = treeDelegate;\n        this.maxWidgetViewRatio = 0.4;\n        const stickyScrollOptions = this.validateStickySettings(options);\n        this.stickyScrollMaxItemCount = stickyScrollOptions.stickyScrollMaxItemCount;\n        this.stickyScrollDelegate = (_a = options.stickyScrollDelegate) !== null && _a !== void 0 ? _a : new DefaultStickyScrollDelegate();\n        this._widget = this._register(new StickyScrollWidget(view.getScrollableElement(), view, tree, renderers, treeDelegate, options.accessibilityProvider));\n        this.onDidChangeHasFocus = this._widget.onDidChangeHasFocus;\n        this.onContextMenu = this._widget.onContextMenu;\n        this._register(view.onDidScroll(() => this.update()));\n        this._register(view.onDidChangeContentHeight(() => this.update()));\n        this._register(tree.onDidChangeCollapseState(() => this.update()));\n        this.update();\n    }\n    getNodeAtHeight(height) {\n        let index;\n        if (height === 0) {\n            index = this.view.firstVisibleIndex;\n        }\n        else {\n            index = this.view.indexAt(height + this.view.scrollTop);\n        }\n        if (index < 0 || index >= this.view.length) {\n            return undefined;\n        }\n        return this.view.element(index);\n    }\n    update() {\n        const firstVisibleNode = this.getNodeAtHeight(0);\n        // Don't render anything if there are no elements\n        if (!firstVisibleNode || this.tree.scrollTop === 0) {\n            this._widget.setState(undefined);\n            return;\n        }\n        const stickyState = this.findStickyState(firstVisibleNode);\n        this._widget.setState(stickyState);\n    }\n    findStickyState(firstVisibleNode) {\n        const stickyNodes = [];\n        let firstVisibleNodeUnderWidget = firstVisibleNode;\n        let stickyNodesHeight = 0;\n        let nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, undefined, stickyNodesHeight);\n        while (nextStickyNode) {\n            stickyNodes.push(nextStickyNode);\n            stickyNodesHeight += nextStickyNode.height;\n            if (stickyNodes.length <= this.stickyScrollMaxItemCount) {\n                firstVisibleNodeUnderWidget = this.getNextVisibleNode(nextStickyNode);\n                if (!firstVisibleNodeUnderWidget) {\n                    break;\n                }\n            }\n            nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, nextStickyNode.node, stickyNodesHeight);\n        }\n        const contrainedStickyNodes = this.constrainStickyNodes(stickyNodes);\n        return contrainedStickyNodes.length ? new StickyScrollState(contrainedStickyNodes) : undefined;\n    }\n    getNextVisibleNode(previousStickyNode) {\n        return this.getNodeAtHeight(previousStickyNode.position + previousStickyNode.height);\n    }\n    getNextStickyNode(firstVisibleNodeUnderWidget, previousStickyNode, stickyNodesHeight) {\n        const nextStickyNode = this.getAncestorUnderPrevious(firstVisibleNodeUnderWidget, previousStickyNode);\n        if (!nextStickyNode) {\n            return undefined;\n        }\n        if (nextStickyNode === firstVisibleNodeUnderWidget) {\n            if (!this.nodeIsUncollapsedParent(firstVisibleNodeUnderWidget)) {\n                return undefined;\n            }\n            if (this.nodeTopAlignsWithStickyNodesBottom(firstVisibleNodeUnderWidget, stickyNodesHeight)) {\n                return undefined;\n            }\n        }\n        return this.createStickyScrollNode(nextStickyNode, stickyNodesHeight);\n    }\n    nodeTopAlignsWithStickyNodesBottom(node, stickyNodesHeight) {\n        const nodeIndex = this.getNodeIndex(node);\n        const elementTop = this.view.getElementTop(nodeIndex);\n        const stickyPosition = stickyNodesHeight;\n        return this.view.scrollTop === elementTop - stickyPosition;\n    }\n    createStickyScrollNode(node, currentStickyNodesHeight) {\n        const height = this.treeDelegate.getHeight(node);\n        const { startIndex, endIndex } = this.getNodeRange(node);\n        const position = this.calculateStickyNodePosition(endIndex, currentStickyNodesHeight, height);\n        return { node, position, height, startIndex, endIndex };\n    }\n    getAncestorUnderPrevious(node, previousAncestor = undefined) {\n        let currentAncestor = node;\n        let parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n        while (parentOfcurrentAncestor) {\n            if (parentOfcurrentAncestor === previousAncestor) {\n                return currentAncestor;\n            }\n            currentAncestor = parentOfcurrentAncestor;\n            parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n        }\n        if (previousAncestor === undefined) {\n            return currentAncestor;\n        }\n        return undefined;\n    }\n    calculateStickyNodePosition(lastDescendantIndex, stickyRowPositionTop, stickyNodeHeight) {\n        let lastChildRelativeTop = this.view.getRelativeTop(lastDescendantIndex);\n        // If the last descendant is only partially visible at the top of the view, getRelativeTop() returns null\n        // In that case, utilize the next node's relative top to calculate the sticky node's position\n        if (lastChildRelativeTop === null && this.view.firstVisibleIndex === lastDescendantIndex && lastDescendantIndex + 1 < this.view.length) {\n            const nodeHeight = this.treeDelegate.getHeight(this.view.element(lastDescendantIndex));\n            const nextNodeRelativeTop = this.view.getRelativeTop(lastDescendantIndex + 1);\n            lastChildRelativeTop = nextNodeRelativeTop ? nextNodeRelativeTop - nodeHeight / this.view.renderHeight : null;\n        }\n        if (lastChildRelativeTop === null) {\n            return stickyRowPositionTop;\n        }\n        const lastChildNode = this.view.element(lastDescendantIndex);\n        const lastChildHeight = this.treeDelegate.getHeight(lastChildNode);\n        const topOfLastChild = lastChildRelativeTop * this.view.renderHeight;\n        const bottomOfLastChild = topOfLastChild + lastChildHeight;\n        if (stickyRowPositionTop + stickyNodeHeight > bottomOfLastChild && stickyRowPositionTop <= bottomOfLastChild) {\n            return bottomOfLastChild - stickyNodeHeight;\n        }\n        return stickyRowPositionTop;\n    }\n    constrainStickyNodes(stickyNodes) {\n        if (stickyNodes.length === 0) {\n            return [];\n        }\n        // Check if sticky nodes need to be constrained\n        const maximumStickyWidgetHeight = this.view.renderHeight * this.maxWidgetViewRatio;\n        const lastStickyNode = stickyNodes[stickyNodes.length - 1];\n        if (stickyNodes.length <= this.stickyScrollMaxItemCount && lastStickyNode.position + lastStickyNode.height <= maximumStickyWidgetHeight) {\n            return stickyNodes;\n        }\n        // constrain sticky nodes\n        const constrainedStickyNodes = this.stickyScrollDelegate.constrainStickyScrollNodes(stickyNodes, this.stickyScrollMaxItemCount, maximumStickyWidgetHeight);\n        if (!constrainedStickyNodes.length) {\n            return [];\n        }\n        // Validate constraints\n        const lastConstrainedStickyNode = constrainedStickyNodes[constrainedStickyNodes.length - 1];\n        if (constrainedStickyNodes.length > this.stickyScrollMaxItemCount || lastConstrainedStickyNode.position + lastConstrainedStickyNode.height > maximumStickyWidgetHeight) {\n            throw new Error('stickyScrollDelegate violates constraints');\n        }\n        return constrainedStickyNodes;\n    }\n    getParentNode(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const parentLocation = this.model.getParentNodeLocation(nodeLocation);\n        return parentLocation ? this.model.getNode(parentLocation) : undefined;\n    }\n    nodeIsUncollapsedParent(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        return this.model.getListRenderCount(nodeLocation) > 1;\n    }\n    getNodeIndex(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const nodeIndex = this.model.getListIndex(nodeLocation);\n        return nodeIndex;\n    }\n    getNodeRange(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const startIndex = this.model.getListIndex(nodeLocation);\n        if (startIndex < 0) {\n            throw new Error('Node not found in tree');\n        }\n        const renderCount = this.model.getListRenderCount(nodeLocation);\n        const endIndex = startIndex + renderCount - 1;\n        return { startIndex, endIndex };\n    }\n    nodePositionTopBelowWidget(node) {\n        const ancestors = [];\n        let currentAncestor = this.getParentNode(node);\n        while (currentAncestor) {\n            ancestors.push(currentAncestor);\n            currentAncestor = this.getParentNode(currentAncestor);\n        }\n        let widgetHeight = 0;\n        for (let i = 0; i < ancestors.length && i < this.stickyScrollMaxItemCount; i++) {\n            widgetHeight += this.treeDelegate.getHeight(ancestors[i]);\n        }\n        return widgetHeight;\n    }\n    domFocus() {\n        this._widget.domFocus();\n    }\n    // Whether sticky scroll was the last focused part in the tree or not\n    focusedLast() {\n        return this._widget.focusedLast();\n    }\n    updateOptions(optionsUpdate = {}) {\n        if (!optionsUpdate.stickyScrollMaxItemCount) {\n            return;\n        }\n        const validatedOptions = this.validateStickySettings(optionsUpdate);\n        if (this.stickyScrollMaxItemCount !== validatedOptions.stickyScrollMaxItemCount) {\n            this.stickyScrollMaxItemCount = validatedOptions.stickyScrollMaxItemCount;\n            this.update();\n        }\n    }\n    validateStickySettings(options) {\n        let stickyScrollMaxItemCount = 7;\n        if (typeof options.stickyScrollMaxItemCount === 'number') {\n            stickyScrollMaxItemCount = Math.max(options.stickyScrollMaxItemCount, 1);\n        }\n        return { stickyScrollMaxItemCount };\n    }\n}\nclass StickyScrollWidget {\n    constructor(container, view, tree, treeRenderers, treeDelegate, accessibilityProvider) {\n        this.view = view;\n        this.tree = tree;\n        this.treeRenderers = treeRenderers;\n        this.treeDelegate = treeDelegate;\n        this.accessibilityProvider = accessibilityProvider;\n        this._previousElements = [];\n        this._previousStateDisposables = new DisposableStore();\n        this._rootDomNode = $('.monaco-tree-sticky-container.empty');\n        container.appendChild(this._rootDomNode);\n        const shadow = $('.monaco-tree-sticky-container-shadow');\n        this._rootDomNode.appendChild(shadow);\n        this.stickyScrollFocus = new StickyScrollFocus(this._rootDomNode, view);\n        this.onDidChangeHasFocus = this.stickyScrollFocus.onDidChangeHasFocus;\n        this.onContextMenu = this.stickyScrollFocus.onContextMenu;\n    }\n    setState(state) {\n        const wasVisible = !!this._previousState && this._previousState.count > 0;\n        const isVisible = !!state && state.count > 0;\n        // If state has not changed, do nothing\n        if ((!wasVisible && !isVisible) || (wasVisible && isVisible && this._previousState.equal(state))) {\n            return;\n        }\n        // Update visibility of the widget if changed\n        if (wasVisible !== isVisible) {\n            this.setVisible(isVisible);\n        }\n        if (!isVisible) {\n            this._previousState = undefined;\n            this._previousElements = [];\n            this._previousStateDisposables.clear();\n            return;\n        }\n        const lastStickyNode = state.stickyNodes[state.count - 1];\n        // If the new state is only a change in the last node's position, update the position of the last element\n        if (this._previousState && state.animationStateChanged(this._previousState)) {\n            this._previousElements[this._previousState.count - 1].style.top = `${lastStickyNode.position}px`;\n        }\n        // create new dom elements\n        else {\n            this._previousStateDisposables.clear();\n            const elements = Array(state.count);\n            for (let stickyIndex = state.count - 1; stickyIndex >= 0; stickyIndex--) {\n                const stickyNode = state.stickyNodes[stickyIndex];\n                const { element, disposable } = this.createElement(stickyNode, stickyIndex, state.count);\n                elements[stickyIndex] = element;\n                this._rootDomNode.appendChild(element);\n                this._previousStateDisposables.add(disposable);\n            }\n            this.stickyScrollFocus.updateElements(elements, state);\n            this._previousElements = elements;\n        }\n        this._previousState = state;\n        // Set the height of the widget to the bottom of the last sticky node\n        this._rootDomNode.style.height = `${lastStickyNode.position + lastStickyNode.height}px`;\n    }\n    createElement(stickyNode, stickyIndex, stickyNodesTotal) {\n        const nodeIndex = stickyNode.startIndex;\n        // Sticky element container\n        const stickyElement = document.createElement('div');\n        stickyElement.style.top = `${stickyNode.position}px`;\n        stickyElement.style.height = `${stickyNode.height}px`;\n        stickyElement.style.lineHeight = `${stickyNode.height}px`;\n        stickyElement.classList.add('monaco-tree-sticky-row');\n        stickyElement.classList.add('monaco-list-row');\n        stickyElement.setAttribute('data-index', `${nodeIndex}`);\n        stickyElement.setAttribute('data-parity', nodeIndex % 2 === 0 ? 'even' : 'odd');\n        stickyElement.setAttribute('id', this.view.getElementID(nodeIndex));\n        this.setAccessibilityAttributes(stickyElement, stickyNode.node.element, stickyIndex, stickyNodesTotal);\n        // Get the renderer for the node\n        const nodeTemplateId = this.treeDelegate.getTemplateId(stickyNode.node);\n        const renderer = this.treeRenderers.find((renderer) => renderer.templateId === nodeTemplateId);\n        if (!renderer) {\n            throw new Error(`No renderer found for template id ${nodeTemplateId}`);\n        }\n        // To make sure we do not influence the original node, we create a copy of the node\n        // We need to check if it is already a unique instance of the node by the delegate\n        let nodeCopy = stickyNode.node;\n        if (nodeCopy === this.tree.getNode(this.tree.getNodeLocation(stickyNode.node))) {\n            nodeCopy = new Proxy(stickyNode.node, {});\n        }\n        // Render the element\n        const templateData = renderer.renderTemplate(stickyElement);\n        renderer.renderElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n        // Remove the element from the DOM when state is disposed\n        const disposable = toDisposable(() => {\n            renderer.disposeElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n            renderer.disposeTemplate(templateData);\n            stickyElement.remove();\n        });\n        return { element: stickyElement, disposable };\n    }\n    setAccessibilityAttributes(container, element, stickyIndex, stickyNodesTotal) {\n        var _a;\n        if (!this.accessibilityProvider) {\n            return;\n        }\n        if (this.accessibilityProvider.getSetSize) {\n            container.setAttribute('aria-setsize', String(this.accessibilityProvider.getSetSize(element, stickyIndex, stickyNodesTotal)));\n        }\n        if (this.accessibilityProvider.getPosInSet) {\n            container.setAttribute('aria-posinset', String(this.accessibilityProvider.getPosInSet(element, stickyIndex)));\n        }\n        if (this.accessibilityProvider.getRole) {\n            container.setAttribute('role', (_a = this.accessibilityProvider.getRole(element)) !== null && _a !== void 0 ? _a : 'treeitem');\n        }\n        const ariaLabel = this.accessibilityProvider.getAriaLabel(element);\n        if (ariaLabel) {\n            container.setAttribute('aria-label', ariaLabel);\n        }\n        const ariaLevel = this.accessibilityProvider.getAriaLevel && this.accessibilityProvider.getAriaLevel(element);\n        if (typeof ariaLevel === 'number') {\n            container.setAttribute('aria-level', `${ariaLevel}`);\n        }\n        // Sticky Scroll elements can not be selected\n        container.setAttribute('aria-selected', String(false));\n    }\n    setVisible(visible) {\n        this._rootDomNode.classList.toggle('empty', !visible);\n        if (!visible) {\n            this.stickyScrollFocus.updateElements([], undefined);\n        }\n    }\n    domFocus() {\n        this.stickyScrollFocus.domFocus();\n    }\n    focusedLast() {\n        return this.stickyScrollFocus.focusedLast();\n    }\n    dispose() {\n        this.stickyScrollFocus.dispose();\n        this._previousStateDisposables.dispose();\n        this._rootDomNode.remove();\n    }\n}\nclass StickyScrollFocus extends Disposable {\n    get domHasFocus() { return this._domHasFocus; }\n    set domHasFocus(hasFocus) {\n        if (hasFocus !== this._domHasFocus) {\n            this._onDidChangeHasFocus.fire(hasFocus);\n            this._domHasFocus = hasFocus;\n        }\n    }\n    constructor(container, view) {\n        super();\n        this.container = container;\n        this.view = view;\n        this.focusedIndex = -1;\n        this.elements = [];\n        this._onDidChangeHasFocus = new Emitter();\n        this.onDidChangeHasFocus = this._onDidChangeHasFocus.event;\n        this._onContextMenu = new Emitter();\n        this.onContextMenu = this._onContextMenu.event;\n        this._domHasFocus = false;\n        this.container.addEventListener('focus', () => this.onFocus());\n        this.container.addEventListener('blur', () => this.onBlur());\n        this._register(this.view.onDidFocus(() => this.toggleStickyScrollFocused(false)));\n        this._register(this.view.onKeyDown((e) => this.onKeyDown(e)));\n        this._register(this.view.onMouseDown((e) => this.onMouseDown(e)));\n        this._register(this.view.onContextMenu((e) => this.handleContextMenu(e)));\n    }\n    handleContextMenu(e) {\n        const target = e.browserEvent.target;\n        if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n            if (this.focusedLast()) {\n                this.view.domFocus();\n            }\n            return;\n        }\n        // The list handles the context menu triggered by a mouse event\n        // In that case only set the focus of the element clicked and leave the rest to the list to handle\n        if (!isKeyboardEvent(e.browserEvent)) {\n            if (!this.state) {\n                throw new Error('Context menu should not be triggered when state is undefined');\n            }\n            const stickyIndex = this.state.stickyNodes.findIndex(stickyNode => { var _a; return stickyNode.node.element === ((_a = e.element) === null || _a === void 0 ? void 0 : _a.element); });\n            if (stickyIndex === -1) {\n                throw new Error('Context menu should not be triggered when element is not in sticky scroll widget');\n            }\n            this.container.focus();\n            this.setFocus(stickyIndex);\n            return;\n        }\n        if (!this.state || this.focusedIndex < 0) {\n            throw new Error('Context menu key should not be triggered when focus is not in sticky scroll widget');\n        }\n        const stickyNode = this.state.stickyNodes[this.focusedIndex];\n        const element = stickyNode.node.element;\n        const anchor = this.elements[this.focusedIndex];\n        this._onContextMenu.fire({ element, anchor, browserEvent: e.browserEvent, isStickyScroll: true });\n    }\n    onKeyDown(e) {\n        // Sticky Scroll Navigation\n        if (this.domHasFocus && this.state) {\n            // Move up\n            if (e.key === 'ArrowUp') {\n                this.setFocusedElement(Math.max(0, this.focusedIndex - 1));\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            // Move down, if last sticky node is focused, move focus into first child of last sticky node\n            else if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {\n                if (this.focusedIndex >= this.state.count - 1) {\n                    const nodeIndexToFocus = this.state.stickyNodes[this.state.count - 1].startIndex + 1;\n                    this.view.domFocus();\n                    this.view.setFocus([nodeIndexToFocus]);\n                    this.scrollNodeUnderWidget(nodeIndexToFocus, this.state);\n                }\n                else {\n                    this.setFocusedElement(this.focusedIndex + 1);\n                }\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        }\n    }\n    onMouseDown(e) {\n        const target = e.browserEvent.target;\n        if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n            return;\n        }\n        e.browserEvent.preventDefault();\n        e.browserEvent.stopPropagation();\n    }\n    updateElements(elements, state) {\n        if (state && state.count === 0) {\n            throw new Error('Sticky scroll state must be undefined when there are no sticky nodes');\n        }\n        if (state && state.count !== elements.length) {\n            throw new Error('Sticky scroll focus received illigel state');\n        }\n        const previousIndex = this.focusedIndex;\n        this.removeFocus();\n        this.elements = elements;\n        this.state = state;\n        if (state) {\n            const newFocusedIndex = clamp(previousIndex, 0, state.count - 1);\n            this.setFocus(newFocusedIndex);\n        }\n        else {\n            if (this.domHasFocus) {\n                this.view.domFocus();\n            }\n        }\n        // must come last as it calls blur()\n        this.container.tabIndex = state ? 0 : -1;\n    }\n    setFocusedElement(stickyIndex) {\n        // doesn't imply that the widget has (or will have) focus\n        const state = this.state;\n        if (!state) {\n            throw new Error('Cannot set focus when state is undefined');\n        }\n        this.setFocus(stickyIndex);\n        if (stickyIndex < state.count - 1) {\n            return;\n        }\n        // If the last sticky node is not fully visible, scroll it into view\n        if (state.lastNodePartiallyVisible()) {\n            const lastStickyNode = state.stickyNodes[stickyIndex];\n            this.scrollNodeUnderWidget(lastStickyNode.endIndex + 1, state);\n        }\n    }\n    scrollNodeUnderWidget(nodeIndex, state) {\n        const lastStickyNode = state.stickyNodes[state.count - 1];\n        const secondLastStickyNode = state.count > 1 ? state.stickyNodes[state.count - 2] : undefined;\n        const elementScrollTop = this.view.getElementTop(nodeIndex);\n        const elementTargetViewTop = secondLastStickyNode ? secondLastStickyNode.position + secondLastStickyNode.height + lastStickyNode.height : lastStickyNode.height;\n        this.view.scrollTop = elementScrollTop - elementTargetViewTop;\n    }\n    domFocus() {\n        if (!this.state) {\n            throw new Error('Cannot focus when state is undefined');\n        }\n        this.container.focus();\n    }\n    focusedLast() {\n        if (!this.state) {\n            return false;\n        }\n        return this.view.getHTMLElement().classList.contains('sticky-scroll-focused');\n    }\n    removeFocus() {\n        if (this.focusedIndex === -1) {\n            return;\n        }\n        this.toggleElementFocus(this.elements[this.focusedIndex], false);\n        this.focusedIndex = -1;\n    }\n    setFocus(newFocusIndex) {\n        if (0 > newFocusIndex) {\n            throw new Error('addFocus() can not remove focus');\n        }\n        if (!this.state && newFocusIndex >= 0) {\n            throw new Error('Cannot set focus index when state is undefined');\n        }\n        if (this.state && newFocusIndex >= this.state.count) {\n            throw new Error('Cannot set focus index to an index that does not exist');\n        }\n        const oldIndex = this.focusedIndex;\n        if (oldIndex >= 0) {\n            this.toggleElementFocus(this.elements[oldIndex], false);\n        }\n        if (newFocusIndex >= 0) {\n            this.toggleElementFocus(this.elements[newFocusIndex], true);\n        }\n        this.focusedIndex = newFocusIndex;\n    }\n    toggleElementFocus(element, focused) {\n        element.classList.toggle('focused', focused);\n    }\n    toggleStickyScrollFocused(focused) {\n        // Weather the last focus in the view was sticky scroll and not the list\n        this.view.getHTMLElement().classList.toggle('sticky-scroll-focused', focused);\n    }\n    onFocus() {\n        if (!this.state || this.elements.length === 0) {\n            throw new Error('Cannot focus when state is undefined or elements are empty');\n        }\n        this.domHasFocus = true;\n        this.toggleStickyScrollFocused(true);\n        if (this.focusedIndex === -1) {\n            this.setFocus(0);\n        }\n    }\n    onBlur() {\n        this.domHasFocus = false;\n    }\n    dispose() {\n        this.toggleStickyScrollFocused(false);\n        this._onDidChangeHasFocus.fire(false);\n        super.dispose();\n    }\n}\nfunction asTreeMouseEvent(event) {\n    let target = TreeMouseEventTarget.Unknown;\n    if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-twistie', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Twistie;\n    }\n    else if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-contents', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Element;\n    }\n    else if (hasParentWithClass(event.browserEvent.target, 'monaco-tree-type-filter', 'monaco-list')) {\n        target = TreeMouseEventTarget.Filter;\n    }\n    return {\n        browserEvent: event.browserEvent,\n        element: event.element ? event.element.element : null,\n        target\n    };\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait {\n    get nodeSet() {\n        if (!this._nodeSet) {\n            this._nodeSet = this.createNodeSet();\n        }\n        return this._nodeSet;\n    }\n    constructor(getFirstViewElementWithTrait, identityProvider) {\n        this.getFirstViewElementWithTrait = getFirstViewElementWithTrait;\n        this.identityProvider = identityProvider;\n        this.nodes = [];\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n    }\n    set(nodes, browserEvent) {\n        if (!(browserEvent === null || browserEvent === void 0 ? void 0 : browserEvent.__forceEvent) && equals(this.nodes, nodes)) {\n            return;\n        }\n        this._set(nodes, false, browserEvent);\n    }\n    _set(nodes, silent, browserEvent) {\n        this.nodes = [...nodes];\n        this.elements = undefined;\n        this._nodeSet = undefined;\n        if (!silent) {\n            const that = this;\n            this._onDidChange.fire({ get elements() { return that.get(); }, browserEvent });\n        }\n    }\n    get() {\n        if (!this.elements) {\n            this.elements = this.nodes.map(node => node.element);\n        }\n        return [...this.elements];\n    }\n    getNodes() {\n        return this.nodes;\n    }\n    has(node) {\n        return this.nodeSet.has(node);\n    }\n    onDidModelSplice({ insertedNodes, deletedNodes }) {\n        if (!this.identityProvider) {\n            const set = this.createNodeSet();\n            const visit = (node) => set.delete(node);\n            deletedNodes.forEach(node => dfs(node, visit));\n            this.set([...set.values()]);\n            return;\n        }\n        const deletedNodesIdSet = new Set();\n        const deletedNodesVisitor = (node) => deletedNodesIdSet.add(this.identityProvider.getId(node.element).toString());\n        deletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n        const insertedNodesMap = new Map();\n        const insertedNodesVisitor = (node) => insertedNodesMap.set(this.identityProvider.getId(node.element).toString(), node);\n        insertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n        const nodes = [];\n        for (const node of this.nodes) {\n            const id = this.identityProvider.getId(node.element).toString();\n            const wasDeleted = deletedNodesIdSet.has(id);\n            if (!wasDeleted) {\n                nodes.push(node);\n            }\n            else {\n                const insertedNode = insertedNodesMap.get(id);\n                if (insertedNode && insertedNode.visible) {\n                    nodes.push(insertedNode);\n                }\n            }\n        }\n        if (this.nodes.length > 0 && nodes.length === 0) {\n            const node = this.getFirstViewElementWithTrait();\n            if (node) {\n                nodes.push(node);\n            }\n        }\n        this._set(nodes, true);\n    }\n    createNodeSet() {\n        const set = new Set();\n        for (const node of this.nodes) {\n            set.add(node);\n        }\n        return set;\n    }\n}\nclass TreeNodeListMouseController extends MouseController {\n    constructor(list, tree, stickyScrollProvider) {\n        super(list);\n        this.tree = tree;\n        this.stickyScrollProvider = stickyScrollProvider;\n    }\n    onViewPointer(e) {\n        if (isButton(e.browserEvent.target) ||\n            isInputElement(e.browserEvent.target) ||\n            isMonacoEditor(e.browserEvent.target)) {\n            return;\n        }\n        if (e.browserEvent.isHandledByList) {\n            return;\n        }\n        const node = e.element;\n        if (!node) {\n            return super.onViewPointer(e);\n        }\n        if (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n            return super.onViewPointer(e);\n        }\n        const target = e.browserEvent.target;\n        const onTwistie = target.classList.contains('monaco-tl-twistie')\n            || (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16);\n        const isStickyElement = isStickyScrollElement(e.browserEvent.target);\n        let expandOnlyOnTwistieClick = false;\n        if (isStickyElement) {\n            expandOnlyOnTwistieClick = true;\n        }\n        else if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n            expandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n        }\n        else {\n            expandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n        }\n        if (!isStickyElement) {\n            if (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n                return super.onViewPointer(e);\n            }\n            if (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n                return super.onViewPointer(e);\n            }\n        }\n        else {\n            this.handleStickyScrollMouseEvent(e, node);\n        }\n        if (node.collapsible && (!isStickyElement || onTwistie)) {\n            const location = this.tree.getNodeLocation(node);\n            const recursive = e.browserEvent.altKey;\n            this.tree.setFocus([location]);\n            this.tree.toggleCollapsed(location, recursive);\n            if (expandOnlyOnTwistieClick && onTwistie) {\n                // Do not set this before calling a handler on the super class, because it will reject it as handled\n                e.browserEvent.isHandledByList = true;\n                return;\n            }\n        }\n        if (!isStickyElement) {\n            super.onViewPointer(e);\n        }\n    }\n    handleStickyScrollMouseEvent(e, node) {\n        if (isMonacoCustomToggle(e.browserEvent.target) || isActionItem(e.browserEvent.target)) {\n            return;\n        }\n        const stickyScrollController = this.stickyScrollProvider();\n        if (!stickyScrollController) {\n            throw new Error('Sticky scroll controller not found');\n        }\n        const nodeIndex = this.list.indexOf(node);\n        const elementScrollTop = this.list.getElementTop(nodeIndex);\n        const elementTargetViewTop = stickyScrollController.nodePositionTopBelowWidget(node);\n        this.tree.scrollTop = elementScrollTop - elementTargetViewTop;\n        this.list.domFocus();\n        this.list.setFocus([nodeIndex]);\n        this.list.setSelection([nodeIndex]);\n    }\n    onDoubleClick(e) {\n        const onTwistie = e.browserEvent.target.classList.contains('monaco-tl-twistie');\n        if (onTwistie || !this.tree.expandOnDoubleClick) {\n            return;\n        }\n        if (e.browserEvent.isHandledByList) {\n            return;\n        }\n        super.onDoubleClick(e);\n    }\n    // to make sure dom focus is not stolen (for example with context menu)\n    onMouseDown(e) {\n        const target = e.browserEvent.target;\n        if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n            super.onMouseDown(e);\n            return;\n        }\n    }\n    onContextMenu(e) {\n        const target = e.browserEvent.target;\n        if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n            super.onContextMenu(e);\n            return;\n        }\n    }\n}\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList extends List {\n    constructor(user, container, virtualDelegate, renderers, focusTrait, selectionTrait, anchorTrait, options) {\n        super(user, container, virtualDelegate, renderers, options);\n        this.focusTrait = focusTrait;\n        this.selectionTrait = selectionTrait;\n        this.anchorTrait = anchorTrait;\n    }\n    createMouseController(options) {\n        return new TreeNodeListMouseController(this, options.tree, options.stickyScrollProvider);\n    }\n    splice(start, deleteCount, elements = []) {\n        super.splice(start, deleteCount, elements);\n        if (elements.length === 0) {\n            return;\n        }\n        const additionalFocus = [];\n        const additionalSelection = [];\n        let anchor;\n        elements.forEach((node, index) => {\n            if (this.focusTrait.has(node)) {\n                additionalFocus.push(start + index);\n            }\n            if (this.selectionTrait.has(node)) {\n                additionalSelection.push(start + index);\n            }\n            if (this.anchorTrait.has(node)) {\n                anchor = start + index;\n            }\n        });\n        if (additionalFocus.length > 0) {\n            super.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n        }\n        if (additionalSelection.length > 0) {\n            super.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n        }\n        if (typeof anchor === 'number') {\n            super.setAnchor(anchor);\n        }\n    }\n    setFocus(indexes, browserEvent, fromAPI = false) {\n        super.setFocus(indexes, browserEvent);\n        if (!fromAPI) {\n            this.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setSelection(indexes, browserEvent, fromAPI = false) {\n        super.setSelection(indexes, browserEvent);\n        if (!fromAPI) {\n            this.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setAnchor(index, fromAPI = false) {\n        super.setAnchor(index);\n        if (!fromAPI) {\n            if (typeof index === 'undefined') {\n                this.anchorTrait.set([]);\n            }\n            else {\n                this.anchorTrait.set([this.element(index)]);\n            }\n        }\n    }\n}\nexport class AbstractTree {\n    get onDidScroll() { return this.view.onDidScroll; }\n    get onDidChangeFocus() { return this.eventBufferer.wrapEvent(this.focus.onDidChange); }\n    get onDidChangeSelection() { return this.eventBufferer.wrapEvent(this.selection.onDidChange); }\n    get onMouseDblClick() { return Event.filter(Event.map(this.view.onMouseDblClick, asTreeMouseEvent), e => e.target !== TreeMouseEventTarget.Filter); }\n    get onPointer() { return Event.map(this.view.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.view.onDidFocus; }\n    get onDidChangeModel() { return Event.signal(this.model.onDidSplice); }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get findMode() { var _a, _b; return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : TreeFindMode.Highlight; }\n    set findMode(findMode) { if (this.findController) {\n        this.findController.mode = findMode;\n    } }\n    get findMatchType() { var _a, _b; return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.matchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy; }\n    set findMatchType(findFuzzy) { if (this.findController) {\n        this.findController.matchType = findFuzzy;\n    } }\n    get expandOnDoubleClick() { return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick; }\n    get expandOnlyOnTwistieClick() { return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick; }\n    get onDidDispose() { return this.view.onDidDispose; }\n    constructor(_user, container, delegate, renderers, _options = {}) {\n        var _a;\n        this._user = _user;\n        this._options = _options;\n        this.eventBufferer = new EventBufferer();\n        this.onDidChangeFindOpenState = Event.None;\n        this.onDidChangeStickyScrollFocused = Event.None;\n        this.disposables = new DisposableStore();\n        this._onWillRefilter = new Emitter();\n        this.onWillRefilter = this._onWillRefilter.event;\n        this._onDidUpdateOptions = new Emitter();\n        this.treeDelegate = new ComposedTreeDelegate(delegate);\n        const onDidChangeCollapseStateRelay = new Relay();\n        const onDidChangeActiveNodes = new Relay();\n        const activeNodes = this.disposables.add(new EventCollection(onDidChangeActiveNodes.event));\n        const renderedIndentGuides = new SetMap();\n        this.renderers = renderers.map(r => new TreeRenderer(r, () => this.model, onDidChangeCollapseStateRelay.event, activeNodes, renderedIndentGuides, _options));\n        for (const r of this.renderers) {\n            this.disposables.add(r);\n        }\n        let filter;\n        if (_options.keyboardNavigationLabelProvider) {\n            filter = new FindFilter(this, _options.keyboardNavigationLabelProvider, _options.filter);\n            _options = { ..._options, filter: filter }; // TODO need typescript help here\n            this.disposables.add(filter);\n        }\n        this.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n        this.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n        this.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n        this.view = new TreeNodeList(_user, container, this.treeDelegate, this.renderers, this.focus, this.selection, this.anchor, { ...asListOptions(() => this.model, _options), tree: this, stickyScrollProvider: () => this.stickyScrollController });\n        this.model = this.createModel(_user, this.view, _options);\n        onDidChangeCollapseStateRelay.input = this.model.onDidChangeCollapseState;\n        const onDidModelSplice = Event.forEach(this.model.onDidSplice, e => {\n            this.eventBufferer.bufferEvents(() => {\n                this.focus.onDidModelSplice(e);\n                this.selection.onDidModelSplice(e);\n            });\n        }, this.disposables);\n        // Make sure the `forEach` always runs\n        onDidModelSplice(() => null, null, this.disposables);\n        // Active nodes can change when the model changes or when focus or selection change.\n        // We debounce it with 0 delay since these events may fire in the same stack and we only\n        // want to run this once. It also doesn't matter if it runs on the next tick since it's only\n        // a nice to have UI feature.\n        const activeNodesEmitter = this.disposables.add(new Emitter());\n        const activeNodesDebounce = this.disposables.add(new Delayer(0));\n        this.disposables.add(Event.any(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange)(() => {\n            activeNodesDebounce.trigger(() => {\n                const set = new Set();\n                for (const node of this.focus.getNodes()) {\n                    set.add(node);\n                }\n                for (const node of this.selection.getNodes()) {\n                    set.add(node);\n                }\n                activeNodesEmitter.fire([...set.values()]);\n            });\n        }));\n        onDidChangeActiveNodes.input = activeNodesEmitter.event;\n        if (_options.keyboardSupport !== false) {\n            const onKeyDown = Event.chain(this.view.onKeyDown, $ => $.filter(e => !isInputElement(e.target))\n                .map(e => new StandardKeyboardEvent(e)));\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 15 /* KeyCode.LeftArrow */))(this.onLeftArrow, this, this.disposables);\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 17 /* KeyCode.RightArrow */))(this.onRightArrow, this, this.disposables);\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 10 /* KeyCode.Space */))(this.onSpace, this, this.disposables);\n        }\n        if (((_a = _options.findWidgetEnabled) !== null && _a !== void 0 ? _a : true) && _options.keyboardNavigationLabelProvider && _options.contextViewProvider) {\n            const opts = this.options.findWidgetStyles ? { styles: this.options.findWidgetStyles } : undefined;\n            this.findController = new FindController(this, this.model, this.view, filter, _options.contextViewProvider, opts);\n            this.focusNavigationFilter = node => this.findController.shouldAllowFocus(node);\n            this.onDidChangeFindOpenState = this.findController.onDidChangeOpenState;\n            this.disposables.add(this.findController);\n            this.onDidChangeFindMode = this.findController.onDidChangeMode;\n            this.onDidChangeFindMatchType = this.findController.onDidChangeMatchType;\n        }\n        else {\n            this.onDidChangeFindMode = Event.None;\n            this.onDidChangeFindMatchType = Event.None;\n        }\n        if (_options.enableStickyScroll) {\n            this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, _options);\n            this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n        }\n        this.styleElement = createStyleSheet(this.view.getHTMLElement());\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    updateOptions(optionsUpdate = {}) {\n        var _a;\n        this._options = { ...this._options, ...optionsUpdate };\n        for (const renderer of this.renderers) {\n            renderer.updateOptions(optionsUpdate);\n        }\n        this.view.updateOptions(this._options);\n        (_a = this.findController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n        this.updateStickyScroll(optionsUpdate);\n        this._onDidUpdateOptions.fire(this._options);\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    get options() {\n        return this._options;\n    }\n    updateStickyScroll(optionsUpdate) {\n        var _a;\n        if (!this.stickyScrollController && this._options.enableStickyScroll) {\n            this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, this._options);\n            this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n        }\n        else if (this.stickyScrollController && !this._options.enableStickyScroll) {\n            this.onDidChangeStickyScrollFocused = Event.None;\n            this.stickyScrollController.dispose();\n            this.stickyScrollController = undefined;\n        }\n        (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.view.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.view.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.view.scrollTop = scrollTop;\n    }\n    get scrollHeight() {\n        return this.view.scrollHeight;\n    }\n    get renderHeight() {\n        return this.view.renderHeight;\n    }\n    domFocus() {\n        var _a;\n        if ((_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.focusedLast()) {\n            this.stickyScrollController.domFocus();\n        }\n        else {\n            this.view.domFocus();\n        }\n    }\n    layout(height, width) {\n        var _a;\n        this.view.layout(height, width);\n        if (isNumber(width)) {\n            (_a = this.findController) === null || _a === void 0 ? void 0 : _a.layout(width);\n        }\n    }\n    style(styles) {\n        var _a;\n        const suffix = `.${this.view.domId}`;\n        const content = [];\n        if (styles.treeIndentGuidesStroke) {\n            content.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeInactiveIndentGuidesStroke}; }`);\n            content.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n        }\n        // Sticky Scroll Background\n        if (styles.listBackground) {\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${styles.listBackground}; }`);\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${styles.listBackground}; }`);\n        }\n        // Sticky Scroll Focus\n        if (styles.listFocusForeground) {\n            content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { color: ${styles.listFocusForeground}; }`);\n            content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { color: inherit; }`);\n        }\n        // Sticky Scroll Focus Outlines\n        const focusAndSelectionOutline = asCssValueWithDefault(styles.listFocusAndSelectionOutline, asCssValueWithDefault(styles.listSelectionOutline, (_a = styles.listFocusOutline) !== null && _a !== void 0 ? _a : ''));\n        if (focusAndSelectionOutline) { // default: listFocusOutline\n            content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused.selected { outline: 1px solid ${focusAndSelectionOutline}; outline-offset: -1px;}`);\n            content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused.selected { outline: inherit;}`);\n        }\n        if (styles.listFocusOutline) { // default: set\n            content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`);\n            content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { outline: inherit; }`);\n            content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n            content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused:not(.sticky-scroll-focused) .monaco-tree-sticky-container .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n        }\n        this.styleElement.textContent = content.join('\\n');\n        this.view.style(styles);\n    }\n    // Tree navigation\n    getParentElement(location) {\n        const parentRef = this.model.getParentNodeLocation(location);\n        const parentNode = this.model.getNode(parentRef);\n        return parentNode.element;\n    }\n    getFirstElementChild(location) {\n        return this.model.getFirstElementChild(location);\n    }\n    // Tree\n    getNode(location) {\n        return this.model.getNode(location);\n    }\n    getNodeLocation(node) {\n        return this.model.getNodeLocation(node);\n    }\n    collapse(location, recursive = false) {\n        return this.model.setCollapsed(location, true, recursive);\n    }\n    expand(location, recursive = false) {\n        return this.model.setCollapsed(location, false, recursive);\n    }\n    toggleCollapsed(location, recursive = false) {\n        return this.model.setCollapsed(location, undefined, recursive);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsible) {\n        return this.model.setCollapsible(location, collapsible);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    refilter() {\n        this._onWillRefilter.fire(undefined);\n        this.model.refilter();\n    }\n    setSelection(elements, browserEvent) {\n        this.eventBufferer.bufferEvents(() => {\n            const nodes = elements.map(e => this.model.getNode(e));\n            this.selection.set(nodes, browserEvent);\n            const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n            this.view.setSelection(indexes, browserEvent, true);\n        });\n    }\n    getSelection() {\n        return this.selection.get();\n    }\n    setFocus(elements, browserEvent) {\n        this.eventBufferer.bufferEvents(() => {\n            const nodes = elements.map(e => this.model.getNode(e));\n            this.focus.set(nodes, browserEvent);\n            const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n            this.view.setFocus(indexes, browserEvent, true);\n        });\n    }\n    getFocus() {\n        return this.focus.get();\n    }\n    reveal(location, relativeTop) {\n        this.model.expandTo(location);\n        const index = this.model.getListIndex(location);\n        if (index === -1) {\n            return;\n        }\n        if (!this.stickyScrollController) {\n            this.view.reveal(index, relativeTop);\n        }\n        else {\n            const paddingTop = this.stickyScrollController.nodePositionTopBelowWidget(this.getNode(location));\n            this.view.reveal(index, relativeTop, paddingTop);\n        }\n    }\n    // List\n    onLeftArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, true);\n        if (!didChange) {\n            const parentLocation = this.model.getParentNodeLocation(location);\n            if (!parentLocation) {\n                return;\n            }\n            const parentListIndex = this.model.getListIndex(parentLocation);\n            this.view.reveal(parentListIndex);\n            this.view.setFocus([parentListIndex]);\n        }\n    }\n    onRightArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, false);\n        if (!didChange) {\n            if (!node.children.some(child => child.visible)) {\n                return;\n            }\n            const [focusedIndex] = this.view.getFocus();\n            const firstChildIndex = focusedIndex + 1;\n            this.view.reveal(firstChildIndex);\n            this.view.setFocus([firstChildIndex]);\n        }\n    }\n    onSpace(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const recursive = e.browserEvent.altKey;\n        this.model.setCollapsed(location, undefined, recursive);\n    }\n    dispose() {\n        var _a;\n        dispose(this.disposables);\n        (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.view.dispose();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}