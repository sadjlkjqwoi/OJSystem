{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineRange } from '../core/lineRange.js';\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nexport class LineRangeMapping {\n  static inverse(mapping, originalLineCount, modifiedLineCount) {\n    const result = [];\n    let lastOriginalEndLineNumber = 1;\n    let lastModifiedEndLineNumber = 1;\n    for (const m of mapping) {\n      const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, m.original.startLineNumber), new LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber));\n      if (!r.modified.isEmpty) {\n        result.push(r);\n      }\n      lastOriginalEndLineNumber = m.original.endLineNumberExclusive;\n      lastModifiedEndLineNumber = m.modified.endLineNumberExclusive;\n    }\n    const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1));\n    if (!r.modified.isEmpty) {\n      result.push(r);\n    }\n    return result;\n  }\n  static clip(mapping, originalRange, modifiedRange) {\n    const result = [];\n    for (const m of mapping) {\n      const original = m.original.intersect(originalRange);\n      const modified = m.modified.intersect(modifiedRange);\n      if (original && !original.isEmpty && modified && !modified.isEmpty) {\n        result.push(new LineRangeMapping(original, modified));\n      }\n    }\n    return result;\n  }\n  constructor(originalRange, modifiedRange) {\n    this.original = originalRange;\n    this.modified = modifiedRange;\n  }\n  toString() {\n    return `{${this.original.toString()}->${this.modified.toString()}}`;\n  }\n  flip() {\n    return new LineRangeMapping(this.modified, this.original);\n  }\n  join(other) {\n    return new LineRangeMapping(this.original.join(other.original), this.modified.join(other.modified));\n  }\n}\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n * Also contains inner range mappings.\n */\nexport class DetailedLineRangeMapping extends LineRangeMapping {\n  constructor(originalRange, modifiedRange, innerChanges) {\n    super(originalRange, modifiedRange);\n    this.innerChanges = innerChanges;\n  }\n  flip() {\n    var _a;\n    return new DetailedLineRangeMapping(this.modified, this.original, (_a = this.innerChanges) === null || _a === void 0 ? void 0 : _a.map(c => c.flip()));\n  }\n}\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nexport class RangeMapping {\n  constructor(originalRange, modifiedRange) {\n    this.originalRange = originalRange;\n    this.modifiedRange = modifiedRange;\n  }\n  toString() {\n    return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n  }\n  flip() {\n    return new RangeMapping(this.modifiedRange, this.originalRange);\n  }\n}","map":{"version":3,"names":["LineRange","LineRangeMapping","inverse","mapping","originalLineCount","modifiedLineCount","result","lastOriginalEndLineNumber","lastModifiedEndLineNumber","m","r","original","startLineNumber","modified","isEmpty","push","endLineNumberExclusive","clip","originalRange","modifiedRange","intersect","constructor","toString","flip","join","other","DetailedLineRangeMapping","innerChanges","_a","map","c","RangeMapping"],"sources":["D:/PersonalFiles/yupi/OJSystem/OJSystem/feioj-front/node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineRange } from '../core/lineRange.js';\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nexport class LineRangeMapping {\n    static inverse(mapping, originalLineCount, modifiedLineCount) {\n        const result = [];\n        let lastOriginalEndLineNumber = 1;\n        let lastModifiedEndLineNumber = 1;\n        for (const m of mapping) {\n            const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, m.original.startLineNumber), new LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber));\n            if (!r.modified.isEmpty) {\n                result.push(r);\n            }\n            lastOriginalEndLineNumber = m.original.endLineNumberExclusive;\n            lastModifiedEndLineNumber = m.modified.endLineNumberExclusive;\n        }\n        const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1));\n        if (!r.modified.isEmpty) {\n            result.push(r);\n        }\n        return result;\n    }\n    static clip(mapping, originalRange, modifiedRange) {\n        const result = [];\n        for (const m of mapping) {\n            const original = m.original.intersect(originalRange);\n            const modified = m.modified.intersect(modifiedRange);\n            if (original && !original.isEmpty && modified && !modified.isEmpty) {\n                result.push(new LineRangeMapping(original, modified));\n            }\n        }\n        return result;\n    }\n    constructor(originalRange, modifiedRange) {\n        this.original = originalRange;\n        this.modified = modifiedRange;\n    }\n    toString() {\n        return `{${this.original.toString()}->${this.modified.toString()}}`;\n    }\n    flip() {\n        return new LineRangeMapping(this.modified, this.original);\n    }\n    join(other) {\n        return new LineRangeMapping(this.original.join(other.original), this.modified.join(other.modified));\n    }\n}\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n * Also contains inner range mappings.\n */\nexport class DetailedLineRangeMapping extends LineRangeMapping {\n    constructor(originalRange, modifiedRange, innerChanges) {\n        super(originalRange, modifiedRange);\n        this.innerChanges = innerChanges;\n    }\n    flip() {\n        var _a;\n        return new DetailedLineRangeMapping(this.modified, this.original, (_a = this.innerChanges) === null || _a === void 0 ? void 0 : _a.map(c => c.flip()));\n    }\n}\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nexport class RangeMapping {\n    constructor(originalRange, modifiedRange) {\n        this.originalRange = originalRange;\n        this.modifiedRange = modifiedRange;\n    }\n    toString() {\n        return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n    }\n    flip() {\n        return new RangeMapping(this.modifiedRange, this.originalRange);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}