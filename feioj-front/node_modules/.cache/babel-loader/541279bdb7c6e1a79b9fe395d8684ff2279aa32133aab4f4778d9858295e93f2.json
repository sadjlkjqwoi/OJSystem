{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar CopyPasteController_1;\nimport { addDisposableListener, getActiveDocument } from '../../../../base/browser/dom.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { UriList, createStringDataTransferItem, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ClipboardEventUtils } from '../../../browser/controller/textAreaInput.js';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from '../../../browser/dnd.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { createCombinedWorkspaceEdit, sortEditsByYieldTo } from './edit.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { localize } from '../../../../nls.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nexport const changePasteTypeCommandId = 'editor.changePasteType';\nexport const pasteWidgetVisibleCtx = new RawContextKey('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\nconst vscodeClipboardMime = 'application/vnd.code.copyMetadata';\nlet CopyPasteController = CopyPasteController_1 = class CopyPasteController extends Disposable {\n  static get(editor) {\n    return editor.getContribution(CopyPasteController_1.ID);\n  }\n  constructor(editor, instantiationService, _bulkEditService, _clipboardService, _languageFeaturesService, _quickInputService, _progressService) {\n    super();\n    this._bulkEditService = _bulkEditService;\n    this._clipboardService = _clipboardService;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._quickInputService = _quickInputService;\n    this._progressService = _progressService;\n    this._editor = editor;\n    const container = editor.getContainerDomNode();\n    this._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));\n    this._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));\n    this._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));\n    this._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n    this._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, {\n      id: changePasteTypeCommandId,\n      label: localize('postPasteWidgetTitle', \"Show paste options...\")\n    }));\n  }\n  changePasteType() {\n    this._postPasteWidgetManager.tryShowSelector();\n  }\n  pasteAs(preferredId) {\n    this._editor.focus();\n    try {\n      this._pasteAsActionContext = {\n        preferredId\n      };\n      getActiveDocument().execCommand('paste');\n    } finally {\n      this._pasteAsActionContext = undefined;\n    }\n  }\n  isPasteAsEnabled() {\n    return this._editor.getOption(84 /* EditorOption.pasteAs */).enabled && !this._editor.getOption(90 /* EditorOption.readOnly */);\n  }\n  async finishedPaste() {\n    await this._currentPasteOperation;\n  }\n  handleCopy(e) {\n    var _a, _b;\n    if (!this._editor.hasTextFocus()) {\n      return;\n    }\n    if (platform.isWeb) {\n      // Explicitly clear the web resources clipboard.\n      // This is needed because on web, the browser clipboard is faked out using an in-memory store.\n      // This means the resources clipboard is not properly updated when copying from the editor.\n      this._clipboardService.writeResources([]);\n    }\n    if (!e.clipboardData || !this.isPasteAsEnabled()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    const selections = this._editor.getSelections();\n    if (!model || !(selections === null || selections === void 0 ? void 0 : selections.length)) {\n      return;\n    }\n    const enableEmptySelectionClipboard = this._editor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n    let ranges = selections;\n    const wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n    if (wasFromEmptySelection) {\n      if (!enableEmptySelectionClipboard) {\n        return;\n      }\n      ranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n    }\n    const toCopy = (_a = this._editor._getViewModel()) === null || _a === void 0 ? void 0 : _a.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n    const multicursorText = Array.isArray(toCopy) ? toCopy : null;\n    const defaultPastePayload = {\n      multicursorText,\n      pasteOnNewLine: wasFromEmptySelection,\n      mode: null\n    };\n    const providers = this._languageFeaturesService.documentPasteEditProvider.ordered(model).filter(x => !!x.prepareDocumentPaste);\n    if (!providers.length) {\n      this.setCopyMetadata(e.clipboardData, {\n        defaultPastePayload\n      });\n      return;\n    }\n    const dataTransfer = toVSDataTransfer(e.clipboardData);\n    const providerCopyMimeTypes = providers.flatMap(x => {\n      var _a;\n      return (_a = x.copyMimeTypes) !== null && _a !== void 0 ? _a : [];\n    });\n    // Save off a handle pointing to data that VS Code maintains.\n    const handle = generateUuid();\n    this.setCopyMetadata(e.clipboardData, {\n      id: handle,\n      providerCopyMimeTypes,\n      defaultPastePayload\n    });\n    const promise = createCancelablePromise(async token => {\n      const results = coalesce(await Promise.all(providers.map(async provider => {\n        try {\n          return await provider.prepareDocumentPaste(model, ranges, dataTransfer, token);\n        } catch (err) {\n          console.error(err);\n          return undefined;\n        }\n      })));\n      // Values from higher priority providers should overwrite values from lower priority ones.\n      // Reverse the array to so that the calls to `replace` below will do this\n      results.reverse();\n      for (const result of results) {\n        for (const [mime, value] of result) {\n          dataTransfer.replace(mime, value);\n        }\n      }\n      return dataTransfer;\n    });\n    (_b = this._currentCopyOperation) === null || _b === void 0 ? void 0 : _b.dataTransferPromise.cancel();\n    this._currentCopyOperation = {\n      handle: handle,\n      dataTransferPromise: promise\n    };\n  }\n  async handlePaste(e) {\n    var _a, _b, _c, _d, _e;\n    if (!e.clipboardData || !this._editor.hasTextFocus()) {\n      return;\n    }\n    (_a = MessageController.get(this._editor)) === null || _a === void 0 ? void 0 : _a.closeMessage();\n    (_b = this._currentPasteOperation) === null || _b === void 0 ? void 0 : _b.cancel();\n    this._currentPasteOperation = undefined;\n    const model = this._editor.getModel();\n    const selections = this._editor.getSelections();\n    if (!(selections === null || selections === void 0 ? void 0 : selections.length) || !model) {\n      return;\n    }\n    if (!this.isPasteAsEnabled() && !this._pasteAsActionContext // Still enable if paste as was explicitly requested\n    ) {\n      return;\n    }\n    const metadata = this.fetchCopyMetadata(e);\n    const dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n    dataTransfer.delete(vscodeClipboardMime);\n    const allPotentialMimeTypes = [...e.clipboardData.types, ...((_c = metadata === null || metadata === void 0 ? void 0 : metadata.providerCopyMimeTypes) !== null && _c !== void 0 ? _c : []),\n    // TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n    // However we can only check the system clipboard async. For this early check, just add it in.\n    // We filter providers again once we have the final dataTransfer we will use.\n    Mimes.uriList];\n    const allProviders = this._languageFeaturesService.documentPasteEditProvider.ordered(model).filter(provider => {\n      var _a, _b;\n      if ((_a = this._pasteAsActionContext) === null || _a === void 0 ? void 0 : _a.preferredId) {\n        if (this._pasteAsActionContext.preferredId !== provider.id) {\n          return false;\n        }\n      }\n      return (_b = provider.pasteMimeTypes) === null || _b === void 0 ? void 0 : _b.some(type => matchesMimeType(type, allPotentialMimeTypes));\n    });\n    if (!allProviders.length) {\n      if ((_d = this._pasteAsActionContext) === null || _d === void 0 ? void 0 : _d.preferredId) {\n        this.showPasteAsNoEditMessage(selections, (_e = this._pasteAsActionContext) === null || _e === void 0 ? void 0 : _e.preferredId);\n      }\n      return;\n    }\n    // Prevent the editor's default paste handler from running.\n    // Note that after this point, we are fully responsible for handling paste.\n    // If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    if (this._pasteAsActionContext) {\n      this.showPasteAsPick(this._pasteAsActionContext.preferredId, allProviders, selections, dataTransfer, metadata, {\n        trigger: 'explicit',\n        only: this._pasteAsActionContext.preferredId\n      });\n    } else {\n      this.doPasteInline(allProviders, selections, dataTransfer, metadata, {\n        trigger: 'implicit'\n      });\n    }\n  }\n  showPasteAsNoEditMessage(selections, editId) {\n    var _a;\n    (_a = MessageController.get(this._editor)) === null || _a === void 0 ? void 0 : _a.showMessage(localize('pasteAsError', \"No paste edits for '{0}' found\", editId), selections[0].getStartPosition());\n  }\n  doPasteInline(allProviders, selections, dataTransfer, metadata, context) {\n    const p = createCancelablePromise(async token => {\n      const editor = this._editor;\n      if (!editor.hasModel()) {\n        return;\n      }\n      const model = editor.getModel();\n      const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n      try {\n        await this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n        if (tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        // Filter out any providers the don't match the full data transfer we will send them.\n        const supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n        if (!supportedProviders.length || supportedProviders.length === 1 && supportedProviders[0].id === 'text' // Only our default text provider is active\n        ) {\n          await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n          return;\n        }\n        const providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n        if (tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        // If the only edit returned is a text edit, use the default paste handler\n        if (providerEdits.length === 1 && providerEdits[0].providerId === 'text') {\n          await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n          return;\n        }\n        if (providerEdits.length) {\n          const canShowWidget = editor.getOption(84 /* EditorOption.pasteAs */).showPasteSelector === 'afterPaste';\n          return this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, {\n            activeEditIndex: 0,\n            allEdits: providerEdits\n          }, canShowWidget, tokenSource.token);\n        }\n        await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n      } finally {\n        tokenSource.dispose();\n        if (this._currentPasteOperation === p) {\n          this._currentPasteOperation = undefined;\n        }\n      }\n    });\n    this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel\"), p);\n    this._currentPasteOperation = p;\n  }\n  showPasteAsPick(preferredId, allProviders, selections, dataTransfer, metadata, context) {\n    const p = createCancelablePromise(async token => {\n      const editor = this._editor;\n      if (!editor.hasModel()) {\n        return;\n      }\n      const model = editor.getModel();\n      const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n      try {\n        await this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n        if (tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        // Filter out any providers the don't match the full data transfer we will send them.\n        let supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n        if (preferredId) {\n          // We are looking for a specific edit\n          supportedProviders = supportedProviders.filter(edit => edit.id === preferredId);\n        }\n        const providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n        if (tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        if (!providerEdits.length) {\n          if (context.only) {\n            this.showPasteAsNoEditMessage(selections, context.only);\n          }\n          return;\n        }\n        let pickedEdit;\n        if (preferredId) {\n          pickedEdit = providerEdits.at(0);\n        } else {\n          const selected = await this._quickInputService.pick(providerEdits.map(edit => ({\n            label: edit.label,\n            description: edit.providerId,\n            detail: edit.detail,\n            edit\n          })), {\n            placeHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\")\n          });\n          pickedEdit = selected === null || selected === void 0 ? void 0 : selected.edit;\n        }\n        if (!pickedEdit) {\n          return;\n        }\n        const combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n        await this._bulkEditService.apply(combinedWorkspaceEdit, {\n          editor: this._editor\n        });\n      } finally {\n        tokenSource.dispose();\n        if (this._currentPasteOperation === p) {\n          this._currentPasteOperation = undefined;\n        }\n      }\n    });\n    this._progressService.withProgress({\n      location: 10 /* ProgressLocation.Window */,\n      title: localize('pasteAsProgress', \"Running paste handlers\")\n    }, () => p);\n  }\n  setCopyMetadata(dataTransfer, metadata) {\n    dataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n  }\n  fetchCopyMetadata(e) {\n    var _a;\n    if (!e.clipboardData) {\n      return;\n    }\n    // Prefer using the clipboard data we saved off\n    const rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n    if (rawMetadata) {\n      try {\n        return JSON.parse(rawMetadata);\n      } catch (_b) {\n        return undefined;\n      }\n    }\n    // Otherwise try to extract the generic text editor metadata\n    const [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n    if (metadata) {\n      return {\n        defaultPastePayload: {\n          mode: metadata.mode,\n          multicursorText: (_a = metadata.multicursorText) !== null && _a !== void 0 ? _a : null,\n          pasteOnNewLine: !!metadata.isFromEmptySelection\n        }\n      };\n    }\n    return undefined;\n  }\n  async mergeInDataFromCopy(dataTransfer, metadata, token) {\n    var _a;\n    if ((metadata === null || metadata === void 0 ? void 0 : metadata.id) && ((_a = this._currentCopyOperation) === null || _a === void 0 ? void 0 : _a.handle) === metadata.id) {\n      const toMergeDataTransfer = await this._currentCopyOperation.dataTransferPromise;\n      if (token.isCancellationRequested) {\n        return;\n      }\n      for (const [key, value] of toMergeDataTransfer) {\n        dataTransfer.replace(key, value);\n      }\n    }\n    if (!dataTransfer.has(Mimes.uriList)) {\n      const resources = await this._clipboardService.readResources();\n      if (token.isCancellationRequested) {\n        return;\n      }\n      if (resources.length) {\n        dataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n      }\n    }\n  }\n  async getPasteEdits(providers, dataTransfer, model, selections, context, token) {\n    const results = await raceCancellation(Promise.all(providers.map(async provider => {\n      var _a;\n      try {\n        const edit = await ((_a = provider.provideDocumentPasteEdits) === null || _a === void 0 ? void 0 : _a.call(provider, model, selections, dataTransfer, context, token));\n        if (edit) {\n          return {\n            ...edit,\n            providerId: provider.id\n          };\n        }\n      } catch (err) {\n        console.error(err);\n      }\n      return undefined;\n    })), token);\n    const edits = coalesce(results !== null && results !== void 0 ? results : []);\n    return sortEditsByYieldTo(edits);\n  }\n  async applyDefaultPasteHandler(dataTransfer, metadata, token) {\n    var _a, _b, _c;\n    const textDataTransfer = (_a = dataTransfer.get(Mimes.text)) !== null && _a !== void 0 ? _a : dataTransfer.get('text');\n    if (!textDataTransfer) {\n      return;\n    }\n    const text = await textDataTransfer.asString();\n    if (token.isCancellationRequested) {\n      return;\n    }\n    const payload = {\n      text,\n      pasteOnNewLine: (_b = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.pasteOnNewLine) !== null && _b !== void 0 ? _b : false,\n      multicursorText: (_c = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.multicursorText) !== null && _c !== void 0 ? _c : null,\n      mode: null\n    };\n    this._editor.trigger('keyboard', \"paste\" /* Handler.Paste */, payload);\n  }\n};\nCopyPasteController.ID = 'editor.contrib.copyPasteActionController';\nCopyPasteController = CopyPasteController_1 = __decorate([__param(1, IInstantiationService), __param(2, IBulkEditService), __param(3, IClipboardService), __param(4, ILanguageFeaturesService), __param(5, IQuickInputService), __param(6, IProgressService)], CopyPasteController);\nexport { CopyPasteController };\nfunction isSupportedPasteProvider(provider, dataTransfer) {\n  var _a;\n  return Boolean((_a = provider.pasteMimeTypes) === null || _a === void 0 ? void 0 : _a.some(type => dataTransfer.matches(type)));\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","CopyPasteController_1","addDisposableListener","getActiveDocument","coalesce","createCancelablePromise","raceCancellation","UriList","createStringDataTransferItem","matchesMimeType","Disposable","Mimes","platform","generateUuid","ClipboardEventUtils","toExternalVSDataTransfer","toVSDataTransfer","IBulkEditService","Range","ILanguageFeaturesService","createCombinedWorkspaceEdit","sortEditsByYieldTo","EditorStateCancellationTokenSource","InlineProgressManager","localize","IClipboardService","RawContextKey","IInstantiationService","IProgressService","IQuickInputService","PostEditWidgetManager","MessageController","changePasteTypeCommandId","pasteWidgetVisibleCtx","vscodeClipboardMime","CopyPasteController","get","editor","getContribution","ID","constructor","instantiationService","_bulkEditService","_clipboardService","_languageFeaturesService","_quickInputService","_progressService","_editor","container","getContainerDomNode","_register","e","handleCopy","handlePaste","_pasteProgressManager","_postPasteWidgetManager","createInstance","id","label","changePasteType","tryShowSelector","pasteAs","preferredId","focus","_pasteAsActionContext","execCommand","undefined","isPasteAsEnabled","getOption","enabled","finishedPaste","_currentPasteOperation","_a","_b","hasTextFocus","isWeb","writeResources","clipboardData","model","getModel","selections","getSelections","enableEmptySelectionClipboard","ranges","wasFromEmptySelection","isEmpty","startLineNumber","getLineLength","toCopy","_getViewModel","getPlainTextToCopy","isWindows","multicursorText","Array","isArray","defaultPastePayload","pasteOnNewLine","mode","providers","documentPasteEditProvider","ordered","filter","x","prepareDocumentPaste","setCopyMetadata","dataTransfer","providerCopyMimeTypes","flatMap","copyMimeTypes","handle","promise","token","results","Promise","all","map","provider","err","console","error","reverse","result","mime","value","replace","_currentCopyOperation","dataTransferPromise","cancel","_c","_d","_e","closeMessage","metadata","fetchCopyMetadata","delete","allPotentialMimeTypes","types","uriList","allProviders","pasteMimeTypes","some","type","showPasteAsNoEditMessage","preventDefault","stopImmediatePropagation","showPasteAsPick","trigger","only","doPasteInline","editId","showMessage","getStartPosition","context","p","hasModel","tokenSource","mergeInDataFromCopy","isCancellationRequested","supportedProviders","isSupportedPasteProvider","applyDefaultPasteHandler","providerEdits","getPasteEdits","providerId","canShowWidget","showPasteSelector","applyEditAndShowIfNeeded","activeEditIndex","allEdits","dispose","showWhile","getEndPosition","edit","pickedEdit","at","selected","pick","description","detail","placeHolder","combinedWorkspaceEdit","uri","apply","withProgress","location","title","setData","JSON","stringify","rawMetadata","getData","parse","_","getTextData","isFromEmptySelection","toMergeDataTransfer","has","resources","readResources","append","create","provideDocumentPasteEdits","call","edits","textDataTransfer","text","asString","payload","Boolean","matches"],"sources":["D:/PersonalFiles/yupi/OJSystem/OJSystem/feioj-front/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar CopyPasteController_1;\nimport { addDisposableListener, getActiveDocument } from '../../../../base/browser/dom.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { UriList, createStringDataTransferItem, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ClipboardEventUtils } from '../../../browser/controller/textAreaInput.js';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from '../../../browser/dnd.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { createCombinedWorkspaceEdit, sortEditsByYieldTo } from './edit.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { localize } from '../../../../nls.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nexport const changePasteTypeCommandId = 'editor.changePasteType';\nexport const pasteWidgetVisibleCtx = new RawContextKey('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\nconst vscodeClipboardMime = 'application/vnd.code.copyMetadata';\nlet CopyPasteController = CopyPasteController_1 = class CopyPasteController extends Disposable {\n    static get(editor) {\n        return editor.getContribution(CopyPasteController_1.ID);\n    }\n    constructor(editor, instantiationService, _bulkEditService, _clipboardService, _languageFeaturesService, _quickInputService, _progressService) {\n        super();\n        this._bulkEditService = _bulkEditService;\n        this._clipboardService = _clipboardService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._quickInputService = _quickInputService;\n        this._progressService = _progressService;\n        this._editor = editor;\n        const container = editor.getContainerDomNode();\n        this._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));\n        this._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));\n        this._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));\n        this._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n        this._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: localize('postPasteWidgetTitle', \"Show paste options...\") }));\n    }\n    changePasteType() {\n        this._postPasteWidgetManager.tryShowSelector();\n    }\n    pasteAs(preferredId) {\n        this._editor.focus();\n        try {\n            this._pasteAsActionContext = { preferredId };\n            getActiveDocument().execCommand('paste');\n        }\n        finally {\n            this._pasteAsActionContext = undefined;\n        }\n    }\n    isPasteAsEnabled() {\n        return this._editor.getOption(84 /* EditorOption.pasteAs */).enabled\n            && !this._editor.getOption(90 /* EditorOption.readOnly */);\n    }\n    async finishedPaste() {\n        await this._currentPasteOperation;\n    }\n    handleCopy(e) {\n        var _a, _b;\n        if (!this._editor.hasTextFocus()) {\n            return;\n        }\n        if (platform.isWeb) {\n            // Explicitly clear the web resources clipboard.\n            // This is needed because on web, the browser clipboard is faked out using an in-memory store.\n            // This means the resources clipboard is not properly updated when copying from the editor.\n            this._clipboardService.writeResources([]);\n        }\n        if (!e.clipboardData || !this.isPasteAsEnabled()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        const selections = this._editor.getSelections();\n        if (!model || !(selections === null || selections === void 0 ? void 0 : selections.length)) {\n            return;\n        }\n        const enableEmptySelectionClipboard = this._editor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n        let ranges = selections;\n        const wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n        if (wasFromEmptySelection) {\n            if (!enableEmptySelectionClipboard) {\n                return;\n            }\n            ranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n        }\n        const toCopy = (_a = this._editor._getViewModel()) === null || _a === void 0 ? void 0 : _a.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n        const multicursorText = Array.isArray(toCopy) ? toCopy : null;\n        const defaultPastePayload = {\n            multicursorText,\n            pasteOnNewLine: wasFromEmptySelection,\n            mode: null\n        };\n        const providers = this._languageFeaturesService.documentPasteEditProvider\n            .ordered(model)\n            .filter(x => !!x.prepareDocumentPaste);\n        if (!providers.length) {\n            this.setCopyMetadata(e.clipboardData, { defaultPastePayload });\n            return;\n        }\n        const dataTransfer = toVSDataTransfer(e.clipboardData);\n        const providerCopyMimeTypes = providers.flatMap(x => { var _a; return (_a = x.copyMimeTypes) !== null && _a !== void 0 ? _a : []; });\n        // Save off a handle pointing to data that VS Code maintains.\n        const handle = generateUuid();\n        this.setCopyMetadata(e.clipboardData, {\n            id: handle,\n            providerCopyMimeTypes,\n            defaultPastePayload\n        });\n        const promise = createCancelablePromise(async (token) => {\n            const results = coalesce(await Promise.all(providers.map(async (provider) => {\n                try {\n                    return await provider.prepareDocumentPaste(model, ranges, dataTransfer, token);\n                }\n                catch (err) {\n                    console.error(err);\n                    return undefined;\n                }\n            })));\n            // Values from higher priority providers should overwrite values from lower priority ones.\n            // Reverse the array to so that the calls to `replace` below will do this\n            results.reverse();\n            for (const result of results) {\n                for (const [mime, value] of result) {\n                    dataTransfer.replace(mime, value);\n                }\n            }\n            return dataTransfer;\n        });\n        (_b = this._currentCopyOperation) === null || _b === void 0 ? void 0 : _b.dataTransferPromise.cancel();\n        this._currentCopyOperation = { handle: handle, dataTransferPromise: promise };\n    }\n    async handlePaste(e) {\n        var _a, _b, _c, _d, _e;\n        if (!e.clipboardData || !this._editor.hasTextFocus()) {\n            return;\n        }\n        (_a = MessageController.get(this._editor)) === null || _a === void 0 ? void 0 : _a.closeMessage();\n        (_b = this._currentPasteOperation) === null || _b === void 0 ? void 0 : _b.cancel();\n        this._currentPasteOperation = undefined;\n        const model = this._editor.getModel();\n        const selections = this._editor.getSelections();\n        if (!(selections === null || selections === void 0 ? void 0 : selections.length) || !model) {\n            return;\n        }\n        if (!this.isPasteAsEnabled()\n            && !this._pasteAsActionContext // Still enable if paste as was explicitly requested\n        ) {\n            return;\n        }\n        const metadata = this.fetchCopyMetadata(e);\n        const dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n        dataTransfer.delete(vscodeClipboardMime);\n        const allPotentialMimeTypes = [\n            ...e.clipboardData.types,\n            ...(_c = metadata === null || metadata === void 0 ? void 0 : metadata.providerCopyMimeTypes) !== null && _c !== void 0 ? _c : [],\n            // TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n            // However we can only check the system clipboard async. For this early check, just add it in.\n            // We filter providers again once we have the final dataTransfer we will use.\n            Mimes.uriList,\n        ];\n        const allProviders = this._languageFeaturesService.documentPasteEditProvider\n            .ordered(model)\n            .filter(provider => {\n            var _a, _b;\n            if ((_a = this._pasteAsActionContext) === null || _a === void 0 ? void 0 : _a.preferredId) {\n                if (this._pasteAsActionContext.preferredId !== provider.id) {\n                    return false;\n                }\n            }\n            return (_b = provider.pasteMimeTypes) === null || _b === void 0 ? void 0 : _b.some(type => matchesMimeType(type, allPotentialMimeTypes));\n        });\n        if (!allProviders.length) {\n            if ((_d = this._pasteAsActionContext) === null || _d === void 0 ? void 0 : _d.preferredId) {\n                this.showPasteAsNoEditMessage(selections, (_e = this._pasteAsActionContext) === null || _e === void 0 ? void 0 : _e.preferredId);\n            }\n            return;\n        }\n        // Prevent the editor's default paste handler from running.\n        // Note that after this point, we are fully responsible for handling paste.\n        // If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        if (this._pasteAsActionContext) {\n            this.showPasteAsPick(this._pasteAsActionContext.preferredId, allProviders, selections, dataTransfer, metadata, { trigger: 'explicit', only: this._pasteAsActionContext.preferredId });\n        }\n        else {\n            this.doPasteInline(allProviders, selections, dataTransfer, metadata, { trigger: 'implicit' });\n        }\n    }\n    showPasteAsNoEditMessage(selections, editId) {\n        var _a;\n        (_a = MessageController.get(this._editor)) === null || _a === void 0 ? void 0 : _a.showMessage(localize('pasteAsError', \"No paste edits for '{0}' found\", editId), selections[0].getStartPosition());\n    }\n    doPasteInline(allProviders, selections, dataTransfer, metadata, context) {\n        const p = createCancelablePromise(async (token) => {\n            const editor = this._editor;\n            if (!editor.hasModel()) {\n                return;\n            }\n            const model = editor.getModel();\n            const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n            try {\n                await this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // Filter out any providers the don't match the full data transfer we will send them.\n                const supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n                if (!supportedProviders.length\n                    || (supportedProviders.length === 1 && supportedProviders[0].id === 'text') // Only our default text provider is active\n                ) {\n                    await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n                    return;\n                }\n                const providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // If the only edit returned is a text edit, use the default paste handler\n                if (providerEdits.length === 1 && providerEdits[0].providerId === 'text') {\n                    await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n                    return;\n                }\n                if (providerEdits.length) {\n                    const canShowWidget = editor.getOption(84 /* EditorOption.pasteAs */).showPasteSelector === 'afterPaste';\n                    return this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, { activeEditIndex: 0, allEdits: providerEdits }, canShowWidget, tokenSource.token);\n                }\n                await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n            }\n            finally {\n                tokenSource.dispose();\n                if (this._currentPasteOperation === p) {\n                    this._currentPasteOperation = undefined;\n                }\n            }\n        });\n        this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel\"), p);\n        this._currentPasteOperation = p;\n    }\n    showPasteAsPick(preferredId, allProviders, selections, dataTransfer, metadata, context) {\n        const p = createCancelablePromise(async (token) => {\n            const editor = this._editor;\n            if (!editor.hasModel()) {\n                return;\n            }\n            const model = editor.getModel();\n            const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n            try {\n                await this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // Filter out any providers the don't match the full data transfer we will send them.\n                let supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n                if (preferredId) {\n                    // We are looking for a specific edit\n                    supportedProviders = supportedProviders.filter(edit => edit.id === preferredId);\n                }\n                const providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                if (!providerEdits.length) {\n                    if (context.only) {\n                        this.showPasteAsNoEditMessage(selections, context.only);\n                    }\n                    return;\n                }\n                let pickedEdit;\n                if (preferredId) {\n                    pickedEdit = providerEdits.at(0);\n                }\n                else {\n                    const selected = await this._quickInputService.pick(providerEdits.map((edit) => ({\n                        label: edit.label,\n                        description: edit.providerId,\n                        detail: edit.detail,\n                        edit,\n                    })), {\n                        placeHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\"),\n                    });\n                    pickedEdit = selected === null || selected === void 0 ? void 0 : selected.edit;\n                }\n                if (!pickedEdit) {\n                    return;\n                }\n                const combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n                await this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor });\n            }\n            finally {\n                tokenSource.dispose();\n                if (this._currentPasteOperation === p) {\n                    this._currentPasteOperation = undefined;\n                }\n            }\n        });\n        this._progressService.withProgress({\n            location: 10 /* ProgressLocation.Window */,\n            title: localize('pasteAsProgress', \"Running paste handlers\"),\n        }, () => p);\n    }\n    setCopyMetadata(dataTransfer, metadata) {\n        dataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n    }\n    fetchCopyMetadata(e) {\n        var _a;\n        if (!e.clipboardData) {\n            return;\n        }\n        // Prefer using the clipboard data we saved off\n        const rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n        if (rawMetadata) {\n            try {\n                return JSON.parse(rawMetadata);\n            }\n            catch (_b) {\n                return undefined;\n            }\n        }\n        // Otherwise try to extract the generic text editor metadata\n        const [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n        if (metadata) {\n            return {\n                defaultPastePayload: {\n                    mode: metadata.mode,\n                    multicursorText: (_a = metadata.multicursorText) !== null && _a !== void 0 ? _a : null,\n                    pasteOnNewLine: !!metadata.isFromEmptySelection,\n                },\n            };\n        }\n        return undefined;\n    }\n    async mergeInDataFromCopy(dataTransfer, metadata, token) {\n        var _a;\n        if ((metadata === null || metadata === void 0 ? void 0 : metadata.id) && ((_a = this._currentCopyOperation) === null || _a === void 0 ? void 0 : _a.handle) === metadata.id) {\n            const toMergeDataTransfer = await this._currentCopyOperation.dataTransferPromise;\n            if (token.isCancellationRequested) {\n                return;\n            }\n            for (const [key, value] of toMergeDataTransfer) {\n                dataTransfer.replace(key, value);\n            }\n        }\n        if (!dataTransfer.has(Mimes.uriList)) {\n            const resources = await this._clipboardService.readResources();\n            if (token.isCancellationRequested) {\n                return;\n            }\n            if (resources.length) {\n                dataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n            }\n        }\n    }\n    async getPasteEdits(providers, dataTransfer, model, selections, context, token) {\n        const results = await raceCancellation(Promise.all(providers.map(async (provider) => {\n            var _a;\n            try {\n                const edit = await ((_a = provider.provideDocumentPasteEdits) === null || _a === void 0 ? void 0 : _a.call(provider, model, selections, dataTransfer, context, token));\n                if (edit) {\n                    return { ...edit, providerId: provider.id };\n                }\n            }\n            catch (err) {\n                console.error(err);\n            }\n            return undefined;\n        })), token);\n        const edits = coalesce(results !== null && results !== void 0 ? results : []);\n        return sortEditsByYieldTo(edits);\n    }\n    async applyDefaultPasteHandler(dataTransfer, metadata, token) {\n        var _a, _b, _c;\n        const textDataTransfer = (_a = dataTransfer.get(Mimes.text)) !== null && _a !== void 0 ? _a : dataTransfer.get('text');\n        if (!textDataTransfer) {\n            return;\n        }\n        const text = await textDataTransfer.asString();\n        if (token.isCancellationRequested) {\n            return;\n        }\n        const payload = {\n            text,\n            pasteOnNewLine: (_b = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.pasteOnNewLine) !== null && _b !== void 0 ? _b : false,\n            multicursorText: (_c = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.multicursorText) !== null && _c !== void 0 ? _c : null,\n            mode: null,\n        };\n        this._editor.trigger('keyboard', \"paste\" /* Handler.Paste */, payload);\n    }\n};\nCopyPasteController.ID = 'editor.contrib.copyPasteActionController';\nCopyPasteController = CopyPasteController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IBulkEditService),\n    __param(3, IClipboardService),\n    __param(4, ILanguageFeaturesService),\n    __param(5, IQuickInputService),\n    __param(6, IProgressService)\n], CopyPasteController);\nexport { CopyPasteController };\nfunction isSupportedPasteProvider(provider, dataTransfer) {\n    var _a;\n    return Boolean((_a = provider.pasteMimeTypes) === null || _a === void 0 ? void 0 : _a.some(type => dataTransfer.matches(type)));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}